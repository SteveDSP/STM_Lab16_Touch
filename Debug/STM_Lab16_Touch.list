
STM_Lab16_Touch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001054c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b84  0801074c  0801074c  0002074c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080122d0  080122d0  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  080122d0  080122d0  000222d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080122d8  080122d8  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080122d8  080122d8  000222d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080122dc  080122dc  000222dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  080122e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000a4  08012384  000300a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000144  08012424  00030144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00001454  200001e4  080124c4  000301e4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20001638  080124c4  00031638  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00030212  2**0
                  CONTENTS, READONLY
 15 .debug_info   00037add  00000000  00000000  00030255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000065bd  00000000  00000000  00067d32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002dc0  00000000  00000000  0006e2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000239d  00000000  00000000  000710b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003b68b  00000000  00000000  0007344d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0003b877  00000000  00000000  000aead8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00151eb2  00000000  00000000  000ea34f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000cd54  00000000  00000000  0023c204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000052  00000000  00000000  00248f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e4 	.word	0x200001e4
 800021c:	00000000 	.word	0x00000000
 8000220:	08010734 	.word	0x08010734

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e8 	.word	0x200001e8
 800023c:	08010734 	.word	0x08010734

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b590      	push	{r4, r7, lr}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f004 fb6b 	bl	8004cbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f8af 	bl	8000748 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005ea:	f000 f929 	bl	8000840 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ee:	f001 f9b5 	bl	800195c <MX_GPIO_Init>
  MX_ADC1_Init();
 80005f2:	f000 f94f 	bl	8000894 <MX_ADC1_Init>
  MX_ADC3_Init();
 80005f6:	f000 f99f 	bl	8000938 <MX_ADC3_Init>
  MX_CRC_Init();
 80005fa:	f000 f9ef 	bl	80009dc <MX_CRC_Init>
  MX_DMA2D_Init();
 80005fe:	f000 fa47 	bl	8000a90 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 8000602:	f000 fa7d 	bl	8000b00 <MX_DSIHOST_DSI_Init>
  MX_ETH_Init();
 8000606:	f000 fb7b 	bl	8000d00 <MX_ETH_Init>
  MX_FMC_Init();
 800060a:	f001 f957 	bl	80018bc <MX_FMC_Init>
  MX_HDMI_CEC_Init();
 800060e:	f000 fbc5 	bl	8000d9c <MX_HDMI_CEC_Init>
  MX_I2C1_Init();
 8000612:	f000 fbf7 	bl	8000e04 <MX_I2C1_Init>
  MX_I2C4_Init();
 8000616:	f000 fc35 	bl	8000e84 <MX_I2C4_Init>
  MX_LTDC_Init();
 800061a:	f000 fc73 	bl	8000f04 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 800061e:	f000 fcf1 	bl	8001004 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000622:	f000 fd1b 	bl	800105c <MX_RTC_Init>
  MX_SAI1_Init();
 8000626:	f000 fdb5 	bl	8001194 <MX_SAI1_Init>
  MX_SAI2_Init();
 800062a:	f000 fe5b 	bl	80012e4 <MX_SAI2_Init>
  MX_SPDIFRX_Init();
 800062e:	f000 fe85 	bl	800133c <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8000632:	f000 feb5 	bl	80013a0 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000636:	f000 feef 	bl	8001418 <MX_TIM1_Init>
  MX_TIM3_Init();
 800063a:	f000 ff41 	bl	80014c0 <MX_TIM3_Init>
  MX_TIM10_Init();
 800063e:	f000 ff99 	bl	8001574 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000642:	f000 ffe5 	bl	8001610 <MX_TIM11_Init>
  MX_TIM12_Init();
 8000646:	f001 f831 	bl	80016ac <MX_TIM12_Init>
  MX_UART5_Init();
 800064a:	f001 f875 	bl	8001738 <MX_UART5_Init>
  MX_USART1_UART_Init();
 800064e:	f001 f8a3 	bl	8001798 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000652:	f001 f8d1 	bl	80017f8 <MX_USART6_UART_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000656:	f001 f8ff 	bl	8001858 <MX_USB_OTG_HS_PCD_Init>
  MX_DFSDM1_Init();
 800065a:	f000 f9e1 	bl	8000a20 <MX_DFSDM1_Init>
  /* USER CODE BEGIN 2 */

  // Enable the LCD
     uint8_t  lcd_status = LCD_OK;
 800065e:	2300      	movs	r3, #0
 8000660:	71fb      	strb	r3, [r7, #7]
     lcd_status = BSP_LCD_Init();
 8000662:	f003 fc1a 	bl	8003e9a <BSP_LCD_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]

     if(lcd_status == LCD_OK)
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d102      	bne.n	8000676 <main+0x9a>
     {
    	 /* Display touch screen active debug */
         printf("LCD is active!\r\n");
 8000670:	482e      	ldr	r0, [pc, #184]	; (800072c <main+0x150>)
 8000672:	f00f f9f5 	bl	800fa60 <puts>
     }


     //Set Brightness
     BSP_LCD_SetBrightness(100); //0 - 100 Max
 8000676:	2064      	movs	r0, #100	; 0x64
 8000678:	f003 ff00 	bl	800447c <BSP_LCD_SetBrightness>

     // Configure the LCD layers with their framebuffers in SRAM
     BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 800067c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000680:	2000      	movs	r0, #0
 8000682:	f003 fda7 	bl	80041d4 <BSP_LCD_LayerDefaultInit>


     // Draw the image on layer 0
     BSP_LCD_SelectLayer(0); //This is foreground or background ...
 8000686:	2000      	movs	r0, #0
 8000688:	f003 fe04 	bl	8004294 <BSP_LCD_SelectLayer>


     ts_status = BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 800068c:	f003 fd8a 	bl	80041a4 <BSP_LCD_GetXSize>
 8000690:	4603      	mov	r3, r0
 8000692:	b29c      	uxth	r4, r3
 8000694:	f003 fd92 	bl	80041bc <BSP_LCD_GetYSize>
 8000698:	4603      	mov	r3, r0
 800069a:	b29b      	uxth	r3, r3
 800069c:	4619      	mov	r1, r3
 800069e:	4620      	mov	r0, r4
 80006a0:	f004 f998 	bl	80049d4 <BSP_TS_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	461a      	mov	r2, r3
 80006a8:	4b21      	ldr	r3, [pc, #132]	; (8000730 <main+0x154>)
 80006aa:	601a      	str	r2, [r3, #0]
      //Could do with calibration..
      if(ts_status == TS_OK)
 80006ac:	4b20      	ldr	r3, [pc, #128]	; (8000730 <main+0x154>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d102      	bne.n	80006ba <main+0xde>
      {
    	  /* Display touch screen active debug */
          printf("Touch screen is go!!\r\n");
 80006b4:	481f      	ldr	r0, [pc, #124]	; (8000734 <main+0x158>)
 80006b6:	f00f f9d3 	bl	800fa60 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
      while (1)
        {
          ts_status = BSP_TS_GetState(&TS_State);
 80006ba:	481f      	ldr	r0, [pc, #124]	; (8000738 <main+0x15c>)
 80006bc:	f004 f9ea 	bl	8004a94 <BSP_TS_GetState>
 80006c0:	4603      	mov	r3, r0
 80006c2:	461a      	mov	r2, r3
 80006c4:	4b1a      	ldr	r3, [pc, #104]	; (8000730 <main+0x154>)
 80006c6:	601a      	str	r2, [r3, #0]
          if(TS_State.touchDetected){
 80006c8:	4b1b      	ldr	r3, [pc, #108]	; (8000738 <main+0x15c>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d0f4      	beq.n	80006ba <main+0xde>

          	/* Get X and Y position of the first touch post calibrated */
             uint16_t xAxis = TS_State.touchX[0];
 80006d0:	4b19      	ldr	r3, [pc, #100]	; (8000738 <main+0x15c>)
 80006d2:	885b      	ldrh	r3, [r3, #2]
 80006d4:	80bb      	strh	r3, [r7, #4]
              uint16_t yAxis = TS_State.touchY[0];
 80006d6:	4b18      	ldr	r3, [pc, #96]	; (8000738 <main+0x15c>)
 80006d8:	88db      	ldrh	r3, [r3, #6]
 80006da:	807b      	strh	r3, [r7, #2]
            	xAxis = xAxis % 800;
 80006dc:	88bb      	ldrh	r3, [r7, #4]
 80006de:	4a17      	ldr	r2, [pc, #92]	; (800073c <main+0x160>)
 80006e0:	fba2 1203 	umull	r1, r2, r2, r3
 80006e4:	0a12      	lsrs	r2, r2, #8
 80006e6:	f44f 7148 	mov.w	r1, #800	; 0x320
 80006ea:	fb01 f202 	mul.w	r2, r1, r2
 80006ee:	1a9b      	subs	r3, r3, r2
 80006f0:	80bb      	strh	r3, [r7, #4]
            	yAxis = yAxis % 480;
 80006f2:	887a      	ldrh	r2, [r7, #2]
 80006f4:	4b12      	ldr	r3, [pc, #72]	; (8000740 <main+0x164>)
 80006f6:	fba3 1302 	umull	r1, r3, r3, r2
 80006fa:	0a19      	lsrs	r1, r3, #8
 80006fc:	460b      	mov	r3, r1
 80006fe:	011b      	lsls	r3, r3, #4
 8000700:	1a5b      	subs	r3, r3, r1
 8000702:	015b      	lsls	r3, r3, #5
 8000704:	1ad3      	subs	r3, r2, r3
 8000706:	807b      	strh	r3, [r7, #2]
            	BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8000708:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 800070c:	f003 fdd2 	bl	80042b4 <BSP_LCD_SetTextColor>
            	BSP_LCD_DrawRect(xAxis, yAxis, 20, 20); //This doesn't clear..
 8000710:	8879      	ldrh	r1, [r7, #2]
 8000712:	88b8      	ldrh	r0, [r7, #4]
 8000714:	2314      	movs	r3, #20
 8000716:	2214      	movs	r2, #20
 8000718:	f003 fe7e 	bl	8004418 <BSP_LCD_DrawRect>
              printf("%d, %d\r\n", xAxis, yAxis);
 800071c:	88bb      	ldrh	r3, [r7, #4]
 800071e:	887a      	ldrh	r2, [r7, #2]
 8000720:	4619      	mov	r1, r3
 8000722:	4808      	ldr	r0, [pc, #32]	; (8000744 <main+0x168>)
 8000724:	f00f f936 	bl	800f994 <iprintf>
          ts_status = BSP_TS_GetState(&TS_State);
 8000728:	e7c7      	b.n	80006ba <main+0xde>
 800072a:	bf00      	nop
 800072c:	0801074c 	.word	0x0801074c
 8000730:	200010f0 	.word	0x200010f0
 8000734:	0801075c 	.word	0x0801075c
 8000738:	200010e4 	.word	0x200010e4
 800073c:	51eb851f 	.word	0x51eb851f
 8000740:	88888889 	.word	0x88888889
 8000744:	08010774 	.word	0x08010774

08000748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b094      	sub	sp, #80	; 0x50
 800074c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	2234      	movs	r2, #52	; 0x34
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f00f fa62 	bl	800fc20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800075c:	f107 0308 	add.w	r3, r7, #8
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800076c:	f00a f924 	bl	800a9b8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000770:	4b31      	ldr	r3, [pc, #196]	; (8000838 <SystemClock_Config+0xf0>)
 8000772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000774:	4a30      	ldr	r2, [pc, #192]	; (8000838 <SystemClock_Config+0xf0>)
 8000776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800077a:	6413      	str	r3, [r2, #64]	; 0x40
 800077c:	4b2e      	ldr	r3, [pc, #184]	; (8000838 <SystemClock_Config+0xf0>)
 800077e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000788:	4b2c      	ldr	r3, [pc, #176]	; (800083c <SystemClock_Config+0xf4>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a2b      	ldr	r2, [pc, #172]	; (800083c <SystemClock_Config+0xf4>)
 800078e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000792:	6013      	str	r3, [r2, #0]
 8000794:	4b29      	ldr	r3, [pc, #164]	; (800083c <SystemClock_Config+0xf4>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800079c:	603b      	str	r3, [r7, #0]
 800079e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80007a0:	230b      	movs	r3, #11
 80007a2:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007aa:	2301      	movs	r3, #1
 80007ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ae:	2310      	movs	r3, #16
 80007b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007b2:	2301      	movs	r3, #1
 80007b4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b6:	2302      	movs	r3, #2
 80007b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 80007c0:	2319      	movs	r3, #25
 80007c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 80007c4:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80007c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ca:	2302      	movs	r3, #2
 80007cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007ce:	2304      	movs	r3, #4
 80007d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007d2:	2302      	movs	r3, #2
 80007d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	4618      	mov	r0, r3
 80007dc:	f00a fa0e 	bl	800abfc <HAL_RCC_OscConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80007e6:	f001 fa3f 	bl	8001c68 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007ea:	f00a f8f5 	bl	800a9d8 <HAL_PWREx_EnableOverDrive>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80007f4:	f001 fa38 	bl	8001c68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f8:	230f      	movs	r3, #15
 80007fa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fc:	2302      	movs	r3, #2
 80007fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000804:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000808:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800080a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000810:	f107 0308 	add.w	r3, r7, #8
 8000814:	2107      	movs	r1, #7
 8000816:	4618      	mov	r0, r3
 8000818:	f00a fc9e 	bl	800b158 <HAL_RCC_ClockConfig>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8000822:	f001 fa21 	bl	8001c68 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000826:	2200      	movs	r2, #0
 8000828:	2100      	movs	r1, #0
 800082a:	2000      	movs	r0, #0
 800082c:	f00a fd80 	bl	800b330 <HAL_RCC_MCOConfig>
}
 8000830:	bf00      	nop
 8000832:	3750      	adds	r7, #80	; 0x50
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40023800 	.word	0x40023800
 800083c:	40007000 	.word	0x40007000

08000840 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b0a4      	sub	sp, #144	; 0x90
 8000844:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000846:	463b      	mov	r3, r7
 8000848:	2290      	movs	r2, #144	; 0x90
 800084a:	2100      	movs	r1, #0
 800084c:	4618      	mov	r0, r3
 800084e:	f00f f9e7 	bl	800fc20 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI1
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <PeriphCommonClock_Config+0x50>)
 8000854:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI2;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000856:	23c0      	movs	r3, #192	; 0xc0
 8000858:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800085a:	2302      	movs	r3, #2
 800085c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 3;
 800085e:	2303      	movs	r3, #3
 8000860:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8000862:	2301      	movs	r3, #1
 8000864:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000866:	2301      	movs	r3, #1
 8000868:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800086a:	2300      	movs	r3, #0
 800086c:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 800086e:	2300      	movs	r3, #0
 8000870:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000872:	2300      	movs	r3, #0
 8000874:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000876:	463b      	mov	r3, r7
 8000878:	4618      	mov	r0, r3
 800087a:	f00a fee9 	bl	800b650 <HAL_RCCEx_PeriphCLKConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <PeriphCommonClock_Config+0x48>
  {
    Error_Handler();
 8000884:	f001 f9f0 	bl	8001c68 <Error_Handler>
  }
}
 8000888:	bf00      	nop
 800088a:	3790      	adds	r7, #144	; 0x90
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	00180008 	.word	0x00180008

08000894 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800089a:	463b      	mov	r3, r7
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008a6:	4b21      	ldr	r3, [pc, #132]	; (800092c <MX_ADC1_Init+0x98>)
 80008a8:	4a21      	ldr	r2, [pc, #132]	; (8000930 <MX_ADC1_Init+0x9c>)
 80008aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008ac:	4b1f      	ldr	r3, [pc, #124]	; (800092c <MX_ADC1_Init+0x98>)
 80008ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008b4:	4b1d      	ldr	r3, [pc, #116]	; (800092c <MX_ADC1_Init+0x98>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008ba:	4b1c      	ldr	r3, [pc, #112]	; (800092c <MX_ADC1_Init+0x98>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008c0:	4b1a      	ldr	r3, [pc, #104]	; (800092c <MX_ADC1_Init+0x98>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008c6:	4b19      	ldr	r3, [pc, #100]	; (800092c <MX_ADC1_Init+0x98>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008ce:	4b17      	ldr	r3, [pc, #92]	; (800092c <MX_ADC1_Init+0x98>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008d4:	4b15      	ldr	r3, [pc, #84]	; (800092c <MX_ADC1_Init+0x98>)
 80008d6:	4a17      	ldr	r2, [pc, #92]	; (8000934 <MX_ADC1_Init+0xa0>)
 80008d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008da:	4b14      	ldr	r3, [pc, #80]	; (800092c <MX_ADC1_Init+0x98>)
 80008dc:	2200      	movs	r2, #0
 80008de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <MX_ADC1_Init+0x98>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_ADC1_Init+0x98>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008ee:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_ADC1_Init+0x98>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008f4:	480d      	ldr	r0, [pc, #52]	; (800092c <MX_ADC1_Init+0x98>)
 80008f6:	f004 fa33 	bl	8004d60 <HAL_ADC_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000900:	f001 f9b2 	bl	8001c68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000904:	230c      	movs	r3, #12
 8000906:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000908:	2301      	movs	r3, #1
 800090a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800090c:	2300      	movs	r3, #0
 800090e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000910:	463b      	mov	r3, r7
 8000912:	4619      	mov	r1, r3
 8000914:	4805      	ldr	r0, [pc, #20]	; (800092c <MX_ADC1_Init+0x98>)
 8000916:	f004 fa67 	bl	8004de8 <HAL_ADC_ConfigChannel>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000920:	f001 f9a2 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	3710      	adds	r7, #16
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000238 	.word	0x20000238
 8000930:	40012000 	.word	0x40012000
 8000934:	0f000001 	.word	0x0f000001

08000938 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800093e:	463b      	mov	r3, r7
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800094a:	4b21      	ldr	r3, [pc, #132]	; (80009d0 <MX_ADC3_Init+0x98>)
 800094c:	4a21      	ldr	r2, [pc, #132]	; (80009d4 <MX_ADC3_Init+0x9c>)
 800094e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000950:	4b1f      	ldr	r3, [pc, #124]	; (80009d0 <MX_ADC3_Init+0x98>)
 8000952:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000956:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000958:	4b1d      	ldr	r3, [pc, #116]	; (80009d0 <MX_ADC3_Init+0x98>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800095e:	4b1c      	ldr	r3, [pc, #112]	; (80009d0 <MX_ADC3_Init+0x98>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000964:	4b1a      	ldr	r3, [pc, #104]	; (80009d0 <MX_ADC3_Init+0x98>)
 8000966:	2200      	movs	r2, #0
 8000968:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800096a:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <MX_ADC3_Init+0x98>)
 800096c:	2200      	movs	r2, #0
 800096e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000972:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <MX_ADC3_Init+0x98>)
 8000974:	2200      	movs	r2, #0
 8000976:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000978:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <MX_ADC3_Init+0x98>)
 800097a:	4a17      	ldr	r2, [pc, #92]	; (80009d8 <MX_ADC3_Init+0xa0>)
 800097c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800097e:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <MX_ADC3_Init+0x98>)
 8000980:	2200      	movs	r2, #0
 8000982:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <MX_ADC3_Init+0x98>)
 8000986:	2201      	movs	r2, #1
 8000988:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800098a:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_ADC3_Init+0x98>)
 800098c:	2200      	movs	r2, #0
 800098e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000992:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <MX_ADC3_Init+0x98>)
 8000994:	2201      	movs	r2, #1
 8000996:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000998:	480d      	ldr	r0, [pc, #52]	; (80009d0 <MX_ADC3_Init+0x98>)
 800099a:	f004 f9e1 	bl	8004d60 <HAL_ADC_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80009a4:	f001 f960 	bl	8001c68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80009a8:	2306      	movs	r3, #6
 80009aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009ac:	2301      	movs	r3, #1
 80009ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009b0:	2300      	movs	r3, #0
 80009b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80009b4:	463b      	mov	r3, r7
 80009b6:	4619      	mov	r1, r3
 80009b8:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_ADC3_Init+0x98>)
 80009ba:	f004 fa15 	bl	8004de8 <HAL_ADC_ConfigChannel>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80009c4:	f001 f950 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80009c8:	bf00      	nop
 80009ca:	3710      	adds	r7, #16
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20000280 	.word	0x20000280
 80009d4:	40012200 	.word	0x40012200
 80009d8:	0f000001 	.word	0x0f000001

080009dc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80009e0:	4b0d      	ldr	r3, [pc, #52]	; (8000a18 <MX_CRC_Init+0x3c>)
 80009e2:	4a0e      	ldr	r2, [pc, #56]	; (8000a1c <MX_CRC_Init+0x40>)
 80009e4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80009e6:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <MX_CRC_Init+0x3c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80009ec:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <MX_CRC_Init+0x3c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80009f2:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <MX_CRC_Init+0x3c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80009f8:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <MX_CRC_Init+0x3c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80009fe:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <MX_CRC_Init+0x3c>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a04:	4804      	ldr	r0, [pc, #16]	; (8000a18 <MX_CRC_Init+0x3c>)
 8000a06:	f004 feaf 	bl	8005768 <HAL_CRC_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000a10:	f001 f92a 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	200002c8 	.word	0x200002c8
 8000a1c:	40023000 	.word	0x40023000

08000a20 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8000a24:	4b18      	ldr	r3, [pc, #96]	; (8000a88 <MX_DFSDM1_Init+0x68>)
 8000a26:	4a19      	ldr	r2, [pc, #100]	; (8000a8c <MX_DFSDM1_Init+0x6c>)
 8000a28:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = DISABLE;
 8000a2a:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <MX_DFSDM1_Init+0x68>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000a30:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <MX_DFSDM1_Init+0x68>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 8000a36:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <MX_DFSDM1_Init+0x68>)
 8000a38:	2202      	movs	r2, #2
 8000a3a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_INTERNAL_REGISTER;
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <MX_DFSDM1_Init+0x68>)
 8000a3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a42:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000a44:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <MX_DFSDM1_Init+0x68>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <MX_DFSDM1_Init+0x68>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000a50:	4b0d      	ldr	r3, [pc, #52]	; (8000a88 <MX_DFSDM1_Init+0x68>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000a56:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <MX_DFSDM1_Init+0x68>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000a5c:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <MX_DFSDM1_Init+0x68>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <MX_DFSDM1_Init+0x68>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0x00;
 8000a68:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <MX_DFSDM1_Init+0x68>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 8000a6e:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <MX_DFSDM1_Init+0x68>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 8000a74:	4804      	ldr	r0, [pc, #16]	; (8000a88 <MX_DFSDM1_Init+0x68>)
 8000a76:	f004 ff61 	bl	800593c <HAL_DFSDM_ChannelInit>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000a80:	f001 f8f2 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	200002ec 	.word	0x200002ec
 8000a8c:	40017400 	.word	0x40017400

08000a90 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000a94:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <MX_DMA2D_Init+0x68>)
 8000a96:	4a19      	ldr	r2, [pc, #100]	; (8000afc <MX_DMA2D_Init+0x6c>)
 8000a98:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000a9a:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <MX_DMA2D_Init+0x68>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000aa0:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <MX_DMA2D_Init+0x68>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000aa6:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <MX_DMA2D_Init+0x68>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <MX_DMA2D_Init+0x68>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000ab2:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <MX_DMA2D_Init+0x68>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <MX_DMA2D_Init+0x68>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <MX_DMA2D_Init+0x68>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <MX_DMA2D_Init+0x68>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000aca:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <MX_DMA2D_Init+0x68>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000ad0:	4809      	ldr	r0, [pc, #36]	; (8000af8 <MX_DMA2D_Init+0x68>)
 8000ad2:	f005 f9fd 	bl	8005ed0 <HAL_DMA2D_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 8000adc:	f001 f8c4 	bl	8001c68 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	4805      	ldr	r0, [pc, #20]	; (8000af8 <MX_DMA2D_Init+0x68>)
 8000ae4:	f005 fc72 	bl	80063cc <HAL_DMA2D_ConfigLayer>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 8000aee:	f001 f8bb 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000324 	.word	0x20000324
 8000afc:	4002b000 	.word	0x4002b000

08000b00 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b0aa      	sub	sp, #168	; 0xa8
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000b06:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000b12:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000b16:	2224      	movs	r2, #36	; 0x24
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f00f f880 	bl	800fc20 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000b20:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
 8000b30:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8000b32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b36:	2234      	movs	r2, #52	; 0x34
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f00f f870 	bl	800fc20 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000b40:	463b      	mov	r3, r7
 8000b42:	222c      	movs	r2, #44	; 0x2c
 8000b44:	2100      	movs	r1, #0
 8000b46:	4618      	mov	r0, r3
 8000b48:	f00f f86a 	bl	800fc20 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000b4c:	4b6a      	ldr	r3, [pc, #424]	; (8000cf8 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000b4e:	4a6b      	ldr	r2, [pc, #428]	; (8000cfc <MX_DSIHOST_DSI_Init+0x1fc>)
 8000b50:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000b52:	4b69      	ldr	r3, [pc, #420]	; (8000cf8 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000b58:	4b67      	ldr	r3, [pc, #412]	; (8000cf8 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000b5a:	2204      	movs	r2, #4
 8000b5c:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000b5e:	4b66      	ldr	r3, [pc, #408]	; (8000cf8 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 20;
 8000b64:	2314      	movs	r3, #20
 8000b66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8000b70:	2300      	movs	r3, #0
 8000b72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000b76:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	485e      	ldr	r0, [pc, #376]	; (8000cf8 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000b7e:	f005 fda7 	bl	80066d0 <HAL_DSI_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 8000b88:	f001 f86e 	bl	8001c68 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	67bb      	str	r3, [r7, #120]	; 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000bac:	2300      	movs	r3, #0
 8000bae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.BTATimeout = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000bbe:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	484c      	ldr	r0, [pc, #304]	; (8000cf8 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000bc6:	f006 fca9 	bl	800751c <HAL_DSI_ConfigHostTimeouts>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 8000bd0:	f001 f84a 	bl	8001c68 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8000bd4:	231c      	movs	r3, #28
 8000bd6:	663b      	str	r3, [r7, #96]	; 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000bd8:	2321      	movs	r3, #33	; 0x21
 8000bda:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 8000bdc:	230f      	movs	r3, #15
 8000bde:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 8000be0:	2319      	movs	r3, #25
 8000be2:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.StopWaitTime = 10;
 8000be8:	230a      	movs	r3, #10
 8000bea:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000bec:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4841      	ldr	r0, [pc, #260]	; (8000cf8 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000bf4:	f006 fc28 	bl	8007448 <HAL_DSI_ConfigPhyTimer>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 8000bfe:	f001 f833 	bl	8001c68 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000c02:	2104      	movs	r1, #4
 8000c04:	483c      	ldr	r0, [pc, #240]	; (8000cf8 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000c06:	f006 fbf7 	bl	80073f8 <HAL_DSI_ConfigFlowControl>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 8000c10:	f001 f82a 	bl	8001c68 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000c14:	f242 7110 	movw	r1, #10000	; 0x2710
 8000c18:	4837      	ldr	r0, [pc, #220]	; (8000cf8 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000c1a:	f006 fe3d 	bl	8007898 <HAL_DSI_SetLowPowerRXFilter>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8000c24:	f001 f820 	bl	8001c68 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4833      	ldr	r0, [pc, #204]	; (8000cf8 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000c2c:	f005 fee0 	bl	80069f0 <HAL_DSI_ConfigErrorMonitor>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 8000c36:	f001 f817 	bl	8001c68 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 8000c3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000c40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c44:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 8000c46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c4a:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000c4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c50:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 8000c52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c56:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000c58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c5c:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 8000c5e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c62:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000c64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c68:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 8000c6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000c70:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000c74:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 8000c76:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000c7a:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000c7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c80:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8000c82:	2300      	movs	r3, #0
 8000c84:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000c86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	481a      	ldr	r0, [pc, #104]	; (8000cf8 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000c8e:	f006 fb55 	bl	800733c <HAL_DSI_ConfigCommand>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_DSIHOST_DSI_Init+0x19c>
  {
    Error_Handler();
 8000c98:	f000 ffe6 	bl	8001c68 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 8000ca0:	2305      	movs	r3, #5
 8000ca2:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 400;
 8000ca4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000ca8:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000caa:	2310      	movs	r3, #16
 8000cac:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8000cb2:	2304      	movs	r3, #4
 8000cb4:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 8000cc2:	2340      	movs	r3, #64	; 0x40
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000cca:	463b      	mov	r3, r7
 8000ccc:	4619      	mov	r1, r3
 8000cce:	480a      	ldr	r0, [pc, #40]	; (8000cf8 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000cd0:	f006 fa5a 	bl	8007188 <HAL_DSI_ConfigAdaptedCommandMode>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_DSIHOST_DSI_Init+0x1de>
  {
    Error_Handler();
 8000cda:	f000 ffc5 	bl	8001c68 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000ce2:	f006 f828 	bl	8006d36 <HAL_DSI_SetGenericVCID>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_DSIHOST_DSI_Init+0x1f0>
  {
    Error_Handler();
 8000cec:	f000 ffbc 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000cf0:	bf00      	nop
 8000cf2:	37a8      	adds	r7, #168	; 0xa8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	2000037c 	.word	0x2000037c
 8000cfc:	40016c00 	.word	0x40016c00

08000d00 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000d04:	4b1f      	ldr	r3, [pc, #124]	; (8000d84 <MX_ETH_Init+0x84>)
 8000d06:	4a20      	ldr	r2, [pc, #128]	; (8000d88 <MX_ETH_Init+0x88>)
 8000d08:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000d0a:	4b20      	ldr	r3, [pc, #128]	; (8000d8c <MX_ETH_Init+0x8c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000d10:	4b1e      	ldr	r3, [pc, #120]	; (8000d8c <MX_ETH_Init+0x8c>)
 8000d12:	2280      	movs	r2, #128	; 0x80
 8000d14:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000d16:	4b1d      	ldr	r3, [pc, #116]	; (8000d8c <MX_ETH_Init+0x8c>)
 8000d18:	22e1      	movs	r2, #225	; 0xe1
 8000d1a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000d1c:	4b1b      	ldr	r3, [pc, #108]	; (8000d8c <MX_ETH_Init+0x8c>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000d22:	4b1a      	ldr	r3, [pc, #104]	; (8000d8c <MX_ETH_Init+0x8c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000d28:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <MX_ETH_Init+0x8c>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000d2e:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <MX_ETH_Init+0x84>)
 8000d30:	4a16      	ldr	r2, [pc, #88]	; (8000d8c <MX_ETH_Init+0x8c>)
 8000d32:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000d34:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <MX_ETH_Init+0x84>)
 8000d36:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000d3a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000d3c:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <MX_ETH_Init+0x84>)
 8000d3e:	4a14      	ldr	r2, [pc, #80]	; (8000d90 <MX_ETH_Init+0x90>)
 8000d40:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <MX_ETH_Init+0x84>)
 8000d44:	4a13      	ldr	r2, [pc, #76]	; (8000d94 <MX_ETH_Init+0x94>)
 8000d46:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000d48:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <MX_ETH_Init+0x84>)
 8000d4a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000d4e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000d50:	480c      	ldr	r0, [pc, #48]	; (8000d84 <MX_ETH_Init+0x84>)
 8000d52:	f006 fdcf 	bl	80078f4 <HAL_ETH_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000d5c:	f000 ff84 	bl	8001c68 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000d60:	2238      	movs	r2, #56	; 0x38
 8000d62:	2100      	movs	r1, #0
 8000d64:	480c      	ldr	r0, [pc, #48]	; (8000d98 <MX_ETH_Init+0x98>)
 8000d66:	f00e ff5b 	bl	800fc20 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <MX_ETH_Init+0x98>)
 8000d6c:	2221      	movs	r2, #33	; 0x21
 8000d6e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000d70:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <MX_ETH_Init+0x98>)
 8000d72:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000d76:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000d78:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <MX_ETH_Init+0x98>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000398 	.word	0x20000398
 8000d88:	40028000 	.word	0x40028000
 8000d8c:	200010f4 	.word	0x200010f4
 8000d90:	20000144 	.word	0x20000144
 8000d94:	200000a4 	.word	0x200000a4
 8000d98:	20000200 	.word	0x20000200

08000d9c <MX_HDMI_CEC_Init>:
  * @brief HDMI_CEC Initialization Function
  * @param None
  * @retval None
  */
static void MX_HDMI_CEC_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE END HDMI_CEC_Init 0 */

  /* USER CODE BEGIN HDMI_CEC_Init 1 */

  /* USER CODE END HDMI_CEC_Init 1 */
  hcec.Instance = CEC;
 8000da0:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <MX_HDMI_CEC_Init+0x5c>)
 8000da2:	4a16      	ldr	r2, [pc, #88]	; (8000dfc <MX_HDMI_CEC_Init+0x60>)
 8000da4:	601a      	str	r2, [r3, #0]
  hcec.Init.SignalFreeTime = CEC_DEFAULT_SFT;
 8000da6:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <MX_HDMI_CEC_Init+0x5c>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	605a      	str	r2, [r3, #4]
  hcec.Init.Tolerance = CEC_STANDARD_TOLERANCE;
 8000dac:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <MX_HDMI_CEC_Init+0x5c>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  hcec.Init.BRERxStop = CEC_RX_STOP_ON_BRE;
 8000db2:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <MX_HDMI_CEC_Init+0x5c>)
 8000db4:	2210      	movs	r2, #16
 8000db6:	60da      	str	r2, [r3, #12]
  hcec.Init.BREErrorBitGen = CEC_BRE_ERRORBIT_NO_GENERATION;
 8000db8:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <MX_HDMI_CEC_Init+0x5c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	611a      	str	r2, [r3, #16]
  hcec.Init.LBPEErrorBitGen = CEC_LBPE_ERRORBIT_NO_GENERATION;
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <MX_HDMI_CEC_Init+0x5c>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	615a      	str	r2, [r3, #20]
  hcec.Init.BroadcastMsgNoErrorBitGen = CEC_BROADCASTERROR_ERRORBIT_GENERATION;
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <MX_HDMI_CEC_Init+0x5c>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	619a      	str	r2, [r3, #24]
  hcec.Init.SignalFreeTimeOption = CEC_SFT_START_ON_TXSOM;
 8000dca:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <MX_HDMI_CEC_Init+0x5c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	61da      	str	r2, [r3, #28]
  hcec.Init.ListenMode = CEC_FULL_LISTENING_MODE;
 8000dd0:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <MX_HDMI_CEC_Init+0x5c>)
 8000dd2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000dd6:	621a      	str	r2, [r3, #32]
  hcec.Init.OwnAddress = CEC_OWN_ADDRESS_NONE;
 8000dd8:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <MX_HDMI_CEC_Init+0x5c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	849a      	strh	r2, [r3, #36]	; 0x24
  hcec.Init.RxBuffer = cec_receive_buffer;
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <MX_HDMI_CEC_Init+0x5c>)
 8000de0:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <MX_HDMI_CEC_Init+0x64>)
 8000de2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_CEC_Init(&hcec) != HAL_OK)
 8000de4:	4804      	ldr	r0, [pc, #16]	; (8000df8 <MX_HDMI_CEC_Init+0x5c>)
 8000de6:	f004 fa4f 	bl	8005288 <HAL_CEC_Init>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_HDMI_CEC_Init+0x58>
  {
    Error_Handler();
 8000df0:	f000 ff3a 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN HDMI_CEC_Init 2 */

  /* USER CODE END HDMI_CEC_Init 2 */

}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000448 	.word	0x20000448
 8000dfc:	40006c00 	.word	0x40006c00
 8000e00:	200010d4 	.word	0x200010d4

08000e04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e08:	4b1b      	ldr	r3, [pc, #108]	; (8000e78 <MX_I2C1_Init+0x74>)
 8000e0a:	4a1c      	ldr	r2, [pc, #112]	; (8000e7c <MX_I2C1_Init+0x78>)
 8000e0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000e0e:	4b1a      	ldr	r3, [pc, #104]	; (8000e78 <MX_I2C1_Init+0x74>)
 8000e10:	4a1b      	ldr	r2, [pc, #108]	; (8000e80 <MX_I2C1_Init+0x7c>)
 8000e12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e14:	4b18      	ldr	r3, [pc, #96]	; (8000e78 <MX_I2C1_Init+0x74>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e1a:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <MX_I2C1_Init+0x74>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e20:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <MX_I2C1_Init+0x74>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e26:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <MX_I2C1_Init+0x74>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <MX_I2C1_Init+0x74>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <MX_I2C1_Init+0x74>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e38:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <MX_I2C1_Init+0x74>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e3e:	480e      	ldr	r0, [pc, #56]	; (8000e78 <MX_I2C1_Init+0x74>)
 8000e40:	f007 fb50 	bl	80084e4 <HAL_I2C_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e4a:	f000 ff0d 	bl	8001c68 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4809      	ldr	r0, [pc, #36]	; (8000e78 <MX_I2C1_Init+0x74>)
 8000e52:	f008 f8dd 	bl	8009010 <HAL_I2CEx_ConfigAnalogFilter>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e5c:	f000 ff04 	bl	8001c68 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e60:	2100      	movs	r1, #0
 8000e62:	4805      	ldr	r0, [pc, #20]	; (8000e78 <MX_I2C1_Init+0x74>)
 8000e64:	f008 f91f 	bl	80090a6 <HAL_I2CEx_ConfigDigitalFilter>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e6e:	f000 fefb 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	2000048c 	.word	0x2000048c
 8000e7c:	40005400 	.word	0x40005400
 8000e80:	20404768 	.word	0x20404768

08000e84 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000e88:	4b1b      	ldr	r3, [pc, #108]	; (8000ef8 <MX_I2C4_Init+0x74>)
 8000e8a:	4a1c      	ldr	r2, [pc, #112]	; (8000efc <MX_I2C4_Init+0x78>)
 8000e8c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20404768;
 8000e8e:	4b1a      	ldr	r3, [pc, #104]	; (8000ef8 <MX_I2C4_Init+0x74>)
 8000e90:	4a1b      	ldr	r2, [pc, #108]	; (8000f00 <MX_I2C4_Init+0x7c>)
 8000e92:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000e94:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <MX_I2C4_Init+0x74>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e9a:	4b17      	ldr	r3, [pc, #92]	; (8000ef8 <MX_I2C4_Init+0x74>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ea0:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <MX_I2C4_Init+0x74>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000ea6:	4b14      	ldr	r3, [pc, #80]	; (8000ef8 <MX_I2C4_Init+0x74>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000eac:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <MX_I2C4_Init+0x74>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eb2:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <MX_I2C4_Init+0x74>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <MX_I2C4_Init+0x74>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000ebe:	480e      	ldr	r0, [pc, #56]	; (8000ef8 <MX_I2C4_Init+0x74>)
 8000ec0:	f007 fb10 	bl	80084e4 <HAL_I2C_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000eca:	f000 fecd 	bl	8001c68 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4809      	ldr	r0, [pc, #36]	; (8000ef8 <MX_I2C4_Init+0x74>)
 8000ed2:	f008 f89d 	bl	8009010 <HAL_I2CEx_ConfigAnalogFilter>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000edc:	f000 fec4 	bl	8001c68 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <MX_I2C4_Init+0x74>)
 8000ee4:	f008 f8df 	bl	80090a6 <HAL_I2CEx_ConfigDigitalFilter>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000eee:	f000 febb 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	200004e0 	.word	0x200004e0
 8000efc:	40006000 	.word	0x40006000
 8000f00:	20404768 	.word	0x20404768

08000f04 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08e      	sub	sp, #56	; 0x38
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	2234      	movs	r2, #52	; 0x34
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f00e fe85 	bl	800fc20 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000f16:	4b39      	ldr	r3, [pc, #228]	; (8000ffc <MX_LTDC_Init+0xf8>)
 8000f18:	4a39      	ldr	r2, [pc, #228]	; (8001000 <MX_LTDC_Init+0xfc>)
 8000f1a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f1c:	4b37      	ldr	r3, [pc, #220]	; (8000ffc <MX_LTDC_Init+0xf8>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f22:	4b36      	ldr	r3, [pc, #216]	; (8000ffc <MX_LTDC_Init+0xf8>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000f28:	4b34      	ldr	r3, [pc, #208]	; (8000ffc <MX_LTDC_Init+0xf8>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f2e:	4b33      	ldr	r3, [pc, #204]	; (8000ffc <MX_LTDC_Init+0xf8>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8000f34:	4b31      	ldr	r3, [pc, #196]	; (8000ffc <MX_LTDC_Init+0xf8>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8000f3a:	4b30      	ldr	r3, [pc, #192]	; (8000ffc <MX_LTDC_Init+0xf8>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 1;
 8000f40:	4b2e      	ldr	r3, [pc, #184]	; (8000ffc <MX_LTDC_Init+0xf8>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 1;
 8000f46:	4b2d      	ldr	r3, [pc, #180]	; (8000ffc <MX_LTDC_Init+0xf8>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 801;
 8000f4c:	4b2b      	ldr	r3, [pc, #172]	; (8000ffc <MX_LTDC_Init+0xf8>)
 8000f4e:	f240 3221 	movw	r2, #801	; 0x321
 8000f52:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 481;
 8000f54:	4b29      	ldr	r3, [pc, #164]	; (8000ffc <MX_LTDC_Init+0xf8>)
 8000f56:	f240 12e1 	movw	r2, #481	; 0x1e1
 8000f5a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 802;
 8000f5c:	4b27      	ldr	r3, [pc, #156]	; (8000ffc <MX_LTDC_Init+0xf8>)
 8000f5e:	f240 3222 	movw	r2, #802	; 0x322
 8000f62:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 482;
 8000f64:	4b25      	ldr	r3, [pc, #148]	; (8000ffc <MX_LTDC_Init+0xf8>)
 8000f66:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8000f6a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000f6c:	4b23      	ldr	r3, [pc, #140]	; (8000ffc <MX_LTDC_Init+0xf8>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000f74:	4b21      	ldr	r3, [pc, #132]	; (8000ffc <MX_LTDC_Init+0xf8>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000f7c:	4b1f      	ldr	r3, [pc, #124]	; (8000ffc <MX_LTDC_Init+0xf8>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000f84:	481d      	ldr	r0, [pc, #116]	; (8000ffc <MX_LTDC_Init+0xf8>)
 8000f86:	f008 f8db 	bl	8009140 <HAL_LTDC_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000f90:	f000 fe6a 	bl	8001c68 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 200;
 8000f98:	23c8      	movs	r3, #200	; 0xc8
 8000f9a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8000fa0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000fa4:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000faa:	23ff      	movs	r3, #255	; 0xff
 8000fac:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000fb2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fb6:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000fb8:	2307      	movs	r3, #7
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000fbc:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000fc0:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 200;
 8000fc2:	23c8      	movs	r3, #200	; 0xc8
 8000fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 8000fc6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000fca:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000fde:	1d3b      	adds	r3, r7, #4
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4805      	ldr	r0, [pc, #20]	; (8000ffc <MX_LTDC_Init+0xf8>)
 8000fe6:	f008 fa3d 	bl	8009464 <HAL_LTDC_ConfigLayer>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000ff0:	f000 fe3a 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000ff4:	bf00      	nop
 8000ff6:	3738      	adds	r7, #56	; 0x38
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000534 	.word	0x20000534
 8001000:	40016800 	.word	0x40016800

08001004 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001008:	4b12      	ldr	r3, [pc, #72]	; (8001054 <MX_QUADSPI_Init+0x50>)
 800100a:	4a13      	ldr	r2, [pc, #76]	; (8001058 <MX_QUADSPI_Init+0x54>)
 800100c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <MX_QUADSPI_Init+0x50>)
 8001010:	2201      	movs	r2, #1
 8001012:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 16;
 8001014:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <MX_QUADSPI_Init+0x50>)
 8001016:	2210      	movs	r2, #16
 8001018:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <MX_QUADSPI_Init+0x50>)
 800101c:	2210      	movs	r2, #16
 800101e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 26;
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <MX_QUADSPI_Init+0x50>)
 8001022:	221a      	movs	r2, #26
 8001024:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE;
 8001026:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <MX_QUADSPI_Init+0x50>)
 8001028:	f44f 7240 	mov.w	r2, #768	; 0x300
 800102c:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800102e:	4b09      	ldr	r3, [pc, #36]	; (8001054 <MX_QUADSPI_Init+0x50>)
 8001030:	2200      	movs	r2, #0
 8001032:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001034:	4b07      	ldr	r3, [pc, #28]	; (8001054 <MX_QUADSPI_Init+0x50>)
 8001036:	2200      	movs	r2, #0
 8001038:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <MX_QUADSPI_Init+0x50>)
 800103c:	2200      	movs	r2, #0
 800103e:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001040:	4804      	ldr	r0, [pc, #16]	; (8001054 <MX_QUADSPI_Init+0x50>)
 8001042:	f009 fd19 	bl	800aa78 <HAL_QSPI_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 800104c:	f000 fe0c 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	200005dc 	.word	0x200005dc
 8001058:	a0001000 	.word	0xa0001000

0800105c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b090      	sub	sp, #64	; 0x40
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001062:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]
 8001070:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001072:	2300      	movs	r3, #0
 8001074:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001076:	463b      	mov	r3, r7
 8001078:	2228      	movs	r2, #40	; 0x28
 800107a:	2100      	movs	r1, #0
 800107c:	4618      	mov	r0, r3
 800107e:	f00e fdcf 	bl	800fc20 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001082:	4b42      	ldr	r3, [pc, #264]	; (800118c <MX_RTC_Init+0x130>)
 8001084:	4a42      	ldr	r2, [pc, #264]	; (8001190 <MX_RTC_Init+0x134>)
 8001086:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001088:	4b40      	ldr	r3, [pc, #256]	; (800118c <MX_RTC_Init+0x130>)
 800108a:	2200      	movs	r2, #0
 800108c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800108e:	4b3f      	ldr	r3, [pc, #252]	; (800118c <MX_RTC_Init+0x130>)
 8001090:	227f      	movs	r2, #127	; 0x7f
 8001092:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001094:	4b3d      	ldr	r3, [pc, #244]	; (800118c <MX_RTC_Init+0x130>)
 8001096:	22ff      	movs	r2, #255	; 0xff
 8001098:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_ALARMA;
 800109a:	4b3c      	ldr	r3, [pc, #240]	; (800118c <MX_RTC_Init+0x130>)
 800109c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80010a0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010a2:	4b3a      	ldr	r3, [pc, #232]	; (800118c <MX_RTC_Init+0x130>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010a8:	4b38      	ldr	r3, [pc, #224]	; (800118c <MX_RTC_Init+0x130>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010ae:	4837      	ldr	r0, [pc, #220]	; (800118c <MX_RTC_Init+0x130>)
 80010b0:	f00b f864 	bl	800c17c <HAL_RTC_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_RTC_Init+0x62>
  {
    Error_Handler();
 80010ba:	f000 fdd5 	bl	8001c68 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80010be:	2300      	movs	r3, #0
 80010c0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80010d0:	2300      	movs	r3, #0
 80010d2:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010d4:	2300      	movs	r3, #0
 80010d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80010d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010dc:	2201      	movs	r2, #1
 80010de:	4619      	mov	r1, r3
 80010e0:	482a      	ldr	r0, [pc, #168]	; (800118c <MX_RTC_Init+0x130>)
 80010e2:	f00b f8cf 	bl	800c284 <HAL_RTC_SetTime>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80010ec:	f000 fdbc 	bl	8001c68 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80010f0:	2301      	movs	r3, #1
 80010f2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80010f6:	2301      	movs	r3, #1
 80010f8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 80010fc:	2301      	movs	r3, #1
 80010fe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8001102:	2300      	movs	r3, #0
 8001104:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001108:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800110c:	2201      	movs	r2, #1
 800110e:	4619      	mov	r1, r3
 8001110:	481e      	ldr	r0, [pc, #120]	; (800118c <MX_RTC_Init+0x130>)
 8001112:	f00b f951 	bl	800c3b8 <HAL_RTC_SetDate>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 800111c:	f000 fda4 	bl	8001c68 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001120:	2300      	movs	r3, #0
 8001122:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001124:	2300      	movs	r3, #0
 8001126:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001128:	2300      	movs	r3, #0
 800112a:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800112c:	2300      	movs	r3, #0
 800112e:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001130:	2300      	movs	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001134:	2300      	movs	r3, #0
 8001136:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800113c:	2300      	movs	r3, #0
 800113e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001144:	2301      	movs	r3, #1
 8001146:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800114a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800114e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001150:	463b      	mov	r3, r7
 8001152:	2201      	movs	r2, #1
 8001154:	4619      	mov	r1, r3
 8001156:	480d      	ldr	r0, [pc, #52]	; (800118c <MX_RTC_Init+0x130>)
 8001158:	f00b f9b2 	bl	800c4c0 <HAL_RTC_SetAlarm>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001162:	f000 fd81 	bl	8001c68 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001166:	f44f 7300 	mov.w	r3, #512	; 0x200
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800116c:	463b      	mov	r3, r7
 800116e:	2201      	movs	r2, #1
 8001170:	4619      	mov	r1, r3
 8001172:	4806      	ldr	r0, [pc, #24]	; (800118c <MX_RTC_Init+0x130>)
 8001174:	f00b f9a4 	bl	800c4c0 <HAL_RTC_SetAlarm>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 800117e:	f000 fd73 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001182:	bf00      	nop
 8001184:	3740      	adds	r7, #64	; 0x40
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000628 	.word	0x20000628
 8001190:	40002800 	.word	0x40002800

08001194 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8001198:	4b4d      	ldr	r3, [pc, #308]	; (80012d0 <MX_SAI1_Init+0x13c>)
 800119a:	4a4e      	ldr	r2, [pc, #312]	; (80012d4 <MX_SAI1_Init+0x140>)
 800119c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 800119e:	4b4c      	ldr	r3, [pc, #304]	; (80012d0 <MX_SAI1_Init+0x13c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80011a4:	4b4a      	ldr	r3, [pc, #296]	; (80012d0 <MX_SAI1_Init+0x13c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 80011aa:	4b49      	ldr	r3, [pc, #292]	; (80012d0 <MX_SAI1_Init+0x13c>)
 80011ac:	2240      	movs	r2, #64	; 0x40
 80011ae:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80011b0:	4b47      	ldr	r3, [pc, #284]	; (80012d0 <MX_SAI1_Init+0x13c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80011b6:	4b46      	ldr	r3, [pc, #280]	; (80012d0 <MX_SAI1_Init+0x13c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80011bc:	4b44      	ldr	r3, [pc, #272]	; (80012d0 <MX_SAI1_Init+0x13c>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80011c2:	4b43      	ldr	r3, [pc, #268]	; (80012d0 <MX_SAI1_Init+0x13c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80011c8:	4b41      	ldr	r3, [pc, #260]	; (80012d0 <MX_SAI1_Init+0x13c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80011ce:	4b40      	ldr	r3, [pc, #256]	; (80012d0 <MX_SAI1_Init+0x13c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80011d4:	4b3e      	ldr	r3, [pc, #248]	; (80012d0 <MX_SAI1_Init+0x13c>)
 80011d6:	4a40      	ldr	r2, [pc, #256]	; (80012d8 <MX_SAI1_Init+0x144>)
 80011d8:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80011da:	4b3d      	ldr	r3, [pc, #244]	; (80012d0 <MX_SAI1_Init+0x13c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80011e0:	4b3b      	ldr	r3, [pc, #236]	; (80012d0 <MX_SAI1_Init+0x13c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80011e6:	4b3a      	ldr	r3, [pc, #232]	; (80012d0 <MX_SAI1_Init+0x13c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80011ec:	4b38      	ldr	r3, [pc, #224]	; (80012d0 <MX_SAI1_Init+0x13c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 80011f2:	4b37      	ldr	r3, [pc, #220]	; (80012d0 <MX_SAI1_Init+0x13c>)
 80011f4:	2208      	movs	r2, #8
 80011f6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 80011f8:	4b35      	ldr	r3, [pc, #212]	; (80012d0 <MX_SAI1_Init+0x13c>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80011fe:	4b34      	ldr	r3, [pc, #208]	; (80012d0 <MX_SAI1_Init+0x13c>)
 8001200:	2200      	movs	r2, #0
 8001202:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001204:	4b32      	ldr	r3, [pc, #200]	; (80012d0 <MX_SAI1_Init+0x13c>)
 8001206:	2200      	movs	r2, #0
 8001208:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800120a:	4b31      	ldr	r3, [pc, #196]	; (80012d0 <MX_SAI1_Init+0x13c>)
 800120c:	2200      	movs	r2, #0
 800120e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8001210:	4b2f      	ldr	r3, [pc, #188]	; (80012d0 <MX_SAI1_Init+0x13c>)
 8001212:	2200      	movs	r2, #0
 8001214:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001216:	4b2e      	ldr	r3, [pc, #184]	; (80012d0 <MX_SAI1_Init+0x13c>)
 8001218:	2200      	movs	r2, #0
 800121a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 800121c:	4b2c      	ldr	r3, [pc, #176]	; (80012d0 <MX_SAI1_Init+0x13c>)
 800121e:	2201      	movs	r2, #1
 8001220:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8001222:	4b2b      	ldr	r3, [pc, #172]	; (80012d0 <MX_SAI1_Init+0x13c>)
 8001224:	2200      	movs	r2, #0
 8001226:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8001228:	4829      	ldr	r0, [pc, #164]	; (80012d0 <MX_SAI1_Init+0x13c>)
 800122a:	f00b fb15 	bl	800c858 <HAL_SAI_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 8001234:	f000 fd18 	bl	8001c68 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8001238:	4b28      	ldr	r3, [pc, #160]	; (80012dc <MX_SAI1_Init+0x148>)
 800123a:	4a29      	ldr	r2, [pc, #164]	; (80012e0 <MX_SAI1_Init+0x14c>)
 800123c:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 800123e:	4b27      	ldr	r3, [pc, #156]	; (80012dc <MX_SAI1_Init+0x148>)
 8001240:	2200      	movs	r2, #0
 8001242:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8001244:	4b25      	ldr	r3, [pc, #148]	; (80012dc <MX_SAI1_Init+0x148>)
 8001246:	2203      	movs	r2, #3
 8001248:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 800124a:	4b24      	ldr	r3, [pc, #144]	; (80012dc <MX_SAI1_Init+0x148>)
 800124c:	2240      	movs	r2, #64	; 0x40
 800124e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001250:	4b22      	ldr	r3, [pc, #136]	; (80012dc <MX_SAI1_Init+0x148>)
 8001252:	2200      	movs	r2, #0
 8001254:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001256:	4b21      	ldr	r3, [pc, #132]	; (80012dc <MX_SAI1_Init+0x148>)
 8001258:	2200      	movs	r2, #0
 800125a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 800125c:	4b1f      	ldr	r3, [pc, #124]	; (80012dc <MX_SAI1_Init+0x148>)
 800125e:	2201      	movs	r2, #1
 8001260:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001262:	4b1e      	ldr	r3, [pc, #120]	; (80012dc <MX_SAI1_Init+0x148>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001268:	4b1c      	ldr	r3, [pc, #112]	; (80012dc <MX_SAI1_Init+0x148>)
 800126a:	2200      	movs	r2, #0
 800126c:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800126e:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <MX_SAI1_Init+0x148>)
 8001270:	2200      	movs	r2, #0
 8001272:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001274:	4b19      	ldr	r3, [pc, #100]	; (80012dc <MX_SAI1_Init+0x148>)
 8001276:	2200      	movs	r2, #0
 8001278:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800127a:	4b18      	ldr	r3, [pc, #96]	; (80012dc <MX_SAI1_Init+0x148>)
 800127c:	2200      	movs	r2, #0
 800127e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001280:	4b16      	ldr	r3, [pc, #88]	; (80012dc <MX_SAI1_Init+0x148>)
 8001282:	2200      	movs	r2, #0
 8001284:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8001286:	4b15      	ldr	r3, [pc, #84]	; (80012dc <MX_SAI1_Init+0x148>)
 8001288:	2208      	movs	r2, #8
 800128a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 800128c:	4b13      	ldr	r3, [pc, #76]	; (80012dc <MX_SAI1_Init+0x148>)
 800128e:	2201      	movs	r2, #1
 8001290:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001292:	4b12      	ldr	r3, [pc, #72]	; (80012dc <MX_SAI1_Init+0x148>)
 8001294:	2200      	movs	r2, #0
 8001296:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001298:	4b10      	ldr	r3, [pc, #64]	; (80012dc <MX_SAI1_Init+0x148>)
 800129a:	2200      	movs	r2, #0
 800129c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800129e:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <MX_SAI1_Init+0x148>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 80012a4:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <MX_SAI1_Init+0x148>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80012aa:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <MX_SAI1_Init+0x148>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 80012b0:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <MX_SAI1_Init+0x148>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 80012b6:	4b09      	ldr	r3, [pc, #36]	; (80012dc <MX_SAI1_Init+0x148>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 80012bc:	4807      	ldr	r0, [pc, #28]	; (80012dc <MX_SAI1_Init+0x148>)
 80012be:	f00b facb 	bl	800c858 <HAL_SAI_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 80012c8:	f000 fcce 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000648 	.word	0x20000648
 80012d4:	40015804 	.word	0x40015804
 80012d8:	0002ee00 	.word	0x0002ee00
 80012dc:	200006cc 	.word	0x200006cc
 80012e0:	40015824 	.word	0x40015824

080012e4 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <MX_SAI2_Init+0x50>)
 80012ea:	4a13      	ldr	r2, [pc, #76]	; (8001338 <MX_SAI2_Init+0x54>)
 80012ec:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_SPDIF_PROTOCOL;
 80012ee:	4b11      	ldr	r3, [pc, #68]	; (8001334 <MX_SAI2_Init+0x50>)
 80012f0:	2204      	movs	r2, #4
 80012f2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80012f4:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <MX_SAI2_Init+0x50>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80012fa:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <MX_SAI2_Init+0x50>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001300:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <MX_SAI2_Init+0x50>)
 8001302:	2200      	movs	r2, #0
 8001304:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001306:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <MX_SAI2_Init+0x50>)
 8001308:	2200      	movs	r2, #0
 800130a:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800130c:	4b09      	ldr	r3, [pc, #36]	; (8001334 <MX_SAI2_Init+0x50>)
 800130e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001312:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001314:	4b07      	ldr	r3, [pc, #28]	; (8001334 <MX_SAI2_Init+0x50>)
 8001316:	2200      	movs	r2, #0
 8001318:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <MX_SAI2_Init+0x50>)
 800131c:	2200      	movs	r2, #0
 800131e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001320:	4804      	ldr	r0, [pc, #16]	; (8001334 <MX_SAI2_Init+0x50>)
 8001322:	f00b fa99 	bl	800c858 <HAL_SAI_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_SAI2_Init+0x4c>
  {
    Error_Handler();
 800132c:	f000 fc9c 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000750 	.word	0x20000750
 8001338:	40015c04 	.word	0x40015c04

0800133c <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001340:	4b16      	ldr	r3, [pc, #88]	; (800139c <MX_SPDIFRX_Init+0x60>)
 8001342:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001346:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN1;
 8001348:	4b14      	ldr	r3, [pc, #80]	; (800139c <MX_SPDIFRX_Init+0x60>)
 800134a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800134e:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001350:	4b12      	ldr	r3, [pc, #72]	; (800139c <MX_SPDIFRX_Init+0x60>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001356:	4b11      	ldr	r3, [pc, #68]	; (800139c <MX_SPDIFRX_Init+0x60>)
 8001358:	2200      	movs	r2, #0
 800135a:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 800135c:	4b0f      	ldr	r3, [pc, #60]	; (800139c <MX_SPDIFRX_Init+0x60>)
 800135e:	2200      	movs	r2, #0
 8001360:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001362:	4b0e      	ldr	r3, [pc, #56]	; (800139c <MX_SPDIFRX_Init+0x60>)
 8001364:	2200      	movs	r2, #0
 8001366:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001368:	4b0c      	ldr	r3, [pc, #48]	; (800139c <MX_SPDIFRX_Init+0x60>)
 800136a:	2200      	movs	r2, #0
 800136c:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 800136e:	4b0b      	ldr	r3, [pc, #44]	; (800139c <MX_SPDIFRX_Init+0x60>)
 8001370:	2200      	movs	r2, #0
 8001372:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001374:	4b09      	ldr	r3, [pc, #36]	; (800139c <MX_SPDIFRX_Init+0x60>)
 8001376:	2200      	movs	r2, #0
 8001378:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 800137a:	4b08      	ldr	r3, [pc, #32]	; (800139c <MX_SPDIFRX_Init+0x60>)
 800137c:	2200      	movs	r2, #0
 800137e:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <MX_SPDIFRX_Init+0x60>)
 8001382:	2200      	movs	r2, #0
 8001384:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001386:	4805      	ldr	r0, [pc, #20]	; (800139c <MX_SPDIFRX_Init+0x60>)
 8001388:	f00b fcae 	bl	800cce8 <HAL_SPDIFRX_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_SPDIFRX_Init+0x5a>
  {
    Error_Handler();
 8001392:	f000 fc69 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200007d4 	.word	0x200007d4

080013a0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80013a4:	4b1a      	ldr	r3, [pc, #104]	; (8001410 <MX_SPI2_Init+0x70>)
 80013a6:	4a1b      	ldr	r2, [pc, #108]	; (8001414 <MX_SPI2_Init+0x74>)
 80013a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013aa:	4b19      	ldr	r3, [pc, #100]	; (8001410 <MX_SPI2_Init+0x70>)
 80013ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80013b2:	4b17      	ldr	r3, [pc, #92]	; (8001410 <MX_SPI2_Init+0x70>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80013b8:	4b15      	ldr	r3, [pc, #84]	; (8001410 <MX_SPI2_Init+0x70>)
 80013ba:	f44f 7240 	mov.w	r2, #768	; 0x300
 80013be:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013c0:	4b13      	ldr	r3, [pc, #76]	; (8001410 <MX_SPI2_Init+0x70>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013c6:	4b12      	ldr	r3, [pc, #72]	; (8001410 <MX_SPI2_Init+0x70>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80013cc:	4b10      	ldr	r3, [pc, #64]	; (8001410 <MX_SPI2_Init+0x70>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013d2:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <MX_SPI2_Init+0x70>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013d8:	4b0d      	ldr	r3, [pc, #52]	; (8001410 <MX_SPI2_Init+0x70>)
 80013da:	2200      	movs	r2, #0
 80013dc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013de:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <MX_SPI2_Init+0x70>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013e4:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <MX_SPI2_Init+0x70>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <MX_SPI2_Init+0x70>)
 80013ec:	2207      	movs	r2, #7
 80013ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013f0:	4b07      	ldr	r3, [pc, #28]	; (8001410 <MX_SPI2_Init+0x70>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <MX_SPI2_Init+0x70>)
 80013f8:	2208      	movs	r2, #8
 80013fa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80013fc:	4804      	ldr	r0, [pc, #16]	; (8001410 <MX_SPI2_Init+0x70>)
 80013fe:	f00b fccf 	bl	800cda0 <HAL_SPI_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_SPI2_Init+0x6c>
  {
    Error_Handler();
 8001408:	f000 fc2e 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000820 	.word	0x20000820
 8001414:	40003800 	.word	0x40003800

08001418 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b088      	sub	sp, #32
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800141e:	f107 0310 	add.w	r3, r7, #16
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001436:	4b20      	ldr	r3, [pc, #128]	; (80014b8 <MX_TIM1_Init+0xa0>)
 8001438:	4a20      	ldr	r2, [pc, #128]	; (80014bc <MX_TIM1_Init+0xa4>)
 800143a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800143c:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <MX_TIM1_Init+0xa0>)
 800143e:	2200      	movs	r2, #0
 8001440:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001442:	4b1d      	ldr	r3, [pc, #116]	; (80014b8 <MX_TIM1_Init+0xa0>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001448:	4b1b      	ldr	r3, [pc, #108]	; (80014b8 <MX_TIM1_Init+0xa0>)
 800144a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800144e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001450:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <MX_TIM1_Init+0xa0>)
 8001452:	2200      	movs	r2, #0
 8001454:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001456:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <MX_TIM1_Init+0xa0>)
 8001458:	2200      	movs	r2, #0
 800145a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800145c:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <MX_TIM1_Init+0xa0>)
 800145e:	2200      	movs	r2, #0
 8001460:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001462:	4815      	ldr	r0, [pc, #84]	; (80014b8 <MX_TIM1_Init+0xa0>)
 8001464:	f00b fd47 	bl	800cef6 <HAL_TIM_Base_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800146e:	f000 fbfb 	bl	8001c68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001472:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001476:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001478:	f107 0310 	add.w	r3, r7, #16
 800147c:	4619      	mov	r1, r3
 800147e:	480e      	ldr	r0, [pc, #56]	; (80014b8 <MX_TIM1_Init+0xa0>)
 8001480:	f00c f892 	bl	800d5a8 <HAL_TIM_ConfigClockSource>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800148a:	f000 fbed 	bl	8001c68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148e:	2300      	movs	r3, #0
 8001490:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001492:	2300      	movs	r3, #0
 8001494:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	4619      	mov	r1, r3
 800149e:	4806      	ldr	r0, [pc, #24]	; (80014b8 <MX_TIM1_Init+0xa0>)
 80014a0:	f00c fd0c 	bl	800debc <HAL_TIMEx_MasterConfigSynchronization>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80014aa:	f000 fbdd 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014ae:	bf00      	nop
 80014b0:	3720      	adds	r7, #32
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000884 	.word	0x20000884
 80014bc:	40010000 	.word	0x40010000

080014c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08a      	sub	sp, #40	; 0x28
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c6:	f107 031c 	add.w	r3, r7, #28
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014d2:	463b      	mov	r3, r7
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
 80014e0:	615a      	str	r2, [r3, #20]
 80014e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014e4:	4b21      	ldr	r3, [pc, #132]	; (800156c <MX_TIM3_Init+0xac>)
 80014e6:	4a22      	ldr	r2, [pc, #136]	; (8001570 <MX_TIM3_Init+0xb0>)
 80014e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80014ea:	4b20      	ldr	r3, [pc, #128]	; (800156c <MX_TIM3_Init+0xac>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f0:	4b1e      	ldr	r3, [pc, #120]	; (800156c <MX_TIM3_Init+0xac>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80014f6:	4b1d      	ldr	r3, [pc, #116]	; (800156c <MX_TIM3_Init+0xac>)
 80014f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014fe:	4b1b      	ldr	r3, [pc, #108]	; (800156c <MX_TIM3_Init+0xac>)
 8001500:	2200      	movs	r2, #0
 8001502:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001504:	4b19      	ldr	r3, [pc, #100]	; (800156c <MX_TIM3_Init+0xac>)
 8001506:	2200      	movs	r2, #0
 8001508:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800150a:	4818      	ldr	r0, [pc, #96]	; (800156c <MX_TIM3_Init+0xac>)
 800150c:	f00b fdc2 	bl	800d094 <HAL_TIM_PWM_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001516:	f000 fba7 	bl	8001c68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800151e:	2300      	movs	r3, #0
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001522:	f107 031c 	add.w	r3, r7, #28
 8001526:	4619      	mov	r1, r3
 8001528:	4810      	ldr	r0, [pc, #64]	; (800156c <MX_TIM3_Init+0xac>)
 800152a:	f00c fcc7 	bl	800debc <HAL_TIMEx_MasterConfigSynchronization>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001534:	f000 fb98 	bl	8001c68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001538:	2360      	movs	r3, #96	; 0x60
 800153a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001540:	2300      	movs	r3, #0
 8001542:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001548:	463b      	mov	r3, r7
 800154a:	2208      	movs	r2, #8
 800154c:	4619      	mov	r1, r3
 800154e:	4807      	ldr	r0, [pc, #28]	; (800156c <MX_TIM3_Init+0xac>)
 8001550:	f00b ff16 	bl	800d380 <HAL_TIM_PWM_ConfigChannel>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800155a:	f000 fb85 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800155e:	4803      	ldr	r0, [pc, #12]	; (800156c <MX_TIM3_Init+0xac>)
 8001560:	f001 f9f8 	bl	8002954 <HAL_TIM_MspPostInit>

}
 8001564:	bf00      	nop
 8001566:	3728      	adds	r7, #40	; 0x28
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	200008d0 	.word	0x200008d0
 8001570:	40000400 	.word	0x40000400

08001574 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b088      	sub	sp, #32
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
 8001588:	615a      	str	r2, [r3, #20]
 800158a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800158c:	4b1e      	ldr	r3, [pc, #120]	; (8001608 <MX_TIM10_Init+0x94>)
 800158e:	4a1f      	ldr	r2, [pc, #124]	; (800160c <MX_TIM10_Init+0x98>)
 8001590:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8001592:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <MX_TIM10_Init+0x94>)
 8001594:	2200      	movs	r2, #0
 8001596:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001598:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <MX_TIM10_Init+0x94>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800159e:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <MX_TIM10_Init+0x94>)
 80015a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015a4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a6:	4b18      	ldr	r3, [pc, #96]	; (8001608 <MX_TIM10_Init+0x94>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ac:	4b16      	ldr	r3, [pc, #88]	; (8001608 <MX_TIM10_Init+0x94>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80015b2:	4815      	ldr	r0, [pc, #84]	; (8001608 <MX_TIM10_Init+0x94>)
 80015b4:	f00b fc9f 	bl	800cef6 <HAL_TIM_Base_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80015be:	f000 fb53 	bl	8001c68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80015c2:	4811      	ldr	r0, [pc, #68]	; (8001608 <MX_TIM10_Init+0x94>)
 80015c4:	f00b fd66 	bl	800d094 <HAL_TIM_PWM_Init>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80015ce:	f000 fb4b 	bl	8001c68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015d2:	2360      	movs	r3, #96	; 0x60
 80015d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	2200      	movs	r2, #0
 80015e6:	4619      	mov	r1, r3
 80015e8:	4807      	ldr	r0, [pc, #28]	; (8001608 <MX_TIM10_Init+0x94>)
 80015ea:	f00b fec9 	bl	800d380 <HAL_TIM_PWM_ConfigChannel>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80015f4:	f000 fb38 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80015f8:	4803      	ldr	r0, [pc, #12]	; (8001608 <MX_TIM10_Init+0x94>)
 80015fa:	f001 f9ab 	bl	8002954 <HAL_TIM_MspPostInit>

}
 80015fe:	bf00      	nop
 8001600:	3720      	adds	r7, #32
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	2000091c 	.word	0x2000091c
 800160c:	40014400 	.word	0x40014400

08001610 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
 8001624:	615a      	str	r2, [r3, #20]
 8001626:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001628:	4b1e      	ldr	r3, [pc, #120]	; (80016a4 <MX_TIM11_Init+0x94>)
 800162a:	4a1f      	ldr	r2, [pc, #124]	; (80016a8 <MX_TIM11_Init+0x98>)
 800162c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800162e:	4b1d      	ldr	r3, [pc, #116]	; (80016a4 <MX_TIM11_Init+0x94>)
 8001630:	2200      	movs	r2, #0
 8001632:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001634:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <MX_TIM11_Init+0x94>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800163a:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <MX_TIM11_Init+0x94>)
 800163c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001640:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001642:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <MX_TIM11_Init+0x94>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001648:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <MX_TIM11_Init+0x94>)
 800164a:	2200      	movs	r2, #0
 800164c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800164e:	4815      	ldr	r0, [pc, #84]	; (80016a4 <MX_TIM11_Init+0x94>)
 8001650:	f00b fc51 	bl	800cef6 <HAL_TIM_Base_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800165a:	f000 fb05 	bl	8001c68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800165e:	4811      	ldr	r0, [pc, #68]	; (80016a4 <MX_TIM11_Init+0x94>)
 8001660:	f00b fd18 	bl	800d094 <HAL_TIM_PWM_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800166a:	f000 fafd 	bl	8001c68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800166e:	2360      	movs	r3, #96	; 0x60
 8001670:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	2200      	movs	r2, #0
 8001682:	4619      	mov	r1, r3
 8001684:	4807      	ldr	r0, [pc, #28]	; (80016a4 <MX_TIM11_Init+0x94>)
 8001686:	f00b fe7b 	bl	800d380 <HAL_TIM_PWM_ConfigChannel>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8001690:	f000 faea 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001694:	4803      	ldr	r0, [pc, #12]	; (80016a4 <MX_TIM11_Init+0x94>)
 8001696:	f001 f95d 	bl	8002954 <HAL_TIM_MspPostInit>

}
 800169a:	bf00      	nop
 800169c:	3720      	adds	r7, #32
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000968 	.word	0x20000968
 80016a8:	40014800 	.word	0x40014800

080016ac <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
 80016c0:	615a      	str	r2, [r3, #20]
 80016c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80016c4:	4b1a      	ldr	r3, [pc, #104]	; (8001730 <MX_TIM12_Init+0x84>)
 80016c6:	4a1b      	ldr	r2, [pc, #108]	; (8001734 <MX_TIM12_Init+0x88>)
 80016c8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80016ca:	4b19      	ldr	r3, [pc, #100]	; (8001730 <MX_TIM12_Init+0x84>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d0:	4b17      	ldr	r3, [pc, #92]	; (8001730 <MX_TIM12_Init+0x84>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80016d6:	4b16      	ldr	r3, [pc, #88]	; (8001730 <MX_TIM12_Init+0x84>)
 80016d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016dc:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016de:	4b14      	ldr	r3, [pc, #80]	; (8001730 <MX_TIM12_Init+0x84>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e4:	4b12      	ldr	r3, [pc, #72]	; (8001730 <MX_TIM12_Init+0x84>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80016ea:	4811      	ldr	r0, [pc, #68]	; (8001730 <MX_TIM12_Init+0x84>)
 80016ec:	f00b fcd2 	bl	800d094 <HAL_TIM_PWM_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80016f6:	f000 fab7 	bl	8001c68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016fa:	2360      	movs	r3, #96	; 0x60
 80016fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	2200      	movs	r2, #0
 800170e:	4619      	mov	r1, r3
 8001710:	4807      	ldr	r0, [pc, #28]	; (8001730 <MX_TIM12_Init+0x84>)
 8001712:	f00b fe35 	bl	800d380 <HAL_TIM_PWM_ConfigChannel>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 800171c:	f000 faa4 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001720:	4803      	ldr	r0, [pc, #12]	; (8001730 <MX_TIM12_Init+0x84>)
 8001722:	f001 f917 	bl	8002954 <HAL_TIM_MspPostInit>

}
 8001726:	bf00      	nop
 8001728:	3720      	adds	r7, #32
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	200009b4 	.word	0x200009b4
 8001734:	40001800 	.word	0x40001800

08001738 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800173c:	4b14      	ldr	r3, [pc, #80]	; (8001790 <MX_UART5_Init+0x58>)
 800173e:	4a15      	ldr	r2, [pc, #84]	; (8001794 <MX_UART5_Init+0x5c>)
 8001740:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001742:	4b13      	ldr	r3, [pc, #76]	; (8001790 <MX_UART5_Init+0x58>)
 8001744:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001748:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800174a:	4b11      	ldr	r3, [pc, #68]	; (8001790 <MX_UART5_Init+0x58>)
 800174c:	2200      	movs	r2, #0
 800174e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001750:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <MX_UART5_Init+0x58>)
 8001752:	2200      	movs	r2, #0
 8001754:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001756:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <MX_UART5_Init+0x58>)
 8001758:	2200      	movs	r2, #0
 800175a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800175c:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <MX_UART5_Init+0x58>)
 800175e:	220c      	movs	r2, #12
 8001760:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001762:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <MX_UART5_Init+0x58>)
 8001764:	2200      	movs	r2, #0
 8001766:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001768:	4b09      	ldr	r3, [pc, #36]	; (8001790 <MX_UART5_Init+0x58>)
 800176a:	2200      	movs	r2, #0
 800176c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800176e:	4b08      	ldr	r3, [pc, #32]	; (8001790 <MX_UART5_Init+0x58>)
 8001770:	2200      	movs	r2, #0
 8001772:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <MX_UART5_Init+0x58>)
 8001776:	2200      	movs	r2, #0
 8001778:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800177a:	4805      	ldr	r0, [pc, #20]	; (8001790 <MX_UART5_Init+0x58>)
 800177c:	f00c fc4a 	bl	800e014 <HAL_UART_Init>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001786:	f000 fa6f 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000a00 	.word	0x20000a00
 8001794:	40005000 	.word	0x40005000

08001798 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800179c:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <MX_USART1_UART_Init+0x58>)
 800179e:	4a15      	ldr	r2, [pc, #84]	; (80017f4 <MX_USART1_UART_Init+0x5c>)
 80017a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017a2:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <MX_USART1_UART_Init+0x58>)
 80017a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017aa:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <MX_USART1_UART_Init+0x58>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017b0:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <MX_USART1_UART_Init+0x58>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017b6:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <MX_USART1_UART_Init+0x58>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <MX_USART1_UART_Init+0x58>)
 80017be:	220c      	movs	r2, #12
 80017c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017c2:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <MX_USART1_UART_Init+0x58>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c8:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <MX_USART1_UART_Init+0x58>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ce:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <MX_USART1_UART_Init+0x58>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <MX_USART1_UART_Init+0x58>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017da:	4805      	ldr	r0, [pc, #20]	; (80017f0 <MX_USART1_UART_Init+0x58>)
 80017dc:	f00c fc1a 	bl	800e014 <HAL_UART_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80017e6:	f000 fa3f 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000a88 	.word	0x20000a88
 80017f4:	40011000 	.word	0x40011000

080017f8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80017fc:	4b14      	ldr	r3, [pc, #80]	; (8001850 <MX_USART6_UART_Init+0x58>)
 80017fe:	4a15      	ldr	r2, [pc, #84]	; (8001854 <MX_USART6_UART_Init+0x5c>)
 8001800:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001802:	4b13      	ldr	r3, [pc, #76]	; (8001850 <MX_USART6_UART_Init+0x58>)
 8001804:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001808:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800180a:	4b11      	ldr	r3, [pc, #68]	; (8001850 <MX_USART6_UART_Init+0x58>)
 800180c:	2200      	movs	r2, #0
 800180e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001810:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <MX_USART6_UART_Init+0x58>)
 8001812:	2200      	movs	r2, #0
 8001814:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001816:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <MX_USART6_UART_Init+0x58>)
 8001818:	2200      	movs	r2, #0
 800181a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800181c:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <MX_USART6_UART_Init+0x58>)
 800181e:	220c      	movs	r2, #12
 8001820:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001822:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <MX_USART6_UART_Init+0x58>)
 8001824:	2200      	movs	r2, #0
 8001826:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001828:	4b09      	ldr	r3, [pc, #36]	; (8001850 <MX_USART6_UART_Init+0x58>)
 800182a:	2200      	movs	r2, #0
 800182c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800182e:	4b08      	ldr	r3, [pc, #32]	; (8001850 <MX_USART6_UART_Init+0x58>)
 8001830:	2200      	movs	r2, #0
 8001832:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001834:	4b06      	ldr	r3, [pc, #24]	; (8001850 <MX_USART6_UART_Init+0x58>)
 8001836:	2200      	movs	r2, #0
 8001838:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800183a:	4805      	ldr	r0, [pc, #20]	; (8001850 <MX_USART6_UART_Init+0x58>)
 800183c:	f00c fbea 	bl	800e014 <HAL_UART_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001846:	f000 fa0f 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000b10 	.word	0x20000b10
 8001854:	40011400 	.word	0x40011400

08001858 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800185c:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800185e:	4a16      	ldr	r2, [pc, #88]	; (80018b8 <MX_USB_OTG_HS_PCD_Init+0x60>)
 8001860:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8001862:	4b14      	ldr	r3, [pc, #80]	; (80018b4 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001864:	2209      	movs	r2, #9
 8001866:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8001868:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800186a:	2200      	movs	r2, #0
 800186c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800186e:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001870:	2200      	movs	r2, #0
 8001872:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8001874:	4b0f      	ldr	r3, [pc, #60]	; (80018b4 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001876:	2201      	movs	r2, #1
 8001878:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800187a:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800187c:	2200      	movs	r2, #0
 800187e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8001880:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001882:	2200      	movs	r2, #0
 8001884:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8001886:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001888:	2200      	movs	r2, #0
 800188a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800188c:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800188e:	2200      	movs	r2, #0
 8001890:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8001892:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001894:	2200      	movs	r2, #0
 8001896:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800189a:	2200      	movs	r2, #0
 800189c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800189e:	4805      	ldr	r0, [pc, #20]	; (80018b4 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80018a0:	f008 f808 	bl	80098b4 <HAL_PCD_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 80018aa:	f000 f9dd 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000b98 	.word	0x20000b98
 80018b8:	40040000 	.word	0x40040000

080018bc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b088      	sub	sp, #32
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80018c2:	1d3b      	adds	r3, r7, #4
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	611a      	str	r2, [r3, #16]
 80018d0:	615a      	str	r2, [r3, #20]
 80018d2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80018d4:	4b1f      	ldr	r3, [pc, #124]	; (8001954 <MX_FMC_Init+0x98>)
 80018d6:	4a20      	ldr	r2, [pc, #128]	; (8001958 <MX_FMC_Init+0x9c>)
 80018d8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80018da:	4b1e      	ldr	r3, [pc, #120]	; (8001954 <MX_FMC_Init+0x98>)
 80018dc:	2200      	movs	r2, #0
 80018de:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80018e0:	4b1c      	ldr	r3, [pc, #112]	; (8001954 <MX_FMC_Init+0x98>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80018e6:	4b1b      	ldr	r3, [pc, #108]	; (8001954 <MX_FMC_Init+0x98>)
 80018e8:	2204      	movs	r2, #4
 80018ea:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80018ec:	4b19      	ldr	r3, [pc, #100]	; (8001954 <MX_FMC_Init+0x98>)
 80018ee:	2220      	movs	r2, #32
 80018f0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80018f2:	4b18      	ldr	r3, [pc, #96]	; (8001954 <MX_FMC_Init+0x98>)
 80018f4:	2240      	movs	r2, #64	; 0x40
 80018f6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80018f8:	4b16      	ldr	r3, [pc, #88]	; (8001954 <MX_FMC_Init+0x98>)
 80018fa:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80018fe:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001900:	4b14      	ldr	r3, [pc, #80]	; (8001954 <MX_FMC_Init+0x98>)
 8001902:	2200      	movs	r2, #0
 8001904:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001906:	4b13      	ldr	r3, [pc, #76]	; (8001954 <MX_FMC_Init+0x98>)
 8001908:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800190c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800190e:	4b11      	ldr	r3, [pc, #68]	; (8001954 <MX_FMC_Init+0x98>)
 8001910:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001914:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001916:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <MX_FMC_Init+0x98>)
 8001918:	2200      	movs	r2, #0
 800191a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800191c:	2302      	movs	r3, #2
 800191e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001920:	2307      	movs	r3, #7
 8001922:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001924:	2304      	movs	r3, #4
 8001926:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001928:	2307      	movs	r3, #7
 800192a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800192c:	2303      	movs	r3, #3
 800192e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001930:	2302      	movs	r3, #2
 8001932:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001934:	2302      	movs	r3, #2
 8001936:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001938:	1d3b      	adds	r3, r7, #4
 800193a:	4619      	mov	r1, r3
 800193c:	4805      	ldr	r0, [pc, #20]	; (8001954 <MX_FMC_Init+0x98>)
 800193e:	f00b f941 	bl	800cbc4 <HAL_SDRAM_Init>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001948:	f000 f98e 	bl	8001c68 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800194c:	bf00      	nop
 800194e:	3720      	adds	r7, #32
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	200010a0 	.word	0x200010a0
 8001958:	a0000140 	.word	0xa0000140

0800195c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b090      	sub	sp, #64	; 0x40
 8001960:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001962:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	609a      	str	r2, [r3, #8]
 800196e:	60da      	str	r2, [r3, #12]
 8001970:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001972:	4ba2      	ldr	r3, [pc, #648]	; (8001bfc <MX_GPIO_Init+0x2a0>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	4aa1      	ldr	r2, [pc, #644]	; (8001bfc <MX_GPIO_Init+0x2a0>)
 8001978:	f043 0310 	orr.w	r3, r3, #16
 800197c:	6313      	str	r3, [r2, #48]	; 0x30
 800197e:	4b9f      	ldr	r3, [pc, #636]	; (8001bfc <MX_GPIO_Init+0x2a0>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	f003 0310 	and.w	r3, r3, #16
 8001986:	62bb      	str	r3, [r7, #40]	; 0x28
 8001988:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800198a:	4b9c      	ldr	r3, [pc, #624]	; (8001bfc <MX_GPIO_Init+0x2a0>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	4a9b      	ldr	r2, [pc, #620]	; (8001bfc <MX_GPIO_Init+0x2a0>)
 8001990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001994:	6313      	str	r3, [r2, #48]	; 0x30
 8001996:	4b99      	ldr	r3, [pc, #612]	; (8001bfc <MX_GPIO_Init+0x2a0>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a2:	4b96      	ldr	r3, [pc, #600]	; (8001bfc <MX_GPIO_Init+0x2a0>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	4a95      	ldr	r2, [pc, #596]	; (8001bfc <MX_GPIO_Init+0x2a0>)
 80019a8:	f043 0302 	orr.w	r3, r3, #2
 80019ac:	6313      	str	r3, [r2, #48]	; 0x30
 80019ae:	4b93      	ldr	r3, [pc, #588]	; (8001bfc <MX_GPIO_Init+0x2a0>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	623b      	str	r3, [r7, #32]
 80019b8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ba:	4b90      	ldr	r3, [pc, #576]	; (8001bfc <MX_GPIO_Init+0x2a0>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	4a8f      	ldr	r2, [pc, #572]	; (8001bfc <MX_GPIO_Init+0x2a0>)
 80019c0:	f043 0308 	orr.w	r3, r3, #8
 80019c4:	6313      	str	r3, [r2, #48]	; 0x30
 80019c6:	4b8d      	ldr	r3, [pc, #564]	; (8001bfc <MX_GPIO_Init+0x2a0>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	f003 0308 	and.w	r3, r3, #8
 80019ce:	61fb      	str	r3, [r7, #28]
 80019d0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019d2:	4b8a      	ldr	r3, [pc, #552]	; (8001bfc <MX_GPIO_Init+0x2a0>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	4a89      	ldr	r2, [pc, #548]	; (8001bfc <MX_GPIO_Init+0x2a0>)
 80019d8:	f043 0304 	orr.w	r3, r3, #4
 80019dc:	6313      	str	r3, [r2, #48]	; 0x30
 80019de:	4b87      	ldr	r3, [pc, #540]	; (8001bfc <MX_GPIO_Init+0x2a0>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	f003 0304 	and.w	r3, r3, #4
 80019e6:	61bb      	str	r3, [r7, #24]
 80019e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ea:	4b84      	ldr	r3, [pc, #528]	; (8001bfc <MX_GPIO_Init+0x2a0>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	4a83      	ldr	r2, [pc, #524]	; (8001bfc <MX_GPIO_Init+0x2a0>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	6313      	str	r3, [r2, #48]	; 0x30
 80019f6:	4b81      	ldr	r3, [pc, #516]	; (8001bfc <MX_GPIO_Init+0x2a0>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001a02:	4b7e      	ldr	r3, [pc, #504]	; (8001bfc <MX_GPIO_Init+0x2a0>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	4a7d      	ldr	r2, [pc, #500]	; (8001bfc <MX_GPIO_Init+0x2a0>)
 8001a08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0e:	4b7b      	ldr	r3, [pc, #492]	; (8001bfc <MX_GPIO_Init+0x2a0>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001a1a:	4b78      	ldr	r3, [pc, #480]	; (8001bfc <MX_GPIO_Init+0x2a0>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	4a77      	ldr	r2, [pc, #476]	; (8001bfc <MX_GPIO_Init+0x2a0>)
 8001a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a24:	6313      	str	r3, [r2, #48]	; 0x30
 8001a26:	4b75      	ldr	r3, [pc, #468]	; (8001bfc <MX_GPIO_Init+0x2a0>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001a32:	4b72      	ldr	r3, [pc, #456]	; (8001bfc <MX_GPIO_Init+0x2a0>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	4a71      	ldr	r2, [pc, #452]	; (8001bfc <MX_GPIO_Init+0x2a0>)
 8001a38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3e:	4b6f      	ldr	r3, [pc, #444]	; (8001bfc <MX_GPIO_Init+0x2a0>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a46:	60bb      	str	r3, [r7, #8]
 8001a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a4a:	4b6c      	ldr	r3, [pc, #432]	; (8001bfc <MX_GPIO_Init+0x2a0>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	4a6b      	ldr	r2, [pc, #428]	; (8001bfc <MX_GPIO_Init+0x2a0>)
 8001a50:	f043 0320 	orr.w	r3, r3, #32
 8001a54:	6313      	str	r3, [r2, #48]	; 0x30
 8001a56:	4b69      	ldr	r3, [pc, #420]	; (8001bfc <MX_GPIO_Init+0x2a0>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	f003 0320 	and.w	r3, r3, #32
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a62:	4b66      	ldr	r3, [pc, #408]	; (8001bfc <MX_GPIO_Init+0x2a0>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	4a65      	ldr	r2, [pc, #404]	; (8001bfc <MX_GPIO_Init+0x2a0>)
 8001a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6e:	4b63      	ldr	r3, [pc, #396]	; (8001bfc <MX_GPIO_Init+0x2a0>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a76:	603b      	str	r3, [r7, #0]
 8001a78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, LD_USER1_Pin|DSI_RESET_Pin|LD_USER2_Pin, GPIO_PIN_RESET);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f24a 0120 	movw	r1, #40992	; 0xa020
 8001a80:	485f      	ldr	r0, [pc, #380]	; (8001c00 <MX_GPIO_Init+0x2a4>)
 8001a82:	f006 fd15 	bl	80084b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : uSD_D3_Pin uSD_D2_Pin */
  GPIO_InitStruct.Pin = uSD_D3_Pin|uSD_D2_Pin;
 8001a86:	2318      	movs	r3, #24
 8001a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a92:	2303      	movs	r3, #3
 8001a94:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8001a96:	230a      	movs	r3, #10
 8001a98:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4858      	ldr	r0, [pc, #352]	; (8001c04 <MX_GPIO_Init+0x2a8>)
 8001aa2:	f006 fa4d 	bl	8007f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : uSD_CMD_Pin uSD_CLK_Pin */
  GPIO_InitStruct.Pin = uSD_CMD_Pin|uSD_CLK_Pin;
 8001aa6:	23c0      	movs	r3, #192	; 0xc0
 8001aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8001ab6:	230b      	movs	r3, #11
 8001ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4851      	ldr	r0, [pc, #324]	; (8001c08 <MX_GPIO_Init+0x2ac>)
 8001ac2:	f006 fa3d 	bl	8007f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD_USER1_Pin DSI_RESET_Pin LD_USER2_Pin */
  GPIO_InitStruct.Pin = LD_USER1_Pin|DSI_RESET_Pin|LD_USER2_Pin;
 8001ac6:	f24a 0320 	movw	r3, #40992	; 0xa020
 8001aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001acc:	2301      	movs	r3, #1
 8001ace:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001ad8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001adc:	4619      	mov	r1, r3
 8001ade:	4848      	ldr	r0, [pc, #288]	; (8001c00 <MX_GPIO_Init+0x2a4>)
 8001ae0:	f006 fa2e 	bl	8007f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_INT_Pin WIFI_RST_Pin ARD_D8_Pin ARD_D7_Pin
                           ARD_D4_Pin ARD_D2_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin|WIFI_RST_Pin|ARD_D8_Pin|ARD_D7_Pin
 8001ae4:	f245 031b 	movw	r3, #20507	; 0x501b
 8001ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARD_D4_Pin|ARD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aea:	2300      	movs	r3, #0
 8001aec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001af2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001af6:	4619      	mov	r1, r3
 8001af8:	4841      	ldr	r0, [pc, #260]	; (8001c00 <MX_GPIO_Init+0x2a4>)
 8001afa:	f006 fa21 	bl	8007f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : NC4_Pin NC5_Pin uSD_Detect_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = NC4_Pin|NC5_Pin|uSD_Detect_Pin|LCD_BL_CTRL_Pin;
 8001afe:	f44f 4351 	mov.w	r3, #53504	; 0xd100
 8001b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b04:	2300      	movs	r3, #0
 8001b06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001b0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b10:	4619      	mov	r1, r3
 8001b12:	483e      	ldr	r0, [pc, #248]	; (8001c0c <MX_GPIO_Init+0x2b0>)
 8001b14:	f006 fa14 	bl	8007f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : NC3_Pin NC2_Pin NC1_Pin NC8_Pin
                           NC7_Pin */
  GPIO_InitStruct.Pin = NC3_Pin|NC2_Pin|NC1_Pin|NC8_Pin
 8001b18:	23f8      	movs	r3, #248	; 0xf8
 8001b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |NC7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001b24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4839      	ldr	r0, [pc, #228]	; (8001c10 <MX_GPIO_Init+0x2b4>)
 8001b2c:	f006 fa08 	bl	8007f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : uSD_D1_Pin uSD_D0_Pin */
  GPIO_InitStruct.Pin = uSD_D1_Pin|uSD_D0_Pin;
 8001b30:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b36:	2302      	movs	r3, #2
 8001b38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8001b42:	230b      	movs	r3, #11
 8001b44:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4831      	ldr	r0, [pc, #196]	; (8001c14 <MX_GPIO_Init+0x2b8>)
 8001b4e:	f006 f9f7 	bl	8007f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_RXER_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin|OTG_FS_OverCurrent_Pin;
 8001b52:	2330      	movs	r3, #48	; 0x30
 8001b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b56:	2300      	movs	r3, #0
 8001b58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b62:	4619      	mov	r1, r3
 8001b64:	4828      	ldr	r0, [pc, #160]	; (8001c08 <MX_GPIO_Init+0x2ac>)
 8001b66:	f006 f9eb 	bl	8007f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CLK_Pin */
  GPIO_InitStruct.Pin = CEC_CLK_Pin;
 8001b6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b70:	2302      	movs	r3, #2
 8001b72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(CEC_CLK_GPIO_Port, &GPIO_InitStruct);
 8001b80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b84:	4619      	mov	r1, r3
 8001b86:	4824      	ldr	r0, [pc, #144]	; (8001c18 <MX_GPIO_Init+0x2bc>)
 8001b88:	f006 f9da 	bl	8007f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001b8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b92:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001b96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001b9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	481a      	ldr	r0, [pc, #104]	; (8001c0c <MX_GPIO_Init+0x2b0>)
 8001ba4:	f006 f9cc 	bl	8007f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_SDA_Pin EXT_SCL_Pin */
  GPIO_InitStruct.Pin = EXT_SDA_Pin|EXT_SCL_Pin;
 8001ba8:	2348      	movs	r3, #72	; 0x48
 8001baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bac:	2300      	movs	r3, #0
 8001bae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4816      	ldr	r0, [pc, #88]	; (8001c14 <MX_GPIO_Init+0x2b8>)
 8001bbc:	f006 f9c0 	bl	8007f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bc4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001bc8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8001bce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4810      	ldr	r0, [pc, #64]	; (8001c18 <MX_GPIO_Init+0x2bc>)
 8001bd6:	f006 f9b3 	bl	8007f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001bda:	2380      	movs	r3, #128	; 0x80
 8001bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bde:	2300      	movs	r3, #0
 8001be0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001be6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bea:	4619      	mov	r1, r3
 8001bec:	480b      	ldr	r0, [pc, #44]	; (8001c1c <MX_GPIO_Init+0x2c0>)
 8001bee:	f006 f9a7 	bl	8007f40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bf2:	bf00      	nop
 8001bf4:	3740      	adds	r7, #64	; 0x40
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40022400 	.word	0x40022400
 8001c04:	40020400 	.word	0x40020400
 8001c08:	40020c00 	.word	0x40020c00
 8001c0c:	40022000 	.word	0x40022000
 8001c10:	40022800 	.word	0x40022800
 8001c14:	40021800 	.word	0x40021800
 8001c18:	40020000 	.word	0x40020000
 8001c1c:	40021c00 	.word	0x40021c00

08001c20 <__io_putchar>:
   * @brief  Retargets the C library printf function to the USART.
   * @param  None
   * @retval None
   */
 PUTCHAR_PROTOTYPE
 {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
   /* Place your implementation of fputc here */
   /* e.g. write a character to the USART2 and Loop until the end of transmission */
   HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001c28:	1d39      	adds	r1, r7, #4
 8001c2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c2e:	2201      	movs	r2, #1
 8001c30:	4803      	ldr	r0, [pc, #12]	; (8001c40 <__io_putchar+0x20>)
 8001c32:	f00c fa3d 	bl	800e0b0 <HAL_UART_Transmit>
   //ITM_SendChar (ch);

   return ch;
 8001c36:	687b      	ldr	r3, [r7, #4]
 }
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20000a88 	.word	0x20000a88

08001c44 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a04      	ldr	r2, [pc, #16]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d101      	bne.n	8001c5a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c56:	f003 f83f 	bl	8004cd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40001000 	.word	0x40001000

08001c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c6c:	b672      	cpsid	i
}
 8001c6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c70:	e7fe      	b.n	8001c70 <Error_Handler+0x8>
	...

08001c74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c7a:	4b0f      	ldr	r3, [pc, #60]	; (8001cb8 <HAL_MspInit+0x44>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	4a0e      	ldr	r2, [pc, #56]	; (8001cb8 <HAL_MspInit+0x44>)
 8001c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c84:	6413      	str	r3, [r2, #64]	; 0x40
 8001c86:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <HAL_MspInit+0x44>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8e:	607b      	str	r3, [r7, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c92:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <HAL_MspInit+0x44>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c96:	4a08      	ldr	r2, [pc, #32]	; (8001cb8 <HAL_MspInit+0x44>)
 8001c98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c9e:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <HAL_MspInit+0x44>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ca6:	603b      	str	r3, [r7, #0]
 8001ca8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	40023800 	.word	0x40023800

08001cbc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08c      	sub	sp, #48	; 0x30
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc4:	f107 031c 	add.w	r3, r7, #28
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a36      	ldr	r2, [pc, #216]	; (8001db4 <HAL_ADC_MspInit+0xf8>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d13c      	bne.n	8001d58 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cde:	4b36      	ldr	r3, [pc, #216]	; (8001db8 <HAL_ADC_MspInit+0xfc>)
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce2:	4a35      	ldr	r2, [pc, #212]	; (8001db8 <HAL_ADC_MspInit+0xfc>)
 8001ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ce8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cea:	4b33      	ldr	r3, [pc, #204]	; (8001db8 <HAL_ADC_MspInit+0xfc>)
 8001cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf2:	61bb      	str	r3, [r7, #24]
 8001cf4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf6:	4b30      	ldr	r3, [pc, #192]	; (8001db8 <HAL_ADC_MspInit+0xfc>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	4a2f      	ldr	r2, [pc, #188]	; (8001db8 <HAL_ADC_MspInit+0xfc>)
 8001cfc:	f043 0304 	orr.w	r3, r3, #4
 8001d00:	6313      	str	r3, [r2, #48]	; 0x30
 8001d02:	4b2d      	ldr	r3, [pc, #180]	; (8001db8 <HAL_ADC_MspInit+0xfc>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	f003 0304 	and.w	r3, r3, #4
 8001d0a:	617b      	str	r3, [r7, #20]
 8001d0c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0e:	4b2a      	ldr	r3, [pc, #168]	; (8001db8 <HAL_ADC_MspInit+0xfc>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	4a29      	ldr	r2, [pc, #164]	; (8001db8 <HAL_ADC_MspInit+0xfc>)
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1a:	4b27      	ldr	r3, [pc, #156]	; (8001db8 <HAL_ADC_MspInit+0xfc>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	613b      	str	r3, [r7, #16]
 8001d24:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ARD_A2_Pin;
 8001d26:	2304      	movs	r3, #4
 8001d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A2_GPIO_Port, &GPIO_InitStruct);
 8001d32:	f107 031c 	add.w	r3, r7, #28
 8001d36:	4619      	mov	r1, r3
 8001d38:	4820      	ldr	r0, [pc, #128]	; (8001dbc <HAL_ADC_MspInit+0x100>)
 8001d3a:	f006 f901 	bl	8007f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A0_Pin;
 8001d3e:	2350      	movs	r3, #80	; 0x50
 8001d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d42:	2303      	movs	r3, #3
 8001d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4a:	f107 031c 	add.w	r3, r7, #28
 8001d4e:	4619      	mov	r1, r3
 8001d50:	481b      	ldr	r0, [pc, #108]	; (8001dc0 <HAL_ADC_MspInit+0x104>)
 8001d52:	f006 f8f5 	bl	8007f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001d56:	e029      	b.n	8001dac <HAL_ADC_MspInit+0xf0>
  else if(hadc->Instance==ADC3)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a19      	ldr	r2, [pc, #100]	; (8001dc4 <HAL_ADC_MspInit+0x108>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d124      	bne.n	8001dac <HAL_ADC_MspInit+0xf0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001d62:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <HAL_ADC_MspInit+0xfc>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	4a14      	ldr	r2, [pc, #80]	; (8001db8 <HAL_ADC_MspInit+0xfc>)
 8001d68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d6e:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <HAL_ADC_MspInit+0xfc>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d7a:	4b0f      	ldr	r3, [pc, #60]	; (8001db8 <HAL_ADC_MspInit+0xfc>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	4a0e      	ldr	r2, [pc, #56]	; (8001db8 <HAL_ADC_MspInit+0xfc>)
 8001d80:	f043 0320 	orr.w	r3, r3, #32
 8001d84:	6313      	str	r3, [r2, #48]	; 0x30
 8001d86:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <HAL_ADC_MspInit+0xfc>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	f003 0320 	and.w	r3, r3, #32
 8001d8e:	60bb      	str	r3, [r7, #8]
 8001d90:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_A1_Pin|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8001d92:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001da0:	f107 031c 	add.w	r3, r7, #28
 8001da4:	4619      	mov	r1, r3
 8001da6:	4808      	ldr	r0, [pc, #32]	; (8001dc8 <HAL_ADC_MspInit+0x10c>)
 8001da8:	f006 f8ca 	bl	8007f40 <HAL_GPIO_Init>
}
 8001dac:	bf00      	nop
 8001dae:	3730      	adds	r7, #48	; 0x30
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40012000 	.word	0x40012000
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	40020800 	.word	0x40020800
 8001dc0:	40020000 	.word	0x40020000
 8001dc4:	40012200 	.word	0x40012200
 8001dc8:	40021400 	.word	0x40021400

08001dcc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a0a      	ldr	r2, [pc, #40]	; (8001e04 <HAL_CRC_MspInit+0x38>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d10b      	bne.n	8001df6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001dde:	4b0a      	ldr	r3, [pc, #40]	; (8001e08 <HAL_CRC_MspInit+0x3c>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	4a09      	ldr	r2, [pc, #36]	; (8001e08 <HAL_CRC_MspInit+0x3c>)
 8001de4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001de8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dea:	4b07      	ldr	r3, [pc, #28]	; (8001e08 <HAL_CRC_MspInit+0x3c>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001df6:	bf00      	nop
 8001df8:	3714      	adds	r7, #20
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	40023000 	.word	0x40023000
 8001e08:	40023800 	.word	0x40023800

08001e0c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b0ae      	sub	sp, #184	; 0xb8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e14:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e24:	f107 0314 	add.w	r3, r7, #20
 8001e28:	2290      	movs	r2, #144	; 0x90
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f00d fef7 	bl	800fc20 <memset>
  if(DFSDM1_Init == 0)
 8001e32:	4b36      	ldr	r3, [pc, #216]	; (8001f0c <HAL_DFSDM_ChannelMspInit+0x100>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d163      	bne.n	8001f02 <HAL_DFSDM_ChannelMspInit+0xf6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001e3a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001e3e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001e40:	2300      	movs	r3, #0
 8001e42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e46:	f107 0314 	add.w	r3, r7, #20
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f009 fc00 	bl	800b650 <HAL_RCCEx_PeriphCLKConfig>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001e56:	f7ff ff07 	bl	8001c68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001e5a:	4b2d      	ldr	r3, [pc, #180]	; (8001f10 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5e:	4a2c      	ldr	r2, [pc, #176]	; (8001f10 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001e60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e64:	6453      	str	r3, [r2, #68]	; 0x44
 8001e66:	4b2a      	ldr	r3, [pc, #168]	; (8001f10 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e6e:	613b      	str	r3, [r7, #16]
 8001e70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e72:	4b27      	ldr	r3, [pc, #156]	; (8001f10 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	4a26      	ldr	r2, [pc, #152]	; (8001f10 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001e78:	f043 0304 	orr.w	r3, r3, #4
 8001e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7e:	4b24      	ldr	r3, [pc, #144]	; (8001f10 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	f003 0304 	and.w	r3, r3, #4
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e8a:	4b21      	ldr	r3, [pc, #132]	; (8001f10 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	4a20      	ldr	r2, [pc, #128]	; (8001f10 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001e90:	f043 0308 	orr.w	r3, r3, #8
 8001e94:	6313      	str	r3, [r2, #48]	; 0x30
 8001e96:	4b1e      	ldr	r3, [pc, #120]	; (8001f10 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	f003 0308 	and.w	r3, r3, #8
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PC11     ------> DFSDM1_DATIN5
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM_DATIN5_Pin;
 8001ea2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ea6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DFSDM_DATIN5_GPIO_Port, &GPIO_InitStruct);
 8001ec2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4812      	ldr	r0, [pc, #72]	; (8001f14 <HAL_DFSDM_ChannelMspInit+0x108>)
 8001eca:	f006 f839 	bl	8007f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM_CKOUT_Pin;
 8001ece:	2308      	movs	r3, #8
 8001ed0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001eec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4809      	ldr	r0, [pc, #36]	; (8001f18 <HAL_DFSDM_ChannelMspInit+0x10c>)
 8001ef4:	f006 f824 	bl	8007f40 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001ef8:	4b04      	ldr	r3, [pc, #16]	; (8001f0c <HAL_DFSDM_ChannelMspInit+0x100>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	3301      	adds	r3, #1
 8001efe:	4a03      	ldr	r2, [pc, #12]	; (8001f0c <HAL_DFSDM_ChannelMspInit+0x100>)
 8001f00:	6013      	str	r3, [r2, #0]
  }

}
 8001f02:	bf00      	nop
 8001f04:	37b8      	adds	r7, #184	; 0xb8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	200010fc 	.word	0x200010fc
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40020800 	.word	0x40020800
 8001f18:	40020c00 	.word	0x40020c00

08001f1c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a0d      	ldr	r2, [pc, #52]	; (8001f60 <HAL_DMA2D_MspInit+0x44>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d113      	bne.n	8001f56 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001f2e:	4b0d      	ldr	r3, [pc, #52]	; (8001f64 <HAL_DMA2D_MspInit+0x48>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	4a0c      	ldr	r2, [pc, #48]	; (8001f64 <HAL_DMA2D_MspInit+0x48>)
 8001f34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f38:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3a:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <HAL_DMA2D_MspInit+0x48>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8001f46:	2200      	movs	r2, #0
 8001f48:	2100      	movs	r1, #0
 8001f4a:	205a      	movs	r0, #90	; 0x5a
 8001f4c:	f003 fbd4 	bl	80056f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001f50:	205a      	movs	r0, #90	; 0x5a
 8001f52:	f003 fbed 	bl	8005730 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001f56:	bf00      	nop
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	4002b000 	.word	0x4002b000
 8001f64:	40023800 	.word	0x40023800

08001f68 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b08a      	sub	sp, #40	; 0x28
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f70:	f107 0314 	add.w	r3, r7, #20
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
 8001f7e:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a1b      	ldr	r2, [pc, #108]	; (8001ff4 <HAL_DSI_MspInit+0x8c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d12f      	bne.n	8001fea <HAL_DSI_MspInit+0x82>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001f8a:	4b1b      	ldr	r3, [pc, #108]	; (8001ff8 <HAL_DSI_MspInit+0x90>)
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8e:	4a1a      	ldr	r2, [pc, #104]	; (8001ff8 <HAL_DSI_MspInit+0x90>)
 8001f90:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f94:	6453      	str	r3, [r2, #68]	; 0x44
 8001f96:	4b18      	ldr	r3, [pc, #96]	; (8001ff8 <HAL_DSI_MspInit+0x90>)
 8001f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f9e:	613b      	str	r3, [r7, #16]
 8001fa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001fa2:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <HAL_DSI_MspInit+0x90>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	4a14      	ldr	r2, [pc, #80]	; (8001ff8 <HAL_DSI_MspInit+0x90>)
 8001fa8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fac:	6313      	str	r3, [r2, #48]	; 0x30
 8001fae:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <HAL_DSI_MspInit+0x90>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = DSIHOST_TE_Pin;
 8001fba:	2304      	movs	r3, #4
 8001fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001fca:	230d      	movs	r3, #13
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DSIHOST_TE_GPIO_Port, &GPIO_InitStruct);
 8001fce:	f107 0314 	add.w	r3, r7, #20
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4809      	ldr	r0, [pc, #36]	; (8001ffc <HAL_DSI_MspInit+0x94>)
 8001fd6:	f005 ffb3 	bl	8007f40 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 0, 0);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2100      	movs	r1, #0
 8001fde:	2062      	movs	r0, #98	; 0x62
 8001fe0:	f003 fb8a 	bl	80056f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001fe4:	2062      	movs	r0, #98	; 0x62
 8001fe6:	f003 fba3 	bl	8005730 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8001fea:	bf00      	nop
 8001fec:	3728      	adds	r7, #40	; 0x28
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40016c00 	.word	0x40016c00
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	40022400 	.word	0x40022400

08002000 <HAL_DSI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspDeInit(DSI_HandleTypeDef* hdsi)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance==DSI)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a09      	ldr	r2, [pc, #36]	; (8002034 <HAL_DSI_MspDeInit+0x34>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d10c      	bne.n	800202c <HAL_DSI_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN DSI_MspDeInit 0 */

  /* USER CODE END DSI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DSI_CLK_DISABLE();
 8002012:	4b09      	ldr	r3, [pc, #36]	; (8002038 <HAL_DSI_MspDeInit+0x38>)
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	4a08      	ldr	r2, [pc, #32]	; (8002038 <HAL_DSI_MspDeInit+0x38>)
 8002018:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800201c:	6453      	str	r3, [r2, #68]	; 0x44

    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    HAL_GPIO_DeInit(DSIHOST_TE_GPIO_Port, DSIHOST_TE_Pin);
 800201e:	2104      	movs	r1, #4
 8002020:	4806      	ldr	r0, [pc, #24]	; (800203c <HAL_DSI_MspDeInit+0x3c>)
 8002022:	f006 f939 	bl	8008298 <HAL_GPIO_DeInit>

    /* DSI interrupt DeInit */
    HAL_NVIC_DisableIRQ(DSI_IRQn);
 8002026:	2062      	movs	r0, #98	; 0x62
 8002028:	f003 fb90 	bl	800574c <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DSI_MspDeInit 1 */

  /* USER CODE END DSI_MspDeInit 1 */
  }

}
 800202c:	bf00      	nop
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40016c00 	.word	0x40016c00
 8002038:	40023800 	.word	0x40023800
 800203c:	40022400 	.word	0x40022400

08002040 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b08e      	sub	sp, #56	; 0x38
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002048:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]
 8002056:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a3f      	ldr	r2, [pc, #252]	; (800215c <HAL_ETH_MspInit+0x11c>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d178      	bne.n	8002154 <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002062:	4b3f      	ldr	r3, [pc, #252]	; (8002160 <HAL_ETH_MspInit+0x120>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	4a3e      	ldr	r2, [pc, #248]	; (8002160 <HAL_ETH_MspInit+0x120>)
 8002068:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800206c:	6313      	str	r3, [r2, #48]	; 0x30
 800206e:	4b3c      	ldr	r3, [pc, #240]	; (8002160 <HAL_ETH_MspInit+0x120>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002076:	623b      	str	r3, [r7, #32]
 8002078:	6a3b      	ldr	r3, [r7, #32]
 800207a:	4b39      	ldr	r3, [pc, #228]	; (8002160 <HAL_ETH_MspInit+0x120>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	4a38      	ldr	r2, [pc, #224]	; (8002160 <HAL_ETH_MspInit+0x120>)
 8002080:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002084:	6313      	str	r3, [r2, #48]	; 0x30
 8002086:	4b36      	ldr	r3, [pc, #216]	; (8002160 <HAL_ETH_MspInit+0x120>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800208e:	61fb      	str	r3, [r7, #28]
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	4b33      	ldr	r3, [pc, #204]	; (8002160 <HAL_ETH_MspInit+0x120>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	4a32      	ldr	r2, [pc, #200]	; (8002160 <HAL_ETH_MspInit+0x120>)
 8002098:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800209c:	6313      	str	r3, [r2, #48]	; 0x30
 800209e:	4b30      	ldr	r3, [pc, #192]	; (8002160 <HAL_ETH_MspInit+0x120>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020a6:	61bb      	str	r3, [r7, #24]
 80020a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80020aa:	4b2d      	ldr	r3, [pc, #180]	; (8002160 <HAL_ETH_MspInit+0x120>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	4a2c      	ldr	r2, [pc, #176]	; (8002160 <HAL_ETH_MspInit+0x120>)
 80020b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020b4:	6313      	str	r3, [r2, #48]	; 0x30
 80020b6:	4b2a      	ldr	r3, [pc, #168]	; (8002160 <HAL_ETH_MspInit+0x120>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020be:	617b      	str	r3, [r7, #20]
 80020c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020c2:	4b27      	ldr	r3, [pc, #156]	; (8002160 <HAL_ETH_MspInit+0x120>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	4a26      	ldr	r2, [pc, #152]	; (8002160 <HAL_ETH_MspInit+0x120>)
 80020c8:	f043 0304 	orr.w	r3, r3, #4
 80020cc:	6313      	str	r3, [r2, #48]	; 0x30
 80020ce:	4b24      	ldr	r3, [pc, #144]	; (8002160 <HAL_ETH_MspInit+0x120>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	f003 0304 	and.w	r3, r3, #4
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020da:	4b21      	ldr	r3, [pc, #132]	; (8002160 <HAL_ETH_MspInit+0x120>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	4a20      	ldr	r2, [pc, #128]	; (8002160 <HAL_ETH_MspInit+0x120>)
 80020e0:	f043 0301 	orr.w	r3, r3, #1
 80020e4:	6313      	str	r3, [r2, #48]	; 0x30
 80020e6:	4b1e      	ldr	r3, [pc, #120]	; (8002160 <HAL_ETH_MspInit+0x120>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80020f2:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f8:	2302      	movs	r3, #2
 80020fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002100:	2303      	movs	r3, #3
 8002102:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002104:	230b      	movs	r3, #11
 8002106:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800210c:	4619      	mov	r1, r3
 800210e:	4815      	ldr	r0, [pc, #84]	; (8002164 <HAL_ETH_MspInit+0x124>)
 8002110:	f005 ff16 	bl	8007f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002114:	2332      	movs	r3, #50	; 0x32
 8002116:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002118:	2302      	movs	r3, #2
 800211a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
 800211e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002120:	2303      	movs	r3, #3
 8002122:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002124:	230b      	movs	r3, #11
 8002126:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800212c:	4619      	mov	r1, r3
 800212e:	480e      	ldr	r0, [pc, #56]	; (8002168 <HAL_ETH_MspInit+0x128>)
 8002130:	f005 ff06 	bl	8007f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002134:	2386      	movs	r3, #134	; 0x86
 8002136:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002138:	2302      	movs	r3, #2
 800213a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213c:	2300      	movs	r3, #0
 800213e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002140:	2303      	movs	r3, #3
 8002142:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002144:	230b      	movs	r3, #11
 8002146:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800214c:	4619      	mov	r1, r3
 800214e:	4807      	ldr	r0, [pc, #28]	; (800216c <HAL_ETH_MspInit+0x12c>)
 8002150:	f005 fef6 	bl	8007f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002154:	bf00      	nop
 8002156:	3738      	adds	r7, #56	; 0x38
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40028000 	.word	0x40028000
 8002160:	40023800 	.word	0x40023800
 8002164:	40021800 	.word	0x40021800
 8002168:	40020800 	.word	0x40020800
 800216c:	40020000 	.word	0x40020000

08002170 <HAL_CEC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcec: CEC handle pointer
* @retval None
*/
void HAL_CEC_MspInit(CEC_HandleTypeDef* hcec)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b0ae      	sub	sp, #184	; 0xb8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002178:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002188:	f107 0314 	add.w	r3, r7, #20
 800218c:	2290      	movs	r2, #144	; 0x90
 800218e:	2100      	movs	r1, #0
 8002190:	4618      	mov	r0, r3
 8002192:	f00d fd45 	bl	800fc20 <memset>
  if(hcec->Instance==CEC)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a27      	ldr	r2, [pc, #156]	; (8002238 <HAL_CEC_MspInit+0xc8>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d146      	bne.n	800222e <HAL_CEC_MspInit+0xbe>

  /* USER CODE END CEC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CEC;
 80021a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021a4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.CecClockSelection = RCC_CECCLKSOURCE_HSI;
 80021a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80021aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021ae:	f107 0314 	add.w	r3, r7, #20
 80021b2:	4618      	mov	r0, r3
 80021b4:	f009 fa4c 	bl	800b650 <HAL_RCCEx_PeriphCLKConfig>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <HAL_CEC_MspInit+0x52>
    {
      Error_Handler();
 80021be:	f7ff fd53 	bl	8001c68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_CEC_CLK_ENABLE();
 80021c2:	4b1e      	ldr	r3, [pc, #120]	; (800223c <HAL_CEC_MspInit+0xcc>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	4a1d      	ldr	r2, [pc, #116]	; (800223c <HAL_CEC_MspInit+0xcc>)
 80021c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80021cc:	6413      	str	r3, [r2, #64]	; 0x40
 80021ce:	4b1b      	ldr	r3, [pc, #108]	; (800223c <HAL_CEC_MspInit+0xcc>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021d6:	613b      	str	r3, [r7, #16]
 80021d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021da:	4b18      	ldr	r3, [pc, #96]	; (800223c <HAL_CEC_MspInit+0xcc>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	4a17      	ldr	r2, [pc, #92]	; (800223c <HAL_CEC_MspInit+0xcc>)
 80021e0:	f043 0301 	orr.w	r3, r3, #1
 80021e4:	6313      	str	r3, [r2, #48]	; 0x30
 80021e6:	4b15      	ldr	r3, [pc, #84]	; (800223c <HAL_CEC_MspInit+0xcc>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	68fb      	ldr	r3, [r7, #12]
    /**HDMI_CEC GPIO Configuration
    PA15     ------> CEC
    */
    GPIO_InitStruct.Pin = CEC_Pin;
 80021f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021fa:	2312      	movs	r3, #18
 80021fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002200:	2300      	movs	r3, #0
 8002202:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002206:	2300      	movs	r3, #0
 8002208:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_CEC;
 800220c:	2304      	movs	r3, #4
 800220e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(CEC_GPIO_Port, &GPIO_InitStruct);
 8002212:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002216:	4619      	mov	r1, r3
 8002218:	4809      	ldr	r0, [pc, #36]	; (8002240 <HAL_CEC_MspInit+0xd0>)
 800221a:	f005 fe91 	bl	8007f40 <HAL_GPIO_Init>

    /* CEC interrupt Init */
    HAL_NVIC_SetPriority(CEC_IRQn, 0, 0);
 800221e:	2200      	movs	r2, #0
 8002220:	2100      	movs	r1, #0
 8002222:	205e      	movs	r0, #94	; 0x5e
 8002224:	f003 fa68 	bl	80056f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_IRQn);
 8002228:	205e      	movs	r0, #94	; 0x5e
 800222a:	f003 fa81 	bl	8005730 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CEC_MspInit 1 */

  /* USER CODE END CEC_MspInit 1 */
  }

}
 800222e:	bf00      	nop
 8002230:	37b8      	adds	r7, #184	; 0xb8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40006c00 	.word	0x40006c00
 800223c:	40023800 	.word	0x40023800
 8002240:	40020000 	.word	0x40020000

08002244 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b0b0      	sub	sp, #192	; 0xc0
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	60da      	str	r2, [r3, #12]
 800225a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800225c:	f107 031c 	add.w	r3, r7, #28
 8002260:	2290      	movs	r2, #144	; 0x90
 8002262:	2100      	movs	r1, #0
 8002264:	4618      	mov	r0, r3
 8002266:	f00d fcdb 	bl	800fc20 <memset>
  if(hi2c->Instance==I2C1)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a55      	ldr	r2, [pc, #340]	; (80023c4 <HAL_I2C_MspInit+0x180>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d13e      	bne.n	80022f2 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002274:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002278:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800227a:	2300      	movs	r3, #0
 800227c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002280:	f107 031c 	add.w	r3, r7, #28
 8002284:	4618      	mov	r0, r3
 8002286:	f009 f9e3 	bl	800b650 <HAL_RCCEx_PeriphCLKConfig>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8002290:	f7ff fcea 	bl	8001c68 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002294:	4b4c      	ldr	r3, [pc, #304]	; (80023c8 <HAL_I2C_MspInit+0x184>)
 8002296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002298:	4a4b      	ldr	r2, [pc, #300]	; (80023c8 <HAL_I2C_MspInit+0x184>)
 800229a:	f043 0302 	orr.w	r3, r3, #2
 800229e:	6313      	str	r3, [r2, #48]	; 0x30
 80022a0:	4b49      	ldr	r3, [pc, #292]	; (80023c8 <HAL_I2C_MspInit+0x184>)
 80022a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	61bb      	str	r3, [r7, #24]
 80022aa:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80022ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022b4:	2312      	movs	r3, #18
 80022b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022ba:	2301      	movs	r3, #1
 80022bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c0:	2300      	movs	r3, #0
 80022c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022c6:	2304      	movs	r3, #4
 80022c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022cc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80022d0:	4619      	mov	r1, r3
 80022d2:	483e      	ldr	r0, [pc, #248]	; (80023cc <HAL_I2C_MspInit+0x188>)
 80022d4:	f005 fe34 	bl	8007f40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022d8:	4b3b      	ldr	r3, [pc, #236]	; (80023c8 <HAL_I2C_MspInit+0x184>)
 80022da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022dc:	4a3a      	ldr	r2, [pc, #232]	; (80023c8 <HAL_I2C_MspInit+0x184>)
 80022de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022e2:	6413      	str	r3, [r2, #64]	; 0x40
 80022e4:	4b38      	ldr	r3, [pc, #224]	; (80023c8 <HAL_I2C_MspInit+0x184>)
 80022e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80022f0:	e063      	b.n	80023ba <HAL_I2C_MspInit+0x176>
  else if(hi2c->Instance==I2C4)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a36      	ldr	r2, [pc, #216]	; (80023d0 <HAL_I2C_MspInit+0x18c>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d15e      	bne.n	80023ba <HAL_I2C_MspInit+0x176>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80022fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002300:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8002302:	2300      	movs	r3, #0
 8002304:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002308:	f107 031c 	add.w	r3, r7, #28
 800230c:	4618      	mov	r0, r3
 800230e:	f009 f99f 	bl	800b650 <HAL_RCCEx_PeriphCLKConfig>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8002318:	f7ff fca6 	bl	8001c68 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800231c:	4b2a      	ldr	r3, [pc, #168]	; (80023c8 <HAL_I2C_MspInit+0x184>)
 800231e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002320:	4a29      	ldr	r2, [pc, #164]	; (80023c8 <HAL_I2C_MspInit+0x184>)
 8002322:	f043 0302 	orr.w	r3, r3, #2
 8002326:	6313      	str	r3, [r2, #48]	; 0x30
 8002328:	4b27      	ldr	r3, [pc, #156]	; (80023c8 <HAL_I2C_MspInit+0x184>)
 800232a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	613b      	str	r3, [r7, #16]
 8002332:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002334:	4b24      	ldr	r3, [pc, #144]	; (80023c8 <HAL_I2C_MspInit+0x184>)
 8002336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002338:	4a23      	ldr	r2, [pc, #140]	; (80023c8 <HAL_I2C_MspInit+0x184>)
 800233a:	f043 0308 	orr.w	r3, r3, #8
 800233e:	6313      	str	r3, [r2, #48]	; 0x30
 8002340:	4b21      	ldr	r3, [pc, #132]	; (80023c8 <HAL_I2C_MspInit+0x184>)
 8002342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002344:	f003 0308 	and.w	r3, r3, #8
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = AUDIO_SDA_Pin;
 800234c:	2380      	movs	r3, #128	; 0x80
 800234e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002352:	2312      	movs	r3, #18
 8002354:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002358:	2301      	movs	r3, #1
 800235a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800235e:	2303      	movs	r3, #3
 8002360:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8002364:	230b      	movs	r3, #11
 8002366:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(AUDIO_SDA_GPIO_Port, &GPIO_InitStruct);
 800236a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800236e:	4619      	mov	r1, r3
 8002370:	4816      	ldr	r0, [pc, #88]	; (80023cc <HAL_I2C_MspInit+0x188>)
 8002372:	f005 fde5 	bl	8007f40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AUDIO_SCL_Pin;
 8002376:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800237a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800237e:	2312      	movs	r3, #18
 8002380:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002384:	2301      	movs	r3, #1
 8002386:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800238a:	2303      	movs	r3, #3
 800238c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8002390:	2304      	movs	r3, #4
 8002392:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(AUDIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8002396:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800239a:	4619      	mov	r1, r3
 800239c:	480d      	ldr	r0, [pc, #52]	; (80023d4 <HAL_I2C_MspInit+0x190>)
 800239e:	f005 fdcf 	bl	8007f40 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80023a2:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <HAL_I2C_MspInit+0x184>)
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	4a08      	ldr	r2, [pc, #32]	; (80023c8 <HAL_I2C_MspInit+0x184>)
 80023a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023ac:	6413      	str	r3, [r2, #64]	; 0x40
 80023ae:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <HAL_I2C_MspInit+0x184>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023b6:	60bb      	str	r3, [r7, #8]
 80023b8:	68bb      	ldr	r3, [r7, #8]
}
 80023ba:	bf00      	nop
 80023bc:	37c0      	adds	r7, #192	; 0xc0
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40005400 	.word	0x40005400
 80023c8:	40023800 	.word	0x40023800
 80023cc:	40020400 	.word	0x40020400
 80023d0:	40006000 	.word	0x40006000
 80023d4:	40020c00 	.word	0x40020c00

080023d8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a15      	ldr	r2, [pc, #84]	; (800243c <HAL_I2C_MspDeInit+0x64>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d110      	bne.n	800240c <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80023ea:	4b15      	ldr	r3, [pc, #84]	; (8002440 <HAL_I2C_MspDeInit+0x68>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	4a14      	ldr	r2, [pc, #80]	; (8002440 <HAL_I2C_MspDeInit+0x68>)
 80023f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80023f4:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 80023f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023fa:	4812      	ldr	r0, [pc, #72]	; (8002444 <HAL_I2C_MspDeInit+0x6c>)
 80023fc:	f005 ff4c 	bl	8008298 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 8002400:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002404:	480f      	ldr	r0, [pc, #60]	; (8002444 <HAL_I2C_MspDeInit+0x6c>)
 8002406:	f005 ff47 	bl	8008298 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 800240a:	e013      	b.n	8002434 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C4)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a0d      	ldr	r2, [pc, #52]	; (8002448 <HAL_I2C_MspDeInit+0x70>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d10e      	bne.n	8002434 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C4_CLK_DISABLE();
 8002416:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <HAL_I2C_MspDeInit+0x68>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	4a09      	ldr	r2, [pc, #36]	; (8002440 <HAL_I2C_MspDeInit+0x68>)
 800241c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002420:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(AUDIO_SDA_GPIO_Port, AUDIO_SDA_Pin);
 8002422:	2180      	movs	r1, #128	; 0x80
 8002424:	4807      	ldr	r0, [pc, #28]	; (8002444 <HAL_I2C_MspDeInit+0x6c>)
 8002426:	f005 ff37 	bl	8008298 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(AUDIO_SCL_GPIO_Port, AUDIO_SCL_Pin);
 800242a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800242e:	4807      	ldr	r0, [pc, #28]	; (800244c <HAL_I2C_MspDeInit+0x74>)
 8002430:	f005 ff32 	bl	8008298 <HAL_GPIO_DeInit>
}
 8002434:	bf00      	nop
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40005400 	.word	0x40005400
 8002440:	40023800 	.word	0x40023800
 8002444:	40020400 	.word	0x40020400
 8002448:	40006000 	.word	0x40006000
 800244c:	40020c00 	.word	0x40020c00

08002450 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a0d      	ldr	r2, [pc, #52]	; (8002494 <HAL_LTDC_MspInit+0x44>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d113      	bne.n	800248a <HAL_LTDC_MspInit+0x3a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002462:	4b0d      	ldr	r3, [pc, #52]	; (8002498 <HAL_LTDC_MspInit+0x48>)
 8002464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002466:	4a0c      	ldr	r2, [pc, #48]	; (8002498 <HAL_LTDC_MspInit+0x48>)
 8002468:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800246c:	6453      	str	r3, [r2, #68]	; 0x44
 800246e:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <HAL_LTDC_MspInit+0x48>)
 8002470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002472:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 800247a:	2200      	movs	r2, #0
 800247c:	2100      	movs	r1, #0
 800247e:	2058      	movs	r0, #88	; 0x58
 8002480:	f003 f93a 	bl	80056f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002484:	2058      	movs	r0, #88	; 0x58
 8002486:	f003 f953 	bl	8005730 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800248a:	bf00      	nop
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40016800 	.word	0x40016800
 8002498:	40023800 	.word	0x40023800

0800249c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b08c      	sub	sp, #48	; 0x30
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a4:	f107 031c 	add.w	r3, r7, #28
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	60da      	str	r2, [r3, #12]
 80024b2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a4a      	ldr	r2, [pc, #296]	; (80025e4 <HAL_QSPI_MspInit+0x148>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	f040 808e 	bne.w	80025dc <HAL_QSPI_MspInit+0x140>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80024c0:	4b49      	ldr	r3, [pc, #292]	; (80025e8 <HAL_QSPI_MspInit+0x14c>)
 80024c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c4:	4a48      	ldr	r2, [pc, #288]	; (80025e8 <HAL_QSPI_MspInit+0x14c>)
 80024c6:	f043 0302 	orr.w	r3, r3, #2
 80024ca:	6393      	str	r3, [r2, #56]	; 0x38
 80024cc:	4b46      	ldr	r3, [pc, #280]	; (80025e8 <HAL_QSPI_MspInit+0x14c>)
 80024ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	61bb      	str	r3, [r7, #24]
 80024d6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80024d8:	4b43      	ldr	r3, [pc, #268]	; (80025e8 <HAL_QSPI_MspInit+0x14c>)
 80024da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024dc:	4a42      	ldr	r2, [pc, #264]	; (80025e8 <HAL_QSPI_MspInit+0x14c>)
 80024de:	f043 0310 	orr.w	r3, r3, #16
 80024e2:	6313      	str	r3, [r2, #48]	; 0x30
 80024e4:	4b40      	ldr	r3, [pc, #256]	; (80025e8 <HAL_QSPI_MspInit+0x14c>)
 80024e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e8:	f003 0310 	and.w	r3, r3, #16
 80024ec:	617b      	str	r3, [r7, #20]
 80024ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024f0:	4b3d      	ldr	r3, [pc, #244]	; (80025e8 <HAL_QSPI_MspInit+0x14c>)
 80024f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f4:	4a3c      	ldr	r2, [pc, #240]	; (80025e8 <HAL_QSPI_MspInit+0x14c>)
 80024f6:	f043 0302 	orr.w	r3, r3, #2
 80024fa:	6313      	str	r3, [r2, #48]	; 0x30
 80024fc:	4b3a      	ldr	r3, [pc, #232]	; (80025e8 <HAL_QSPI_MspInit+0x14c>)
 80024fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	613b      	str	r3, [r7, #16]
 8002506:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002508:	4b37      	ldr	r3, [pc, #220]	; (80025e8 <HAL_QSPI_MspInit+0x14c>)
 800250a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250c:	4a36      	ldr	r2, [pc, #216]	; (80025e8 <HAL_QSPI_MspInit+0x14c>)
 800250e:	f043 0304 	orr.w	r3, r3, #4
 8002512:	6313      	str	r3, [r2, #48]	; 0x30
 8002514:	4b34      	ldr	r3, [pc, #208]	; (80025e8 <HAL_QSPI_MspInit+0x14c>)
 8002516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002520:	4b31      	ldr	r3, [pc, #196]	; (80025e8 <HAL_QSPI_MspInit+0x14c>)
 8002522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002524:	4a30      	ldr	r2, [pc, #192]	; (80025e8 <HAL_QSPI_MspInit+0x14c>)
 8002526:	f043 0308 	orr.w	r3, r3, #8
 800252a:	6313      	str	r3, [r2, #48]	; 0x30
 800252c:	4b2e      	ldr	r3, [pc, #184]	; (80025e8 <HAL_QSPI_MspInit+0x14c>)
 800252e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002530:	f003 0308 	and.w	r3, r3, #8
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> QUADSPI_BK1_IO1
    PC9     ------> QUADSPI_BK1_IO0
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002538:	2304      	movs	r3, #4
 800253a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253c:	2302      	movs	r3, #2
 800253e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002540:	2300      	movs	r3, #0
 8002542:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002544:	2303      	movs	r3, #3
 8002546:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002548:	2309      	movs	r3, #9
 800254a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800254c:	f107 031c 	add.w	r3, r7, #28
 8002550:	4619      	mov	r1, r3
 8002552:	4826      	ldr	r0, [pc, #152]	; (80025ec <HAL_QSPI_MspInit+0x150>)
 8002554:	f005 fcf4 	bl	8007f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002558:	2340      	movs	r3, #64	; 0x40
 800255a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255c:	2302      	movs	r3, #2
 800255e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002560:	2300      	movs	r3, #0
 8002562:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002564:	2303      	movs	r3, #3
 8002566:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002568:	230a      	movs	r3, #10
 800256a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800256c:	f107 031c 	add.w	r3, r7, #28
 8002570:	4619      	mov	r1, r3
 8002572:	481f      	ldr	r0, [pc, #124]	; (80025f0 <HAL_QSPI_MspInit+0x154>)
 8002574:	f005 fce4 	bl	8007f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D0_Pin;
 8002578:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800257c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257e:	2302      	movs	r3, #2
 8002580:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002582:	2300      	movs	r3, #0
 8002584:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002586:	2303      	movs	r3, #3
 8002588:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800258a:	2309      	movs	r3, #9
 800258c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800258e:	f107 031c 	add.w	r3, r7, #28
 8002592:	4619      	mov	r1, r3
 8002594:	4817      	ldr	r0, [pc, #92]	; (80025f4 <HAL_QSPI_MspInit+0x158>)
 8002596:	f005 fcd3 	bl	8007f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800259a:	2304      	movs	r3, #4
 800259c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259e:	2302      	movs	r3, #2
 80025a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a2:	2300      	movs	r3, #0
 80025a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a6:	2303      	movs	r3, #3
 80025a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80025aa:	2309      	movs	r3, #9
 80025ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ae:	f107 031c 	add.w	r3, r7, #28
 80025b2:	4619      	mov	r1, r3
 80025b4:	480e      	ldr	r0, [pc, #56]	; (80025f0 <HAL_QSPI_MspInit+0x154>)
 80025b6:	f005 fcc3 	bl	8007f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D3_Pin;
 80025ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c0:	2302      	movs	r3, #2
 80025c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c8:	2303      	movs	r3, #3
 80025ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80025cc:	2309      	movs	r3, #9
 80025ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D3_GPIO_Port, &GPIO_InitStruct);
 80025d0:	f107 031c 	add.w	r3, r7, #28
 80025d4:	4619      	mov	r1, r3
 80025d6:	4808      	ldr	r0, [pc, #32]	; (80025f8 <HAL_QSPI_MspInit+0x15c>)
 80025d8:	f005 fcb2 	bl	8007f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80025dc:	bf00      	nop
 80025de:	3730      	adds	r7, #48	; 0x30
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	a0001000 	.word	0xa0001000
 80025e8:	40023800 	.word	0x40023800
 80025ec:	40021000 	.word	0x40021000
 80025f0:	40020400 	.word	0x40020400
 80025f4:	40020800 	.word	0x40020800
 80025f8:	40020c00 	.word	0x40020c00

080025fc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b0ac      	sub	sp, #176	; 0xb0
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002604:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	605a      	str	r2, [r3, #4]
 800260e:	609a      	str	r2, [r3, #8]
 8002610:	60da      	str	r2, [r3, #12]
 8002612:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002614:	f107 030c 	add.w	r3, r7, #12
 8002618:	2290      	movs	r2, #144	; 0x90
 800261a:	2100      	movs	r1, #0
 800261c:	4618      	mov	r0, r3
 800261e:	f00d faff 	bl	800fc20 <memset>
  if(hrtc->Instance==RTC)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a1d      	ldr	r2, [pc, #116]	; (800269c <HAL_RTC_MspInit+0xa0>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d133      	bne.n	8002694 <HAL_RTC_MspInit+0x98>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800262c:	2320      	movs	r3, #32
 800262e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002630:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002634:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002636:	f107 030c 	add.w	r3, r7, #12
 800263a:	4618      	mov	r0, r3
 800263c:	f009 f808 	bl	800b650 <HAL_RCCEx_PeriphCLKConfig>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <HAL_RTC_MspInit+0x4e>
    {
      Error_Handler();
 8002646:	f7ff fb0f 	bl	8001c68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800264a:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <HAL_RTC_MspInit+0xa4>)
 800264c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264e:	4a14      	ldr	r2, [pc, #80]	; (80026a0 <HAL_RTC_MspInit+0xa4>)
 8002650:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002654:	6713      	str	r3, [r2, #112]	; 0x70

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002656:	4b12      	ldr	r3, [pc, #72]	; (80026a0 <HAL_RTC_MspInit+0xa4>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	4a11      	ldr	r2, [pc, #68]	; (80026a0 <HAL_RTC_MspInit+0xa4>)
 800265c:	f043 0304 	orr.w	r3, r3, #4
 8002660:	6313      	str	r3, [r2, #48]	; 0x30
 8002662:	4b0f      	ldr	r3, [pc, #60]	; (80026a0 <HAL_RTC_MspInit+0xa4>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	f003 0304 	and.w	r3, r3, #4
 800266a:	60bb      	str	r3, [r7, #8]
 800266c:	68bb      	ldr	r3, [r7, #8]
    /**RTC GPIO Configuration
    PC13     ------> RTC_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800266e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002672:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002676:	2302      	movs	r3, #2
 8002678:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267c:	2300      	movs	r3, #0
 800267e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002682:	2300      	movs	r3, #0
 8002684:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002688:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800268c:	4619      	mov	r1, r3
 800268e:	4805      	ldr	r0, [pc, #20]	; (80026a4 <HAL_RTC_MspInit+0xa8>)
 8002690:	f005 fc56 	bl	8007f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002694:	bf00      	nop
 8002696:	37b0      	adds	r7, #176	; 0xb0
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40002800 	.word	0x40002800
 80026a0:	40023800 	.word	0x40023800
 80026a4:	40020800 	.word	0x40020800

080026a8 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b0ae      	sub	sp, #184	; 0xb8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	605a      	str	r2, [r3, #4]
 80026ba:	609a      	str	r2, [r3, #8]
 80026bc:	60da      	str	r2, [r3, #12]
 80026be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026c0:	f107 0314 	add.w	r3, r7, #20
 80026c4:	2290      	movs	r2, #144	; 0x90
 80026c6:	2100      	movs	r1, #0
 80026c8:	4618      	mov	r0, r3
 80026ca:	f00d faa9 	bl	800fc20 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 80026d6:	d144      	bne.n	8002762 <HAL_SPDIFRX_MspInit+0xba>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 80026d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026dc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80026de:	23c0      	movs	r3, #192	; 0xc0
 80026e0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80026e2:	2302      	movs	r3, #2
 80026e4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80026e6:	2302      	movs	r3, #2
 80026e8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80026ea:	2302      	movs	r3, #2
 80026ec:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 80026ee:	2301      	movs	r3, #1
 80026f0:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026f2:	f107 0314 	add.w	r3, r7, #20
 80026f6:	4618      	mov	r0, r3
 80026f8:	f008 ffaa 	bl	800b650 <HAL_RCCEx_PeriphCLKConfig>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 8002702:	f7ff fab1 	bl	8001c68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002706:	4b19      	ldr	r3, [pc, #100]	; (800276c <HAL_SPDIFRX_MspInit+0xc4>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	4a18      	ldr	r2, [pc, #96]	; (800276c <HAL_SPDIFRX_MspInit+0xc4>)
 800270c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002710:	6413      	str	r3, [r2, #64]	; 0x40
 8002712:	4b16      	ldr	r3, [pc, #88]	; (800276c <HAL_SPDIFRX_MspInit+0xc4>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800271a:	613b      	str	r3, [r7, #16]
 800271c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800271e:	4b13      	ldr	r3, [pc, #76]	; (800276c <HAL_SPDIFRX_MspInit+0xc4>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	4a12      	ldr	r2, [pc, #72]	; (800276c <HAL_SPDIFRX_MspInit+0xc4>)
 8002724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002728:	6313      	str	r3, [r2, #48]	; 0x30
 800272a:	4b10      	ldr	r3, [pc, #64]	; (800276c <HAL_SPDIFRX_MspInit+0xc4>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PG12     ------> SPDIFRX_IN1
    */
    GPIO_InitStruct.Pin = SPDIF_RX_Pin;
 8002736:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800273a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273e:	2302      	movs	r3, #2
 8002740:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002744:	2300      	movs	r3, #0
 8002746:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274a:	2300      	movs	r3, #0
 800274c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 8002750:	2307      	movs	r3, #7
 8002752:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(SPDIF_RX_GPIO_Port, &GPIO_InitStruct);
 8002756:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800275a:	4619      	mov	r1, r3
 800275c:	4804      	ldr	r0, [pc, #16]	; (8002770 <HAL_SPDIFRX_MspInit+0xc8>)
 800275e:	f005 fbef 	bl	8007f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002762:	bf00      	nop
 8002764:	37b8      	adds	r7, #184	; 0xb8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40023800 	.word	0x40023800
 8002770:	40021800 	.word	0x40021800

08002774 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b08a      	sub	sp, #40	; 0x28
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800277c:	f107 0314 	add.w	r3, r7, #20
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	605a      	str	r2, [r3, #4]
 8002786:	609a      	str	r2, [r3, #8]
 8002788:	60da      	str	r2, [r3, #12]
 800278a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a2e      	ldr	r2, [pc, #184]	; (800284c <HAL_SPI_MspInit+0xd8>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d156      	bne.n	8002844 <HAL_SPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002796:	4b2e      	ldr	r3, [pc, #184]	; (8002850 <HAL_SPI_MspInit+0xdc>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	4a2d      	ldr	r2, [pc, #180]	; (8002850 <HAL_SPI_MspInit+0xdc>)
 800279c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027a0:	6413      	str	r3, [r2, #64]	; 0x40
 80027a2:	4b2b      	ldr	r3, [pc, #172]	; (8002850 <HAL_SPI_MspInit+0xdc>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027aa:	613b      	str	r3, [r7, #16]
 80027ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ae:	4b28      	ldr	r3, [pc, #160]	; (8002850 <HAL_SPI_MspInit+0xdc>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	4a27      	ldr	r2, [pc, #156]	; (8002850 <HAL_SPI_MspInit+0xdc>)
 80027b4:	f043 0301 	orr.w	r3, r3, #1
 80027b8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ba:	4b25      	ldr	r3, [pc, #148]	; (8002850 <HAL_SPI_MspInit+0xdc>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027c6:	4b22      	ldr	r3, [pc, #136]	; (8002850 <HAL_SPI_MspInit+0xdc>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	4a21      	ldr	r2, [pc, #132]	; (8002850 <HAL_SPI_MspInit+0xdc>)
 80027cc:	f043 0302 	orr.w	r3, r3, #2
 80027d0:	6313      	str	r3, [r2, #48]	; 0x30
 80027d2:	4b1f      	ldr	r3, [pc, #124]	; (8002850 <HAL_SPI_MspInit+0xdc>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	60bb      	str	r3, [r7, #8]
 80027dc:	68bb      	ldr	r3, [r7, #8]
    PA12     ------> SPI2_SCK
    PA11     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_SCK_Pin;
 80027de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e4:	2302      	movs	r3, #2
 80027e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e8:	2300      	movs	r3, #0
 80027ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ec:	2300      	movs	r3, #0
 80027ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80027f0:	2305      	movs	r3, #5
 80027f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_D13_SCK_GPIO_Port, &GPIO_InitStruct);
 80027f4:	f107 0314 	add.w	r3, r7, #20
 80027f8:	4619      	mov	r1, r3
 80027fa:	4816      	ldr	r0, [pc, #88]	; (8002854 <HAL_SPI_MspInit+0xe0>)
 80027fc:	f005 fba0 	bl	8007f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 8002800:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002804:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002806:	2302      	movs	r3, #2
 8002808:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280a:	2300      	movs	r3, #0
 800280c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800280e:	2303      	movs	r3, #3
 8002810:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002812:	2305      	movs	r3, #5
 8002814:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8002816:	f107 0314 	add.w	r3, r7, #20
 800281a:	4619      	mov	r1, r3
 800281c:	480d      	ldr	r0, [pc, #52]	; (8002854 <HAL_SPI_MspInit+0xe0>)
 800281e:	f005 fb8f 	bl	8007f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002822:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002826:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002828:	2302      	movs	r3, #2
 800282a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282c:	2300      	movs	r3, #0
 800282e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002830:	2300      	movs	r3, #0
 8002832:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002834:	2305      	movs	r3, #5
 8002836:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002838:	f107 0314 	add.w	r3, r7, #20
 800283c:	4619      	mov	r1, r3
 800283e:	4806      	ldr	r0, [pc, #24]	; (8002858 <HAL_SPI_MspInit+0xe4>)
 8002840:	f005 fb7e 	bl	8007f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002844:	bf00      	nop
 8002846:	3728      	adds	r7, #40	; 0x28
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	40003800 	.word	0x40003800
 8002850:	40023800 	.word	0x40023800
 8002854:	40020000 	.word	0x40020000
 8002858:	40020400 	.word	0x40020400

0800285c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800285c:	b480      	push	{r7}
 800285e:	b087      	sub	sp, #28
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a1c      	ldr	r2, [pc, #112]	; (80028dc <HAL_TIM_Base_MspInit+0x80>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d10c      	bne.n	8002888 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800286e:	4b1c      	ldr	r3, [pc, #112]	; (80028e0 <HAL_TIM_Base_MspInit+0x84>)
 8002870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002872:	4a1b      	ldr	r2, [pc, #108]	; (80028e0 <HAL_TIM_Base_MspInit+0x84>)
 8002874:	f043 0301 	orr.w	r3, r3, #1
 8002878:	6453      	str	r3, [r2, #68]	; 0x44
 800287a:	4b19      	ldr	r3, [pc, #100]	; (80028e0 <HAL_TIM_Base_MspInit+0x84>)
 800287c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	617b      	str	r3, [r7, #20]
 8002884:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002886:	e022      	b.n	80028ce <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM10)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a15      	ldr	r2, [pc, #84]	; (80028e4 <HAL_TIM_Base_MspInit+0x88>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d10c      	bne.n	80028ac <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002892:	4b13      	ldr	r3, [pc, #76]	; (80028e0 <HAL_TIM_Base_MspInit+0x84>)
 8002894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002896:	4a12      	ldr	r2, [pc, #72]	; (80028e0 <HAL_TIM_Base_MspInit+0x84>)
 8002898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800289c:	6453      	str	r3, [r2, #68]	; 0x44
 800289e:	4b10      	ldr	r3, [pc, #64]	; (80028e0 <HAL_TIM_Base_MspInit+0x84>)
 80028a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a6:	613b      	str	r3, [r7, #16]
 80028a8:	693b      	ldr	r3, [r7, #16]
}
 80028aa:	e010      	b.n	80028ce <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM11)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a0d      	ldr	r2, [pc, #52]	; (80028e8 <HAL_TIM_Base_MspInit+0x8c>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d10b      	bne.n	80028ce <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80028b6:	4b0a      	ldr	r3, [pc, #40]	; (80028e0 <HAL_TIM_Base_MspInit+0x84>)
 80028b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ba:	4a09      	ldr	r2, [pc, #36]	; (80028e0 <HAL_TIM_Base_MspInit+0x84>)
 80028bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028c0:	6453      	str	r3, [r2, #68]	; 0x44
 80028c2:	4b07      	ldr	r3, [pc, #28]	; (80028e0 <HAL_TIM_Base_MspInit+0x84>)
 80028c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	68fb      	ldr	r3, [r7, #12]
}
 80028ce:	bf00      	nop
 80028d0:	371c      	adds	r7, #28
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	40010000 	.word	0x40010000
 80028e0:	40023800 	.word	0x40023800
 80028e4:	40014400 	.word	0x40014400
 80028e8:	40014800 	.word	0x40014800

080028ec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a13      	ldr	r2, [pc, #76]	; (8002948 <HAL_TIM_PWM_MspInit+0x5c>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d10c      	bne.n	8002918 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028fe:	4b13      	ldr	r3, [pc, #76]	; (800294c <HAL_TIM_PWM_MspInit+0x60>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	4a12      	ldr	r2, [pc, #72]	; (800294c <HAL_TIM_PWM_MspInit+0x60>)
 8002904:	f043 0302 	orr.w	r3, r3, #2
 8002908:	6413      	str	r3, [r2, #64]	; 0x40
 800290a:	4b10      	ldr	r3, [pc, #64]	; (800294c <HAL_TIM_PWM_MspInit+0x60>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002916:	e010      	b.n	800293a <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM12)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a0c      	ldr	r2, [pc, #48]	; (8002950 <HAL_TIM_PWM_MspInit+0x64>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d10b      	bne.n	800293a <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002922:	4b0a      	ldr	r3, [pc, #40]	; (800294c <HAL_TIM_PWM_MspInit+0x60>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	4a09      	ldr	r2, [pc, #36]	; (800294c <HAL_TIM_PWM_MspInit+0x60>)
 8002928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800292c:	6413      	str	r3, [r2, #64]	; 0x40
 800292e:	4b07      	ldr	r3, [pc, #28]	; (800294c <HAL_TIM_PWM_MspInit+0x60>)
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002936:	60bb      	str	r3, [r7, #8]
 8002938:	68bb      	ldr	r3, [r7, #8]
}
 800293a:	bf00      	nop
 800293c:	3714      	adds	r7, #20
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	40000400 	.word	0x40000400
 800294c:	40023800 	.word	0x40023800
 8002950:	40001800 	.word	0x40001800

08002954 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b08c      	sub	sp, #48	; 0x30
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800295c:	f107 031c 	add.w	r3, r7, #28
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	605a      	str	r2, [r3, #4]
 8002966:	609a      	str	r2, [r3, #8]
 8002968:	60da      	str	r2, [r3, #12]
 800296a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a44      	ldr	r2, [pc, #272]	; (8002a84 <HAL_TIM_MspPostInit+0x130>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d11d      	bne.n	80029b2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002976:	4b44      	ldr	r3, [pc, #272]	; (8002a88 <HAL_TIM_MspPostInit+0x134>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	4a43      	ldr	r2, [pc, #268]	; (8002a88 <HAL_TIM_MspPostInit+0x134>)
 800297c:	f043 0304 	orr.w	r3, r3, #4
 8002980:	6313      	str	r3, [r2, #48]	; 0x30
 8002982:	4b41      	ldr	r3, [pc, #260]	; (8002a88 <HAL_TIM_MspPostInit+0x134>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	f003 0304 	and.w	r3, r3, #4
 800298a:	61bb      	str	r3, [r7, #24]
 800298c:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = ARD_D5_PWM_Pin;
 800298e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002994:	2302      	movs	r3, #2
 8002996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002998:	2300      	movs	r3, #0
 800299a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299c:	2300      	movs	r3, #0
 800299e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80029a0:	2302      	movs	r3, #2
 80029a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D5_PWM_GPIO_Port, &GPIO_InitStruct);
 80029a4:	f107 031c 	add.w	r3, r7, #28
 80029a8:	4619      	mov	r1, r3
 80029aa:	4838      	ldr	r0, [pc, #224]	; (8002a8c <HAL_TIM_MspPostInit+0x138>)
 80029ac:	f005 fac8 	bl	8007f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80029b0:	e064      	b.n	8002a7c <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM10)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a36      	ldr	r2, [pc, #216]	; (8002a90 <HAL_TIM_MspPostInit+0x13c>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d11c      	bne.n	80029f6 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80029bc:	4b32      	ldr	r3, [pc, #200]	; (8002a88 <HAL_TIM_MspPostInit+0x134>)
 80029be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c0:	4a31      	ldr	r2, [pc, #196]	; (8002a88 <HAL_TIM_MspPostInit+0x134>)
 80029c2:	f043 0320 	orr.w	r3, r3, #32
 80029c6:	6313      	str	r3, [r2, #48]	; 0x30
 80029c8:	4b2f      	ldr	r3, [pc, #188]	; (8002a88 <HAL_TIM_MspPostInit+0x134>)
 80029ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029cc:	f003 0320 	and.w	r3, r3, #32
 80029d0:	617b      	str	r3, [r7, #20]
 80029d2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARD_D3_PWM_Pin;
 80029d4:	2340      	movs	r3, #64	; 0x40
 80029d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d8:	2302      	movs	r3, #2
 80029da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029dc:	2300      	movs	r3, #0
 80029de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e0:	2300      	movs	r3, #0
 80029e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80029e4:	2303      	movs	r3, #3
 80029e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 80029e8:	f107 031c 	add.w	r3, r7, #28
 80029ec:	4619      	mov	r1, r3
 80029ee:	4829      	ldr	r0, [pc, #164]	; (8002a94 <HAL_TIM_MspPostInit+0x140>)
 80029f0:	f005 faa6 	bl	8007f40 <HAL_GPIO_Init>
}
 80029f4:	e042      	b.n	8002a7c <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM11)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a27      	ldr	r2, [pc, #156]	; (8002a98 <HAL_TIM_MspPostInit+0x144>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d11c      	bne.n	8002a3a <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a00:	4b21      	ldr	r3, [pc, #132]	; (8002a88 <HAL_TIM_MspPostInit+0x134>)
 8002a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a04:	4a20      	ldr	r2, [pc, #128]	; (8002a88 <HAL_TIM_MspPostInit+0x134>)
 8002a06:	f043 0320 	orr.w	r3, r3, #32
 8002a0a:	6313      	str	r3, [r2, #48]	; 0x30
 8002a0c:	4b1e      	ldr	r3, [pc, #120]	; (8002a88 <HAL_TIM_MspPostInit+0x134>)
 8002a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a10:	f003 0320 	and.w	r3, r3, #32
 8002a14:	613b      	str	r3, [r7, #16]
 8002a16:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARD_D6_PWM_Pin;
 8002a18:	2380      	movs	r3, #128	; 0x80
 8002a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a20:	2300      	movs	r3, #0
 8002a22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a24:	2300      	movs	r3, #0
 8002a26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D6_PWM_GPIO_Port, &GPIO_InitStruct);
 8002a2c:	f107 031c 	add.w	r3, r7, #28
 8002a30:	4619      	mov	r1, r3
 8002a32:	4818      	ldr	r0, [pc, #96]	; (8002a94 <HAL_TIM_MspPostInit+0x140>)
 8002a34:	f005 fa84 	bl	8007f40 <HAL_GPIO_Init>
}
 8002a38:	e020      	b.n	8002a7c <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM12)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a17      	ldr	r2, [pc, #92]	; (8002a9c <HAL_TIM_MspPostInit+0x148>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d11b      	bne.n	8002a7c <HAL_TIM_MspPostInit+0x128>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a44:	4b10      	ldr	r3, [pc, #64]	; (8002a88 <HAL_TIM_MspPostInit+0x134>)
 8002a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a48:	4a0f      	ldr	r2, [pc, #60]	; (8002a88 <HAL_TIM_MspPostInit+0x134>)
 8002a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a4e:	6313      	str	r3, [r2, #48]	; 0x30
 8002a50:	4b0d      	ldr	r3, [pc, #52]	; (8002a88 <HAL_TIM_MspPostInit+0x134>)
 8002a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002a5c:	2340      	movs	r3, #64	; 0x40
 8002a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a60:	2302      	movs	r3, #2
 8002a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a64:	2300      	movs	r3, #0
 8002a66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002a6c:	2309      	movs	r3, #9
 8002a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002a70:	f107 031c 	add.w	r3, r7, #28
 8002a74:	4619      	mov	r1, r3
 8002a76:	480a      	ldr	r0, [pc, #40]	; (8002aa0 <HAL_TIM_MspPostInit+0x14c>)
 8002a78:	f005 fa62 	bl	8007f40 <HAL_GPIO_Init>
}
 8002a7c:	bf00      	nop
 8002a7e:	3730      	adds	r7, #48	; 0x30
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40000400 	.word	0x40000400
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	40020800 	.word	0x40020800
 8002a90:	40014400 	.word	0x40014400
 8002a94:	40021400 	.word	0x40021400
 8002a98:	40014800 	.word	0x40014800
 8002a9c:	40001800 	.word	0x40001800
 8002aa0:	40021c00 	.word	0x40021c00

08002aa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b0b2      	sub	sp, #200	; 0xc8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aac:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	605a      	str	r2, [r3, #4]
 8002ab6:	609a      	str	r2, [r3, #8]
 8002ab8:	60da      	str	r2, [r3, #12]
 8002aba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ac0:	2290      	movs	r2, #144	; 0x90
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f00d f8ab 	bl	800fc20 <memset>
  if(huart->Instance==UART5)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a7f      	ldr	r2, [pc, #508]	; (8002ccc <HAL_UART_MspInit+0x228>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d15e      	bne.n	8002b92 <HAL_UART_MspInit+0xee>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002ad4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ad8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002ada:	2300      	movs	r3, #0
 8002adc:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f008 fdb4 	bl	800b650 <HAL_RCCEx_PeriphCLKConfig>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002aee:	f7ff f8bb 	bl	8001c68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002af2:	4b77      	ldr	r3, [pc, #476]	; (8002cd0 <HAL_UART_MspInit+0x22c>)
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	4a76      	ldr	r2, [pc, #472]	; (8002cd0 <HAL_UART_MspInit+0x22c>)
 8002af8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002afc:	6413      	str	r3, [r2, #64]	; 0x40
 8002afe:	4b74      	ldr	r3, [pc, #464]	; (8002cd0 <HAL_UART_MspInit+0x22c>)
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b06:	623b      	str	r3, [r7, #32]
 8002b08:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b0a:	4b71      	ldr	r3, [pc, #452]	; (8002cd0 <HAL_UART_MspInit+0x22c>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	4a70      	ldr	r2, [pc, #448]	; (8002cd0 <HAL_UART_MspInit+0x22c>)
 8002b10:	f043 0304 	orr.w	r3, r3, #4
 8002b14:	6313      	str	r3, [r2, #48]	; 0x30
 8002b16:	4b6e      	ldr	r3, [pc, #440]	; (8002cd0 <HAL_UART_MspInit+0x22c>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	f003 0304 	and.w	r3, r3, #4
 8002b1e:	61fb      	str	r3, [r7, #28]
 8002b20:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b22:	4b6b      	ldr	r3, [pc, #428]	; (8002cd0 <HAL_UART_MspInit+0x22c>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	4a6a      	ldr	r2, [pc, #424]	; (8002cd0 <HAL_UART_MspInit+0x22c>)
 8002b28:	f043 0308 	orr.w	r3, r3, #8
 8002b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2e:	4b68      	ldr	r3, [pc, #416]	; (8002cd0 <HAL_UART_MspInit+0x22c>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	f003 0308 	and.w	r3, r3, #8
 8002b36:	61bb      	str	r3, [r7, #24]
 8002b38:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = WIFI_RX_Pin;
 8002b3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b42:	2302      	movs	r3, #2
 8002b44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002b54:	2308      	movs	r3, #8
 8002b56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(WIFI_RX_GPIO_Port, &GPIO_InitStruct);
 8002b5a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002b5e:	4619      	mov	r1, r3
 8002b60:	485c      	ldr	r0, [pc, #368]	; (8002cd4 <HAL_UART_MspInit+0x230>)
 8002b62:	f005 f9ed 	bl	8007f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WIFI_TX_Pin;
 8002b66:	2304      	movs	r3, #4
 8002b68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b72:	2300      	movs	r3, #0
 8002b74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002b7e:	2308      	movs	r3, #8
 8002b80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(WIFI_TX_GPIO_Port, &GPIO_InitStruct);
 8002b84:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4853      	ldr	r0, [pc, #332]	; (8002cd8 <HAL_UART_MspInit+0x234>)
 8002b8c:	f005 f9d8 	bl	8007f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002b90:	e098      	b.n	8002cc4 <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART1)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a51      	ldr	r2, [pc, #324]	; (8002cdc <HAL_UART_MspInit+0x238>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d152      	bne.n	8002c42 <HAL_UART_MspInit+0x19e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b9c:	2340      	movs	r3, #64	; 0x40
 8002b9e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ba4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f008 fd51 	bl	800b650 <HAL_RCCEx_PeriphCLKConfig>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <HAL_UART_MspInit+0x114>
      Error_Handler();
 8002bb4:	f7ff f858 	bl	8001c68 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bb8:	4b45      	ldr	r3, [pc, #276]	; (8002cd0 <HAL_UART_MspInit+0x22c>)
 8002bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbc:	4a44      	ldr	r2, [pc, #272]	; (8002cd0 <HAL_UART_MspInit+0x22c>)
 8002bbe:	f043 0310 	orr.w	r3, r3, #16
 8002bc2:	6453      	str	r3, [r2, #68]	; 0x44
 8002bc4:	4b42      	ldr	r3, [pc, #264]	; (8002cd0 <HAL_UART_MspInit+0x22c>)
 8002bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc8:	f003 0310 	and.w	r3, r3, #16
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd0:	4b3f      	ldr	r3, [pc, #252]	; (8002cd0 <HAL_UART_MspInit+0x22c>)
 8002bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd4:	4a3e      	ldr	r2, [pc, #248]	; (8002cd0 <HAL_UART_MspInit+0x22c>)
 8002bd6:	f043 0301 	orr.w	r3, r3, #1
 8002bda:	6313      	str	r3, [r2, #48]	; 0x30
 8002bdc:	4b3c      	ldr	r3, [pc, #240]	; (8002cd0 <HAL_UART_MspInit+0x22c>)
 8002bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	613b      	str	r3, [r7, #16]
 8002be6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002be8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c02:	2307      	movs	r3, #7
 8002c04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002c08:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4834      	ldr	r0, [pc, #208]	; (8002ce0 <HAL_UART_MspInit+0x23c>)
 8002c10:	f005 f996 	bl	8007f40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002c14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c22:	2300      	movs	r3, #0
 8002c24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c2e:	2307      	movs	r3, #7
 8002c30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002c34:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4829      	ldr	r0, [pc, #164]	; (8002ce0 <HAL_UART_MspInit+0x23c>)
 8002c3c:	f005 f980 	bl	8007f40 <HAL_GPIO_Init>
}
 8002c40:	e040      	b.n	8002cc4 <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART6)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a27      	ldr	r2, [pc, #156]	; (8002ce4 <HAL_UART_MspInit+0x240>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d13b      	bne.n	8002cc4 <HAL_UART_MspInit+0x220>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002c4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c50:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8002c52:	2300      	movs	r3, #0
 8002c54:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f008 fcf8 	bl	800b650 <HAL_RCCEx_PeriphCLKConfig>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <HAL_UART_MspInit+0x1c6>
      Error_Handler();
 8002c66:	f7fe ffff 	bl	8001c68 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002c6a:	4b19      	ldr	r3, [pc, #100]	; (8002cd0 <HAL_UART_MspInit+0x22c>)
 8002c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6e:	4a18      	ldr	r2, [pc, #96]	; (8002cd0 <HAL_UART_MspInit+0x22c>)
 8002c70:	f043 0320 	orr.w	r3, r3, #32
 8002c74:	6453      	str	r3, [r2, #68]	; 0x44
 8002c76:	4b16      	ldr	r3, [pc, #88]	; (8002cd0 <HAL_UART_MspInit+0x22c>)
 8002c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7a:	f003 0320 	and.w	r3, r3, #32
 8002c7e:	60fb      	str	r3, [r7, #12]
 8002c80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c82:	4b13      	ldr	r3, [pc, #76]	; (8002cd0 <HAL_UART_MspInit+0x22c>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	4a12      	ldr	r2, [pc, #72]	; (8002cd0 <HAL_UART_MspInit+0x22c>)
 8002c88:	f043 0304 	orr.w	r3, r3, #4
 8002c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c8e:	4b10      	ldr	r3, [pc, #64]	; (8002cd0 <HAL_UART_MspInit+0x22c>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c92:	f003 0304 	and.w	r3, r3, #4
 8002c96:	60bb      	str	r3, [r7, #8]
 8002c98:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_D0_RX_Pin|ARDUINO_TX_D1_Pin;
 8002c9a:	23c0      	movs	r3, #192	; 0xc0
 8002c9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cac:	2303      	movs	r3, #3
 8002cae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002cb2:	2308      	movs	r3, #8
 8002cb4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cb8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4805      	ldr	r0, [pc, #20]	; (8002cd4 <HAL_UART_MspInit+0x230>)
 8002cc0:	f005 f93e 	bl	8007f40 <HAL_GPIO_Init>
}
 8002cc4:	bf00      	nop
 8002cc6:	37c8      	adds	r7, #200	; 0xc8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40005000 	.word	0x40005000
 8002cd0:	40023800 	.word	0x40023800
 8002cd4:	40020800 	.word	0x40020800
 8002cd8:	40020c00 	.word	0x40020c00
 8002cdc:	40011000 	.word	0x40011000
 8002ce0:	40020000 	.word	0x40020000
 8002ce4:	40011400 	.word	0x40011400

08002ce8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08e      	sub	sp, #56	; 0x38
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	605a      	str	r2, [r3, #4]
 8002cfa:	609a      	str	r2, [r3, #8]
 8002cfc:	60da      	str	r2, [r3, #12]
 8002cfe:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_HS)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a5a      	ldr	r2, [pc, #360]	; (8002e70 <HAL_PCD_MspInit+0x188>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	f040 80ae 	bne.w	8002e68 <HAL_PCD_MspInit+0x180>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d0c:	4b59      	ldr	r3, [pc, #356]	; (8002e74 <HAL_PCD_MspInit+0x18c>)
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d10:	4a58      	ldr	r2, [pc, #352]	; (8002e74 <HAL_PCD_MspInit+0x18c>)
 8002d12:	f043 0302 	orr.w	r3, r3, #2
 8002d16:	6313      	str	r3, [r2, #48]	; 0x30
 8002d18:	4b56      	ldr	r3, [pc, #344]	; (8002e74 <HAL_PCD_MspInit+0x18c>)
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	623b      	str	r3, [r7, #32]
 8002d22:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002d24:	4b53      	ldr	r3, [pc, #332]	; (8002e74 <HAL_PCD_MspInit+0x18c>)
 8002d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d28:	4a52      	ldr	r2, [pc, #328]	; (8002e74 <HAL_PCD_MspInit+0x18c>)
 8002d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d2e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d30:	4b50      	ldr	r3, [pc, #320]	; (8002e74 <HAL_PCD_MspInit+0x18c>)
 8002d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d38:	61fb      	str	r3, [r7, #28]
 8002d3a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d3c:	4b4d      	ldr	r3, [pc, #308]	; (8002e74 <HAL_PCD_MspInit+0x18c>)
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d40:	4a4c      	ldr	r2, [pc, #304]	; (8002e74 <HAL_PCD_MspInit+0x18c>)
 8002d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d46:	6313      	str	r3, [r2, #48]	; 0x30
 8002d48:	4b4a      	ldr	r3, [pc, #296]	; (8002e74 <HAL_PCD_MspInit+0x18c>)
 8002d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d50:	61bb      	str	r3, [r7, #24]
 8002d52:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d54:	4b47      	ldr	r3, [pc, #284]	; (8002e74 <HAL_PCD_MspInit+0x18c>)
 8002d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d58:	4a46      	ldr	r2, [pc, #280]	; (8002e74 <HAL_PCD_MspInit+0x18c>)
 8002d5a:	f043 0304 	orr.w	r3, r3, #4
 8002d5e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d60:	4b44      	ldr	r3, [pc, #272]	; (8002e74 <HAL_PCD_MspInit+0x18c>)
 8002d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	617b      	str	r3, [r7, #20]
 8002d6a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d6c:	4b41      	ldr	r3, [pc, #260]	; (8002e74 <HAL_PCD_MspInit+0x18c>)
 8002d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d70:	4a40      	ldr	r2, [pc, #256]	; (8002e74 <HAL_PCD_MspInit+0x18c>)
 8002d72:	f043 0301 	orr.w	r3, r3, #1
 8002d76:	6313      	str	r3, [r2, #48]	; 0x30
 8002d78:	4b3e      	ldr	r3, [pc, #248]	; (8002e74 <HAL_PCD_MspInit+0x18c>)
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	613b      	str	r3, [r7, #16]
 8002d82:	693b      	ldr	r3, [r7, #16]
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB1     ------> USB_OTG_HS_ULPI_D2
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB11     ------> USB_OTG_HS_ULPI_D4
    */
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8002d84:	f643 4323 	movw	r3, #15395	; 0x3c23
 8002d88:	627b      	str	r3, [r7, #36]	; 0x24
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d92:	2303      	movs	r3, #3
 8002d94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002d96:	230a      	movs	r3, #10
 8002d98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4835      	ldr	r0, [pc, #212]	; (8002e78 <HAL_PCD_MspInit+0x190>)
 8002da2:	f005 f8cd 	bl	8007f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8002da6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dac:	2302      	movs	r3, #2
 8002dae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db0:	2300      	movs	r3, #0
 8002db2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002db4:	2303      	movs	r3, #3
 8002db6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002db8:	230a      	movs	r3, #10
 8002dba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8002dbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	482e      	ldr	r0, [pc, #184]	; (8002e7c <HAL_PCD_MspInit+0x194>)
 8002dc4:	f005 f8bc 	bl	8007f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002dc8:	2310      	movs	r3, #16
 8002dca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dcc:	2302      	movs	r3, #2
 8002dce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002dd8:	230a      	movs	r3, #10
 8002dda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002de0:	4619      	mov	r1, r3
 8002de2:	4827      	ldr	r0, [pc, #156]	; (8002e80 <HAL_PCD_MspInit+0x198>)
 8002de4:	f005 f8ac 	bl	8007f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8002de8:	2301      	movs	r3, #1
 8002dea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dec:	2302      	movs	r3, #2
 8002dee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002df4:	2303      	movs	r3, #3
 8002df6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002df8:	230a      	movs	r3, #10
 8002dfa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8002dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e00:	4619      	mov	r1, r3
 8002e02:	4820      	ldr	r0, [pc, #128]	; (8002e84 <HAL_PCD_MspInit+0x19c>)
 8002e04:	f005 f89c 	bl	8007f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002e08:	2328      	movs	r3, #40	; 0x28
 8002e0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e10:	2300      	movs	r3, #0
 8002e12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e14:	2303      	movs	r3, #3
 8002e16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002e18:	230a      	movs	r3, #10
 8002e1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e20:	4619      	mov	r1, r3
 8002e22:	4819      	ldr	r0, [pc, #100]	; (8002e88 <HAL_PCD_MspInit+0x1a0>)
 8002e24:	f005 f88c 	bl	8007f40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8002e28:	4b12      	ldr	r3, [pc, #72]	; (8002e74 <HAL_PCD_MspInit+0x18c>)
 8002e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2c:	4a11      	ldr	r2, [pc, #68]	; (8002e74 <HAL_PCD_MspInit+0x18c>)
 8002e2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e32:	6313      	str	r3, [r2, #48]	; 0x30
 8002e34:	4b0f      	ldr	r3, [pc, #60]	; (8002e74 <HAL_PCD_MspInit+0x18c>)
 8002e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8002e40:	4b0c      	ldr	r3, [pc, #48]	; (8002e74 <HAL_PCD_MspInit+0x18c>)
 8002e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e44:	4a0b      	ldr	r2, [pc, #44]	; (8002e74 <HAL_PCD_MspInit+0x18c>)
 8002e46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002e4a:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4c:	4b09      	ldr	r3, [pc, #36]	; (8002e74 <HAL_PCD_MspInit+0x18c>)
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e50:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002e54:	60bb      	str	r3, [r7, #8]
 8002e56:	68bb      	ldr	r3, [r7, #8]
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8002e58:	2200      	movs	r2, #0
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	204d      	movs	r0, #77	; 0x4d
 8002e5e:	f002 fc4b 	bl	80056f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8002e62:	204d      	movs	r0, #77	; 0x4d
 8002e64:	f002 fc64 	bl	8005730 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 8002e68:	bf00      	nop
 8002e6a:	3738      	adds	r7, #56	; 0x38
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40040000 	.word	0x40040000
 8002e74:	40023800 	.word	0x40023800
 8002e78:	40020400 	.word	0x40020400
 8002e7c:	40022000 	.word	0x40022000
 8002e80:	40021c00 	.word	0x40021c00
 8002e84:	40020800 	.word	0x40020800
 8002e88:	40020000 	.word	0x40020000

08002e8c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002e92:	1d3b      	adds	r3, r7, #4
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	605a      	str	r2, [r3, #4]
 8002e9a:	609a      	str	r2, [r3, #8]
 8002e9c:	60da      	str	r2, [r3, #12]
 8002e9e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002ea0:	4b3b      	ldr	r3, [pc, #236]	; (8002f90 <HAL_FMC_MspInit+0x104>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d16f      	bne.n	8002f88 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8002ea8:	4b39      	ldr	r3, [pc, #228]	; (8002f90 <HAL_FMC_MspInit+0x104>)
 8002eaa:	2201      	movs	r2, #1
 8002eac:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002eae:	4b39      	ldr	r3, [pc, #228]	; (8002f94 <HAL_FMC_MspInit+0x108>)
 8002eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb2:	4a38      	ldr	r2, [pc, #224]	; (8002f94 <HAL_FMC_MspInit+0x108>)
 8002eb4:	f043 0301 	orr.w	r3, r3, #1
 8002eb8:	6393      	str	r3, [r2, #56]	; 0x38
 8002eba:	4b36      	ldr	r3, [pc, #216]	; (8002f94 <HAL_FMC_MspInit+0x108>)
 8002ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	603b      	str	r3, [r7, #0]
 8002ec4:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8002ec6:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002eca:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ecc:	2302      	movs	r3, #2
 8002ece:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ed8:	230c      	movs	r3, #12
 8002eda:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002edc:	1d3b      	adds	r3, r7, #4
 8002ede:	4619      	mov	r1, r3
 8002ee0:	482d      	ldr	r0, [pc, #180]	; (8002f98 <HAL_FMC_MspInit+0x10c>)
 8002ee2:	f005 f82d 	bl	8007f40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A12_Pin
 8002ee6:	f248 1337 	movw	r3, #33079	; 0x8137
 8002eea:	607b      	str	r3, [r7, #4]
                          |FMC_A10_Pin|FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eec:	2302      	movs	r3, #2
 8002eee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ef8:	230c      	movs	r3, #12
 8002efa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002efc:	1d3b      	adds	r3, r7, #4
 8002efe:	4619      	mov	r1, r3
 8002f00:	4826      	ldr	r0, [pc, #152]	; (8002f9c <HAL_FMC_MspInit+0x110>)
 8002f02:	f005 f81d 	bl	8007f40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8002f06:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002f0a:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f10:	2300      	movs	r3, #0
 8002f12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f14:	2303      	movs	r3, #3
 8002f16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f18:	230c      	movs	r3, #12
 8002f1a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f1c:	1d3b      	adds	r3, r7, #4
 8002f1e:	4619      	mov	r1, r3
 8002f20:	481f      	ldr	r0, [pc, #124]	; (8002fa0 <HAL_FMC_MspInit+0x114>)
 8002f22:	f005 f80d 	bl	8007f40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8002f26:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8002f2a:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f30:	2300      	movs	r3, #0
 8002f32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f34:	2303      	movs	r3, #3
 8002f36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f38:	230c      	movs	r3, #12
 8002f3a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002f3c:	1d3b      	adds	r3, r7, #4
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4818      	ldr	r0, [pc, #96]	; (8002fa4 <HAL_FMC_MspInit+0x118>)
 8002f42:	f004 fffd 	bl	8007f40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8002f46:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002f4a:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f50:	2300      	movs	r3, #0
 8002f52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f54:	2303      	movs	r3, #3
 8002f56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f58:	230c      	movs	r3, #12
 8002f5a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f5c:	1d3b      	adds	r3, r7, #4
 8002f5e:	4619      	mov	r1, r3
 8002f60:	4811      	ldr	r0, [pc, #68]	; (8002fa8 <HAL_FMC_MspInit+0x11c>)
 8002f62:	f004 ffed 	bl	8007f40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|FMC_SDNME_Pin
 8002f66:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8002f6a:	607b      	str	r3, [r7, #4]
                          |FMC_SDNE0_Pin|FMC_SDCKE0_Pin|D20_Pin|FMC_D_7_Pin
                          |FMC_D19_Pin|FMC_D16_Pin|FMC_D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f74:	2303      	movs	r3, #3
 8002f76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f78:	230c      	movs	r3, #12
 8002f7a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002f7c:	1d3b      	adds	r3, r7, #4
 8002f7e:	4619      	mov	r1, r3
 8002f80:	480a      	ldr	r0, [pc, #40]	; (8002fac <HAL_FMC_MspInit+0x120>)
 8002f82:	f004 ffdd 	bl	8007f40 <HAL_GPIO_Init>
 8002f86:	e000      	b.n	8002f8a <HAL_FMC_MspInit+0xfe>
    return;
 8002f88:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002f8a:	3718      	adds	r7, #24
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	20001100 	.word	0x20001100
 8002f94:	40023800 	.word	0x40023800
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	40021800 	.word	0x40021800
 8002fa0:	40020c00 	.word	0x40020c00
 8002fa4:	40022000 	.word	0x40022000
 8002fa8:	40021400 	.word	0x40021400
 8002fac:	40021c00 	.word	0x40021c00

08002fb0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002fb8:	f7ff ff68 	bl	8002e8c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002fbc:	bf00      	nop
 8002fbe:	3708      	adds	r7, #8
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b08a      	sub	sp, #40	; 0x28
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a48      	ldr	r2, [pc, #288]	; (80030f4 <HAL_SAI_MspInit+0x130>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d134      	bne.n	8003040 <HAL_SAI_MspInit+0x7c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8002fd6:	4b48      	ldr	r3, [pc, #288]	; (80030f8 <HAL_SAI_MspInit+0x134>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10b      	bne.n	8002ff6 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002fde:	4b47      	ldr	r3, [pc, #284]	; (80030fc <HAL_SAI_MspInit+0x138>)
 8002fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe2:	4a46      	ldr	r2, [pc, #280]	; (80030fc <HAL_SAI_MspInit+0x138>)
 8002fe4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fe8:	6453      	str	r3, [r2, #68]	; 0x44
 8002fea:	4b44      	ldr	r3, [pc, #272]	; (80030fc <HAL_SAI_MspInit+0x138>)
 8002fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ff2:	613b      	str	r3, [r7, #16]
 8002ff4:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8002ff6:	4b40      	ldr	r3, [pc, #256]	; (80030f8 <HAL_SAI_MspInit+0x134>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	4a3e      	ldr	r2, [pc, #248]	; (80030f8 <HAL_SAI_MspInit+0x134>)
 8002ffe:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SCKA_Pin|SAI1_SDA_Pin;
 8003000:	2370      	movs	r3, #112	; 0x70
 8003002:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003004:	2302      	movs	r3, #2
 8003006:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003008:	2300      	movs	r3, #0
 800300a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800300c:	2300      	movs	r3, #0
 800300e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8003010:	2306      	movs	r3, #6
 8003012:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003014:	f107 0314 	add.w	r3, r7, #20
 8003018:	4619      	mov	r1, r3
 800301a:	4839      	ldr	r0, [pc, #228]	; (8003100 <HAL_SAI_MspInit+0x13c>)
 800301c:	f004 ff90 	bl	8007f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8003020:	2380      	movs	r3, #128	; 0x80
 8003022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003024:	2302      	movs	r3, #2
 8003026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003028:	2300      	movs	r3, #0
 800302a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800302c:	2300      	movs	r3, #0
 800302e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8003030:	2306      	movs	r3, #6
 8003032:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8003034:	f107 0314 	add.w	r3, r7, #20
 8003038:	4619      	mov	r1, r3
 800303a:	4832      	ldr	r0, [pc, #200]	; (8003104 <HAL_SAI_MspInit+0x140>)
 800303c:	f004 ff80 	bl	8007f40 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a30      	ldr	r2, [pc, #192]	; (8003108 <HAL_SAI_MspInit+0x144>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d124      	bne.n	8003094 <HAL_SAI_MspInit+0xd0>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 800304a:	4b2b      	ldr	r3, [pc, #172]	; (80030f8 <HAL_SAI_MspInit+0x134>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10b      	bne.n	800306a <HAL_SAI_MspInit+0xa6>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8003052:	4b2a      	ldr	r3, [pc, #168]	; (80030fc <HAL_SAI_MspInit+0x138>)
 8003054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003056:	4a29      	ldr	r2, [pc, #164]	; (80030fc <HAL_SAI_MspInit+0x138>)
 8003058:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800305c:	6453      	str	r3, [r2, #68]	; 0x44
 800305e:	4b27      	ldr	r3, [pc, #156]	; (80030fc <HAL_SAI_MspInit+0x138>)
 8003060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003066:	60fb      	str	r3, [r7, #12]
 8003068:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800306a:	4b23      	ldr	r3, [pc, #140]	; (80030f8 <HAL_SAI_MspInit+0x134>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	3301      	adds	r3, #1
 8003070:	4a21      	ldr	r2, [pc, #132]	; (80030f8 <HAL_SAI_MspInit+0x134>)
 8003072:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin;
 8003074:	2308      	movs	r3, #8
 8003076:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003078:	2302      	movs	r3, #2
 800307a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307c:	2300      	movs	r3, #0
 800307e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003080:	2300      	movs	r3, #0
 8003082:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8003084:	2306      	movs	r3, #6
 8003086:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SDB_GPIO_Port, &GPIO_InitStruct);
 8003088:	f107 0314 	add.w	r3, r7, #20
 800308c:	4619      	mov	r1, r3
 800308e:	481c      	ldr	r0, [pc, #112]	; (8003100 <HAL_SAI_MspInit+0x13c>)
 8003090:	f004 ff56 	bl	8007f40 <HAL_GPIO_Init>

    }
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a1c      	ldr	r2, [pc, #112]	; (800310c <HAL_SAI_MspInit+0x148>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d125      	bne.n	80030ea <HAL_SAI_MspInit+0x126>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800309e:	4b1c      	ldr	r3, [pc, #112]	; (8003110 <HAL_SAI_MspInit+0x14c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10b      	bne.n	80030be <HAL_SAI_MspInit+0xfa>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80030a6:	4b15      	ldr	r3, [pc, #84]	; (80030fc <HAL_SAI_MspInit+0x138>)
 80030a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030aa:	4a14      	ldr	r2, [pc, #80]	; (80030fc <HAL_SAI_MspInit+0x138>)
 80030ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030b0:	6453      	str	r3, [r2, #68]	; 0x44
 80030b2:	4b12      	ldr	r3, [pc, #72]	; (80030fc <HAL_SAI_MspInit+0x138>)
 80030b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030ba:	60bb      	str	r3, [r7, #8]
 80030bc:	68bb      	ldr	r3, [r7, #8]
    }
    SAI2_client ++;
 80030be:	4b14      	ldr	r3, [pc, #80]	; (8003110 <HAL_SAI_MspInit+0x14c>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	3301      	adds	r3, #1
 80030c4:	4a12      	ldr	r2, [pc, #72]	; (8003110 <HAL_SAI_MspInit+0x14c>)
 80030c6:	6013      	str	r3, [r2, #0]

    /**SAI2_A_Block_A GPIO Configuration
    PD11     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SPDIF_TX_Pin;
 80030c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ce:	2302      	movs	r3, #2
 80030d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d6:	2300      	movs	r3, #0
 80030d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80030da:	230a      	movs	r3, #10
 80030dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_TX_GPIO_Port, &GPIO_InitStruct);
 80030de:	f107 0314 	add.w	r3, r7, #20
 80030e2:	4619      	mov	r1, r3
 80030e4:	480b      	ldr	r0, [pc, #44]	; (8003114 <HAL_SAI_MspInit+0x150>)
 80030e6:	f004 ff2b 	bl	8007f40 <HAL_GPIO_Init>

    }
}
 80030ea:	bf00      	nop
 80030ec:	3728      	adds	r7, #40	; 0x28
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	40015804 	.word	0x40015804
 80030f8:	20001104 	.word	0x20001104
 80030fc:	40023800 	.word	0x40023800
 8003100:	40021000 	.word	0x40021000
 8003104:	40021800 	.word	0x40021800
 8003108:	40015824 	.word	0x40015824
 800310c:	40015c04 	.word	0x40015c04
 8003110:	20001108 	.word	0x20001108
 8003114:	40020c00 	.word	0x40020c00

08003118 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b08e      	sub	sp, #56	; 0x38
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003120:	2300      	movs	r3, #0
 8003122:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003124:	2300      	movs	r3, #0
 8003126:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003128:	4b33      	ldr	r3, [pc, #204]	; (80031f8 <HAL_InitTick+0xe0>)
 800312a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312c:	4a32      	ldr	r2, [pc, #200]	; (80031f8 <HAL_InitTick+0xe0>)
 800312e:	f043 0310 	orr.w	r3, r3, #16
 8003132:	6413      	str	r3, [r2, #64]	; 0x40
 8003134:	4b30      	ldr	r3, [pc, #192]	; (80031f8 <HAL_InitTick+0xe0>)
 8003136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003138:	f003 0310 	and.w	r3, r3, #16
 800313c:	60fb      	str	r3, [r7, #12]
 800313e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003140:	f107 0210 	add.w	r2, r7, #16
 8003144:	f107 0314 	add.w	r3, r7, #20
 8003148:	4611      	mov	r1, r2
 800314a:	4618      	mov	r0, r3
 800314c:	f008 fa4e 	bl	800b5ec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003150:	6a3b      	ldr	r3, [r7, #32]
 8003152:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003156:	2b00      	cmp	r3, #0
 8003158:	d103      	bne.n	8003162 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800315a:	f008 fa1f 	bl	800b59c <HAL_RCC_GetPCLK1Freq>
 800315e:	6378      	str	r0, [r7, #52]	; 0x34
 8003160:	e004      	b.n	800316c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003162:	f008 fa1b 	bl	800b59c <HAL_RCC_GetPCLK1Freq>
 8003166:	4603      	mov	r3, r0
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800316c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800316e:	4a23      	ldr	r2, [pc, #140]	; (80031fc <HAL_InitTick+0xe4>)
 8003170:	fba2 2303 	umull	r2, r3, r2, r3
 8003174:	0c9b      	lsrs	r3, r3, #18
 8003176:	3b01      	subs	r3, #1
 8003178:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800317a:	4b21      	ldr	r3, [pc, #132]	; (8003200 <HAL_InitTick+0xe8>)
 800317c:	4a21      	ldr	r2, [pc, #132]	; (8003204 <HAL_InitTick+0xec>)
 800317e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003180:	4b1f      	ldr	r3, [pc, #124]	; (8003200 <HAL_InitTick+0xe8>)
 8003182:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003186:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003188:	4a1d      	ldr	r2, [pc, #116]	; (8003200 <HAL_InitTick+0xe8>)
 800318a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800318e:	4b1c      	ldr	r3, [pc, #112]	; (8003200 <HAL_InitTick+0xe8>)
 8003190:	2200      	movs	r2, #0
 8003192:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003194:	4b1a      	ldr	r3, [pc, #104]	; (8003200 <HAL_InitTick+0xe8>)
 8003196:	2200      	movs	r2, #0
 8003198:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800319a:	4b19      	ldr	r3, [pc, #100]	; (8003200 <HAL_InitTick+0xe8>)
 800319c:	2200      	movs	r2, #0
 800319e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80031a0:	4817      	ldr	r0, [pc, #92]	; (8003200 <HAL_InitTick+0xe8>)
 80031a2:	f009 fea8 	bl	800cef6 <HAL_TIM_Base_Init>
 80031a6:	4603      	mov	r3, r0
 80031a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80031ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d11b      	bne.n	80031ec <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80031b4:	4812      	ldr	r0, [pc, #72]	; (8003200 <HAL_InitTick+0xe8>)
 80031b6:	f009 fef5 	bl	800cfa4 <HAL_TIM_Base_Start_IT>
 80031ba:	4603      	mov	r3, r0
 80031bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80031c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d111      	bne.n	80031ec <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80031c8:	2036      	movs	r0, #54	; 0x36
 80031ca:	f002 fab1 	bl	8005730 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2b0f      	cmp	r3, #15
 80031d2:	d808      	bhi.n	80031e6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80031d4:	2200      	movs	r2, #0
 80031d6:	6879      	ldr	r1, [r7, #4]
 80031d8:	2036      	movs	r0, #54	; 0x36
 80031da:	f002 fa8d 	bl	80056f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80031de:	4a0a      	ldr	r2, [pc, #40]	; (8003208 <HAL_InitTick+0xf0>)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6013      	str	r3, [r2, #0]
 80031e4:	e002      	b.n	80031ec <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80031ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3738      	adds	r7, #56	; 0x38
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	40023800 	.word	0x40023800
 80031fc:	431bde83 	.word	0x431bde83
 8003200:	2000110c 	.word	0x2000110c
 8003204:	40001000 	.word	0x40001000
 8003208:	20000040 	.word	0x20000040

0800320c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003210:	e7fe      	b.n	8003210 <NMI_Handler+0x4>

08003212 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003212:	b480      	push	{r7}
 8003214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003216:	e7fe      	b.n	8003216 <HardFault_Handler+0x4>

08003218 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800321c:	e7fe      	b.n	800321c <MemManage_Handler+0x4>

0800321e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800321e:	b480      	push	{r7}
 8003220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003222:	e7fe      	b.n	8003222 <BusFault_Handler+0x4>

08003224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003228:	e7fe      	b.n	8003228 <UsageFault_Handler+0x4>

0800322a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800322a:	b480      	push	{r7}
 800322c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800322e:	bf00      	nop
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800323c:	bf00      	nop
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003246:	b480      	push	{r7}
 8003248:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800324a:	bf00      	nop
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003258:	bf00      	nop
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
	...

08003264 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003268:	4802      	ldr	r0, [pc, #8]	; (8003274 <TIM6_DAC_IRQHandler+0x10>)
 800326a:	f009 ff6a 	bl	800d142 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800326e:	bf00      	nop
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	2000110c 	.word	0x2000110c

08003278 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800327c:	4802      	ldr	r0, [pc, #8]	; (8003288 <OTG_HS_IRQHandler+0x10>)
 800327e:	f006 fc3d 	bl	8009afc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8003282:	bf00      	nop
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	20000b98 	.word	0x20000b98

0800328c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003290:	4802      	ldr	r0, [pc, #8]	; (800329c <LTDC_IRQHandler+0x10>)
 8003292:	f006 f825 	bl	80092e0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003296:	bf00      	nop
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	20000534 	.word	0x20000534

080032a0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80032a4:	4802      	ldr	r0, [pc, #8]	; (80032b0 <DMA2D_IRQHandler+0x10>)
 80032a6:	f002 ff81 	bl	80061ac <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80032aa:	bf00      	nop
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	20000324 	.word	0x20000324

080032b4 <CEC_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC global interrupt.
  */
void CEC_IRQHandler(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_IRQn 0 */

  /* USER CODE END CEC_IRQn 0 */
  HAL_CEC_IRQHandler(&hcec);
 80032b8:	4802      	ldr	r0, [pc, #8]	; (80032c4 <CEC_IRQHandler+0x10>)
 80032ba:	f002 f846 	bl	800534a <HAL_CEC_IRQHandler>
  /* USER CODE BEGIN CEC_IRQn 1 */

  /* USER CODE END CEC_IRQn 1 */
}
 80032be:	bf00      	nop
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	20000448 	.word	0x20000448

080032c8 <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 80032cc:	4802      	ldr	r0, [pc, #8]	; (80032d8 <DSI_IRQHandler+0x10>)
 80032ce:	f003 fc4b 	bl	8006b68 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 80032d2:	bf00      	nop
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	2000037c 	.word	0x2000037c

080032dc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032e8:	2300      	movs	r3, #0
 80032ea:	617b      	str	r3, [r7, #20]
 80032ec:	e00a      	b.n	8003304 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80032ee:	f3af 8000 	nop.w
 80032f2:	4601      	mov	r1, r0
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	1c5a      	adds	r2, r3, #1
 80032f8:	60ba      	str	r2, [r7, #8]
 80032fa:	b2ca      	uxtb	r2, r1
 80032fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	3301      	adds	r3, #1
 8003302:	617b      	str	r3, [r7, #20]
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	429a      	cmp	r2, r3
 800330a:	dbf0      	blt.n	80032ee <_read+0x12>
  }

  return len;
 800330c:	687b      	ldr	r3, [r7, #4]
}
 800330e:	4618      	mov	r0, r3
 8003310:	3718      	adds	r7, #24
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b086      	sub	sp, #24
 800331a:	af00      	add	r7, sp, #0
 800331c:	60f8      	str	r0, [r7, #12]
 800331e:	60b9      	str	r1, [r7, #8]
 8003320:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003322:	2300      	movs	r3, #0
 8003324:	617b      	str	r3, [r7, #20]
 8003326:	e009      	b.n	800333c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	1c5a      	adds	r2, r3, #1
 800332c:	60ba      	str	r2, [r7, #8]
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	4618      	mov	r0, r3
 8003332:	f7fe fc75 	bl	8001c20 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	3301      	adds	r3, #1
 800333a:	617b      	str	r3, [r7, #20]
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	429a      	cmp	r2, r3
 8003342:	dbf1      	blt.n	8003328 <_write+0x12>
  }
  return len;
 8003344:	687b      	ldr	r3, [r7, #4]
}
 8003346:	4618      	mov	r0, r3
 8003348:	3718      	adds	r7, #24
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <_close>:

int _close(int file)
{
 800334e:	b480      	push	{r7}
 8003350:	b083      	sub	sp, #12
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003356:	f04f 33ff 	mov.w	r3, #4294967295
}
 800335a:	4618      	mov	r0, r3
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003366:	b480      	push	{r7}
 8003368:	b083      	sub	sp, #12
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
 800336e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003376:	605a      	str	r2, [r3, #4]
  return 0;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr

08003386 <_isatty>:

int _isatty(int file)
{
 8003386:	b480      	push	{r7}
 8003388:	b083      	sub	sp, #12
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800338e:	2301      	movs	r3, #1
}
 8003390:	4618      	mov	r0, r3
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3714      	adds	r7, #20
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
	...

080033b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033c0:	4a14      	ldr	r2, [pc, #80]	; (8003414 <_sbrk+0x5c>)
 80033c2:	4b15      	ldr	r3, [pc, #84]	; (8003418 <_sbrk+0x60>)
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033cc:	4b13      	ldr	r3, [pc, #76]	; (800341c <_sbrk+0x64>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d102      	bne.n	80033da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033d4:	4b11      	ldr	r3, [pc, #68]	; (800341c <_sbrk+0x64>)
 80033d6:	4a12      	ldr	r2, [pc, #72]	; (8003420 <_sbrk+0x68>)
 80033d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033da:	4b10      	ldr	r3, [pc, #64]	; (800341c <_sbrk+0x64>)
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4413      	add	r3, r2
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d207      	bcs.n	80033f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033e8:	f00c fc68 	bl	800fcbc <__errno>
 80033ec:	4603      	mov	r3, r0
 80033ee:	220c      	movs	r2, #12
 80033f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033f2:	f04f 33ff 	mov.w	r3, #4294967295
 80033f6:	e009      	b.n	800340c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033f8:	4b08      	ldr	r3, [pc, #32]	; (800341c <_sbrk+0x64>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033fe:	4b07      	ldr	r3, [pc, #28]	; (800341c <_sbrk+0x64>)
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4413      	add	r3, r2
 8003406:	4a05      	ldr	r2, [pc, #20]	; (800341c <_sbrk+0x64>)
 8003408:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800340a:	68fb      	ldr	r3, [r7, #12]
}
 800340c:	4618      	mov	r0, r3
 800340e:	3718      	adds	r7, #24
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	20080000 	.word	0x20080000
 8003418:	00000400 	.word	0x00000400
 800341c:	20001158 	.word	0x20001158
 8003420:	20001638 	.word	0x20001638

08003424 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003428:	4b06      	ldr	r3, [pc, #24]	; (8003444 <SystemInit+0x20>)
 800342a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342e:	4a05      	ldr	r2, [pc, #20]	; (8003444 <SystemInit+0x20>)
 8003430:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003434:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003438:	bf00      	nop
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	e000ed00 	.word	0xe000ed00

08003448 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003448:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003480 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800344c:	480d      	ldr	r0, [pc, #52]	; (8003484 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800344e:	490e      	ldr	r1, [pc, #56]	; (8003488 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003450:	4a0e      	ldr	r2, [pc, #56]	; (800348c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003452:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003454:	e002      	b.n	800345c <LoopCopyDataInit>

08003456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800345a:	3304      	adds	r3, #4

0800345c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800345c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800345e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003460:	d3f9      	bcc.n	8003456 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003462:	4a0b      	ldr	r2, [pc, #44]	; (8003490 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003464:	4c0b      	ldr	r4, [pc, #44]	; (8003494 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003468:	e001      	b.n	800346e <LoopFillZerobss>

0800346a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800346a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800346c:	3204      	adds	r2, #4

0800346e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800346e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003470:	d3fb      	bcc.n	800346a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003472:	f7ff ffd7 	bl	8003424 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003476:	f00c fc27 	bl	800fcc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800347a:	f7fd f8af 	bl	80005dc <main>
  bx  lr    
 800347e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003480:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8003484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003488:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 800348c:	080122e0 	.word	0x080122e0
  ldr r2, =_sbss
 8003490:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8003494:	20001638 	.word	0x20001638

08003498 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003498:	e7fe      	b.n	8003498 <ADC_IRQHandler>
	...

0800349c <ft6x06_Init>:
  *         from MCU to FT6206 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	4603      	mov	r3, r0
 80034a4:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 80034a6:	88fb      	ldrh	r3, [r7, #6]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f000 f90d 	bl	80036c8 <ft6x06_GetInstance>
 80034ae:	4603      	mov	r3, r0
 80034b0:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 80034b2:	7bfb      	ldrb	r3, [r7, #15]
 80034b4:	2bff      	cmp	r3, #255	; 0xff
 80034b6:	d10e      	bne.n	80034d6 <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 80034b8:	2000      	movs	r0, #0
 80034ba:	f000 f905 	bl	80036c8 <ft6x06_GetInstance>
 80034be:	4603      	mov	r3, r0
 80034c0:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 80034c2:	7bbb      	ldrb	r3, [r7, #14]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d806      	bhi.n	80034d6 <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 80034c8:	7bbb      	ldrb	r3, [r7, #14]
 80034ca:	88fa      	ldrh	r2, [r7, #6]
 80034cc:	b2d1      	uxtb	r1, r2
 80034ce:	4a04      	ldr	r2, [pc, #16]	; (80034e0 <ft6x06_Init+0x44>)
 80034d0:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 80034d2:	f000 fc77 	bl	8003dc4 <TS_IO_Init>
    }
  }
}
 80034d6:	bf00      	nop
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	2000115c 	.word	0x2000115c

080034e4 <ft6x06_Reset>:
  *         @note : Not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	4603      	mov	r3, r0
 80034ec:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 80034ee:	bf00      	nop
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <ft6x06_ReadID>:
  *         able to read the FT6206 device ID, and verify this is a FT6206.
  * @param  DeviceAddr: I2C FT6x06 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b082      	sub	sp, #8
 80034fe:	af00      	add	r7, sp, #0
 8003500:	4603      	mov	r3, r0
 8003502:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 8003504:	f000 fc5e 	bl	8003dc4 <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 8003508:	88fb      	ldrh	r3, [r7, #6]
 800350a:	b2db      	uxtb	r3, r3
 800350c:	21a8      	movs	r1, #168	; 0xa8
 800350e:	4618      	mov	r0, r3
 8003510:	f000 fc7c 	bl	8003e0c <TS_IO_Read>
 8003514:	4603      	mov	r3, r0
 8003516:	b29b      	uxth	r3, r3
}
 8003518:	4618      	mov	r0, r3
 800351a:	3708      	adds	r7, #8
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	4603      	mov	r3, r0
 8003528:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6206 */
  ft6x06_TS_Configure(DeviceAddr);
 800352a:	88fb      	ldrh	r3, [r7, #6]
 800352c:	4618      	mov	r0, r3
 800352e:	f000 f8bc 	bl	80036aa <ft6x06_TS_Configure>

  /* By default set FT6206 IC in Polling mode : no INT generation on FT6206 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 8003532:	88fb      	ldrh	r3, [r7, #6]
 8003534:	4618      	mov	r0, r3
 8003536:	f000 f88d 	bl	8003654 <ft6x06_TS_DisableIT>
}
 800353a:	bf00      	nop
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
	...

08003544 <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	4603      	mov	r3, r0
 800354c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800354e:	2300      	movs	r3, #0
 8003550:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 8003552:	88fb      	ldrh	r3, [r7, #6]
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2102      	movs	r1, #2
 8003558:	4618      	mov	r0, r3
 800355a:	f000 fc57 	bl	8003e0c <TS_IO_Read>
 800355e:	4603      	mov	r3, r0
 8003560:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 8003562:	7bfb      	ldrb	r3, [r7, #15]
 8003564:	b2db      	uxtb	r3, r3
 8003566:	f003 030f 	and.w	r3, r3, #15
 800356a:	b2db      	uxtb	r3, r3
 800356c:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 800356e:	7bfb      	ldrb	r3, [r7, #15]
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8003576:	2300      	movs	r3, #0
 8003578:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6x06 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 800357a:	7bfb      	ldrb	r3, [r7, #15]
 800357c:	b2da      	uxtb	r2, r3
 800357e:	4b05      	ldr	r3, [pc, #20]	; (8003594 <ft6x06_TS_DetectTouch+0x50>)
 8003580:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 8003582:	4b04      	ldr	r3, [pc, #16]	; (8003594 <ft6x06_TS_DetectTouch+0x50>)
 8003584:	2200      	movs	r2, #0
 8003586:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8003588:	7bfb      	ldrb	r3, [r7, #15]
 800358a:	b2db      	uxtb	r3, r3
}
 800358c:	4618      	mov	r0, r3
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	20001160 	.word	0x20001160

08003598 <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	4603      	mov	r3, r0
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
 80035a4:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 80035a6:	2300      	movs	r3, #0
 80035a8:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 80035aa:	4b1f      	ldr	r3, [pc, #124]	; (8003628 <ft6x06_TS_GetXY+0x90>)
 80035ac:	789a      	ldrb	r2, [r3, #2]
 80035ae:	4b1e      	ldr	r3, [pc, #120]	; (8003628 <ft6x06_TS_GetXY+0x90>)
 80035b0:	785b      	ldrb	r3, [r3, #1]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d234      	bcs.n	8003620 <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 80035b6:	4b1c      	ldr	r3, [pc, #112]	; (8003628 <ft6x06_TS_GetXY+0x90>)
 80035b8:	789b      	ldrb	r3, [r3, #2]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <ft6x06_TS_GetXY+0x2c>
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d003      	beq.n	80035ca <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 80035c2:	e005      	b.n	80035d0 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 80035c4:	2303      	movs	r3, #3
 80035c6:	75fb      	strb	r3, [r7, #23]
      break;
 80035c8:	e002      	b.n	80035d0 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 80035ca:	2309      	movs	r3, #9
 80035cc:	75fb      	strb	r3, [r7, #23]
      break;
 80035ce:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 80035d0:	89fb      	ldrh	r3, [r7, #14]
 80035d2:	b2d8      	uxtb	r0, r3
 80035d4:	f107 0210 	add.w	r2, r7, #16
 80035d8:	7df9      	ldrb	r1, [r7, #23]
 80035da:	2304      	movs	r3, #4
 80035dc:	f000 fc34 	bl	8003e48 <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 80035e0:	7c3b      	ldrb	r3, [r7, #16]
 80035e2:	021b      	lsls	r3, r3, #8
 80035e4:	b21b      	sxth	r3, r3
 80035e6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80035ea:	b21a      	sxth	r2, r3
 80035ec:	7c7b      	ldrb	r3, [r7, #17]
 80035ee:	b21b      	sxth	r3, r3
 80035f0:	4313      	orrs	r3, r2
 80035f2:	b21b      	sxth	r3, r3
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 80035fa:	7cbb      	ldrb	r3, [r7, #18]
 80035fc:	021b      	lsls	r3, r3, #8
 80035fe:	b21b      	sxth	r3, r3
 8003600:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003604:	b21a      	sxth	r2, r3
 8003606:	7cfb      	ldrb	r3, [r7, #19]
 8003608:	b21b      	sxth	r3, r3
 800360a:	4313      	orrs	r3, r2
 800360c:	b21b      	sxth	r3, r3
 800360e:	b29a      	uxth	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 8003614:	4b04      	ldr	r3, [pc, #16]	; (8003628 <ft6x06_TS_GetXY+0x90>)
 8003616:	789b      	ldrb	r3, [r3, #2]
 8003618:	3301      	adds	r3, #1
 800361a:	b2da      	uxtb	r2, r3
 800361c:	4b02      	ldr	r3, [pc, #8]	; (8003628 <ft6x06_TS_GetXY+0x90>)
 800361e:	709a      	strb	r2, [r3, #2]
  }
}
 8003620:	bf00      	nop
 8003622:	3718      	adds	r7, #24
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	20001160 	.word	0x20001160

0800362c <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	4603      	mov	r3, r0
 8003634:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8003636:	2300      	movs	r3, #0
 8003638:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 800363a:	2301      	movs	r3, #1
 800363c:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 800363e:	88fb      	ldrh	r3, [r7, #6]
 8003640:	b2db      	uxtb	r3, r3
 8003642:	7bfa      	ldrb	r2, [r7, #15]
 8003644:	21a4      	movs	r1, #164	; 0xa4
 8003646:	4618      	mov	r0, r3
 8003648:	f000 fbc6 	bl	8003dd8 <TS_IO_Write>
}
 800364c:	bf00      	nop
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	4603      	mov	r3, r0
 800365c:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800365e:	2300      	movs	r3, #0
 8003660:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 8003662:	2300      	movs	r3, #0
 8003664:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8003666:	88fb      	ldrh	r3, [r7, #6]
 8003668:	b2db      	uxtb	r3, r3
 800366a:	7bfa      	ldrb	r2, [r7, #15]
 800366c:	21a4      	movs	r1, #164	; 0xa4
 800366e:	4618      	mov	r0, r3
 8003670:	f000 fbb2 	bl	8003dd8 <TS_IO_Write>
}
 8003674:	bf00      	nop
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	4603      	mov	r3, r0
 8003684:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	4603      	mov	r3, r0
 800369c:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6206 */
}
 800369e:	bf00      	nop
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6206 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b085      	sub	sp, #20
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	4603      	mov	r3, r0
 80036b2:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 80036b4:	2300      	movs	r3, #0
 80036b6:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6206 */

  return(status);
 80036b8:	68fb      	ldr	r3, [r7, #12]
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3714      	adds	r7, #20
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
	...

080036c8 <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	4603      	mov	r3, r0
 80036d0:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 80036d2:	2300      	movs	r3, #0
 80036d4:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 80036d6:	2300      	movs	r3, #0
 80036d8:	73fb      	strb	r3, [r7, #15]
 80036da:	e00b      	b.n	80036f4 <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 80036dc:	7bfb      	ldrb	r3, [r7, #15]
 80036de:	4a0a      	ldr	r2, [pc, #40]	; (8003708 <ft6x06_GetInstance+0x40>)
 80036e0:	5cd3      	ldrb	r3, [r2, r3]
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	88fa      	ldrh	r2, [r7, #6]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d101      	bne.n	80036ee <ft6x06_GetInstance+0x26>
    {
      return idx; 
 80036ea:	7bfb      	ldrb	r3, [r7, #15]
 80036ec:	e006      	b.n	80036fc <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 80036ee:	7bfb      	ldrb	r3, [r7, #15]
 80036f0:	3301      	adds	r3, #1
 80036f2:	73fb      	strb	r3, [r7, #15]
 80036f4:	7bfb      	ldrb	r3, [r7, #15]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d9f0      	bls.n	80036dc <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 80036fa:	23ff      	movs	r3, #255	; 0xff
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3714      	adds	r7, #20
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr
 8003708:	2000115c 	.word	0x2000115c

0800370c <NT35510_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t NT35510_Init(uint32_t ColorCoding, uint32_t orientation)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b0b2      	sub	sp, #200	; 0xc8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  NT35510_IO_Delay(120);
 8003716:	2078      	movs	r0, #120	; 0x78
 8003718:	f000 fbb4 	bl	8003e84 <NT35510_IO_Delay>

/* ************************************************************************** */
/* Proprietary Initialization                                                 */
/* ************************************************************************** */
  const uint8_t nt35510_reg[]   = {0x55, 0xAA, 0x52, 0x08, 0x01, 0xF0};
 800371c:	4ac8      	ldr	r2, [pc, #800]	; (8003a40 <NT35510_Init+0x334>)
 800371e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003722:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003726:	6018      	str	r0, [r3, #0]
 8003728:	3304      	adds	r3, #4
 800372a:	8019      	strh	r1, [r3, #0]
  const uint8_t nt35510_reg1[]  = {0x03, 0x03, 0x03, 0xB0};
 800372c:	4bc5      	ldr	r3, [pc, #788]	; (8003a44 <NT35510_Init+0x338>)
 800372e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  const uint8_t nt35510_reg2[]  = {0x46, 0x46, 0x46, 0xB6};
 8003732:	4bc5      	ldr	r3, [pc, #788]	; (8003a48 <NT35510_Init+0x33c>)
 8003734:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  const uint8_t nt35510_reg3[]  = {0x03, 0x03, 0x03, 0xB1};
 8003738:	4bc4      	ldr	r3, [pc, #784]	; (8003a4c <NT35510_Init+0x340>)
 800373a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  const uint8_t nt35510_reg4[]  = {0x36, 0x36, 0x36, 0xB7};
 800373e:	4bc4      	ldr	r3, [pc, #784]	; (8003a50 <NT35510_Init+0x344>)
 8003740:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  const uint8_t nt35510_reg5[]  = {0x00, 0x00, 0x02, 0xB2};
 8003744:	4bc3      	ldr	r3, [pc, #780]	; (8003a54 <NT35510_Init+0x348>)
 8003746:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  const uint8_t nt35510_reg6[]  = {0x26, 0x26, 0x26, 0xB8};
 800374a:	4bc3      	ldr	r3, [pc, #780]	; (8003a58 <NT35510_Init+0x34c>)
 800374c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  const uint8_t nt35510_reg7[]  = {0xBF, 0x01};
 8003750:	f240 13bf 	movw	r3, #447	; 0x1bf
 8003754:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
  const uint8_t nt35510_reg8[]  = {0x09, 0x09, 0x09, 0xB3};
 8003758:	4bc0      	ldr	r3, [pc, #768]	; (8003a5c <NT35510_Init+0x350>)
 800375a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  const uint8_t nt35510_reg9[]  = {0x36, 0x36, 0x36, 0xB9};
 800375e:	4bc0      	ldr	r3, [pc, #768]	; (8003a60 <NT35510_Init+0x354>)
 8003760:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  const uint8_t nt35510_reg10[] = {0x08, 0x08, 0x08, 0xB5};
 8003764:	4bbf      	ldr	r3, [pc, #764]	; (8003a64 <NT35510_Init+0x358>)
 8003766:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  const uint8_t nt35510_reg12[] = {0x26, 0x26, 0x26, 0xBA};
 800376a:	4bbf      	ldr	r3, [pc, #764]	; (8003a68 <NT35510_Init+0x35c>)
 800376c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  const uint8_t nt35510_reg13[] = {0x00, 0x80, 0x00, 0xBC};
 8003770:	4bbe      	ldr	r3, [pc, #760]	; (8003a6c <NT35510_Init+0x360>)
 8003772:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  const uint8_t nt35510_reg14[] = {0x00, 0x80, 0x00, 0xBD};
 8003776:	4bbe      	ldr	r3, [pc, #760]	; (8003a70 <NT35510_Init+0x364>)
 8003778:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  const uint8_t nt35510_reg15[] = {0x00, 0x50, 0xBE};
 800377c:	4abd      	ldr	r2, [pc, #756]	; (8003a74 <NT35510_Init+0x368>)
 800377e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003782:	6812      	ldr	r2, [r2, #0]
 8003784:	4611      	mov	r1, r2
 8003786:	8019      	strh	r1, [r3, #0]
 8003788:	3302      	adds	r3, #2
 800378a:	0c12      	lsrs	r2, r2, #16
 800378c:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg16[] = {0x55, 0xAA, 0x52, 0x08, 0x00, 0xF0};
 800378e:	4aba      	ldr	r2, [pc, #744]	; (8003a78 <NT35510_Init+0x36c>)
 8003790:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003794:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003798:	6018      	str	r0, [r3, #0]
 800379a:	3304      	adds	r3, #4
 800379c:	8019      	strh	r1, [r3, #0]
  const uint8_t nt35510_reg17[] = {0xFC, 0x00, 0xB1};
 800379e:	4ab7      	ldr	r2, [pc, #732]	; (8003a7c <NT35510_Init+0x370>)
 80037a0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80037a4:	6812      	ldr	r2, [r2, #0]
 80037a6:	4611      	mov	r1, r2
 80037a8:	8019      	strh	r1, [r3, #0]
 80037aa:	3302      	adds	r3, #2
 80037ac:	0c12      	lsrs	r2, r2, #16
 80037ae:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg18[] = {0xB6, 0x03};
 80037b0:	f240 33b6 	movw	r3, #950	; 0x3b6
 80037b4:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  const uint8_t nt35510_reg19[] = {0xB5, 0x51};
 80037b8:	f245 13b5 	movw	r3, #20917	; 0x51b5
 80037bc:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  const uint8_t nt35510_reg20[] = {0x00, 0x00, 0xB7};
 80037c0:	4aaf      	ldr	r2, [pc, #700]	; (8003a80 <NT35510_Init+0x374>)
 80037c2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80037c6:	6812      	ldr	r2, [r2, #0]
 80037c8:	4611      	mov	r1, r2
 80037ca:	8019      	strh	r1, [r3, #0]
 80037cc:	3302      	adds	r3, #2
 80037ce:	0c12      	lsrs	r2, r2, #16
 80037d0:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg21[] = {0x01, 0x02, 0x02, 0x02, 0xB8};
 80037d2:	4aac      	ldr	r2, [pc, #688]	; (8003a84 <NT35510_Init+0x378>)
 80037d4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80037d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80037dc:	6018      	str	r0, [r3, #0]
 80037de:	3304      	adds	r3, #4
 80037e0:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_reg22[] = {0x00, 0x00, 0x00, 0xBC};
 80037e2:	f04f 433c 	mov.w	r3, #3154116608	; 0xbc000000
 80037e6:	667b      	str	r3, [r7, #100]	; 0x64
  const uint8_t nt35510_reg23[] = {0x03, 0x00, 0x00, 0xCC};
 80037e8:	4ba7      	ldr	r3, [pc, #668]	; (8003a88 <NT35510_Init+0x37c>)
 80037ea:	663b      	str	r3, [r7, #96]	; 0x60
  const uint8_t nt35510_reg24[] = {0xBA, 0x01};
 80037ec:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
 80037f0:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
  const uint8_t nt35510_madctl_portrait[] = {NT35510_CMD_MADCTL ,0x00};
 80037f4:	2336      	movs	r3, #54	; 0x36
 80037f6:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  const uint8_t nt35510_caset_portrait[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_CASET};
 80037fa:	4aa4      	ldr	r2, [pc, #656]	; (8003a8c <NT35510_Init+0x380>)
 80037fc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003800:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003804:	6018      	str	r0, [r3, #0]
 8003806:	3304      	adds	r3, #4
 8003808:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_raset_portrait[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_RASET};
 800380a:	4aa1      	ldr	r2, [pc, #644]	; (8003a90 <NT35510_Init+0x384>)
 800380c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003810:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003814:	6018      	str	r0, [r3, #0]
 8003816:	3304      	adds	r3, #4
 8003818:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_madctl_landscape[] = {NT35510_CMD_MADCTL, 0x60};
 800381a:	f246 0336 	movw	r3, #24630	; 0x6036
 800381e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  const uint8_t nt35510_caset_landscape[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_CASET};
 8003822:	4a9c      	ldr	r2, [pc, #624]	; (8003a94 <NT35510_Init+0x388>)
 8003824:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003828:	e892 0003 	ldmia.w	r2, {r0, r1}
 800382c:	6018      	str	r0, [r3, #0]
 800382e:	3304      	adds	r3, #4
 8003830:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_raset_landscape[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_RASET};
 8003832:	4a99      	ldr	r2, [pc, #612]	; (8003a98 <NT35510_Init+0x38c>)
 8003834:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003838:	e892 0003 	ldmia.w	r2, {r0, r1}
 800383c:	6018      	str	r0, [r3, #0]
 800383e:	3304      	adds	r3, #4
 8003840:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_reg26[] = {NT35510_CMD_TEEON, 0x00};  /* Tear on */
 8003842:	2335      	movs	r3, #53	; 0x35
 8003844:	863b      	strh	r3, [r7, #48]	; 0x30
  const uint8_t nt35510_reg27[] = {NT35510_CMD_SLPOUT, 0x00}; /* Sleep out */
 8003846:	2311      	movs	r3, #17
 8003848:	85bb      	strh	r3, [r7, #44]	; 0x2c
  const uint8_t nt35510_reg30[] = {NT35510_CMD_DISPON, 0x00};
 800384a:	2329      	movs	r3, #41	; 0x29
 800384c:	853b      	strh	r3, [r7, #40]	; 0x28

  const uint8_t nt35510_reg31[] = {NT35510_CMD_WRDISBV, 0x7F};
 800384e:	f647 7351 	movw	r3, #32593	; 0x7f51
 8003852:	84bb      	strh	r3, [r7, #36]	; 0x24
  const uint8_t nt35510_reg32[] = {NT35510_CMD_WRCTRLD, 0x2C};
 8003854:	f642 4353 	movw	r3, #11347	; 0x2c53
 8003858:	843b      	strh	r3, [r7, #32]
  const uint8_t nt35510_reg33[] = {NT35510_CMD_WRCABC, 0x02};
 800385a:	f240 2355 	movw	r3, #597	; 0x255
 800385e:	83bb      	strh	r3, [r7, #28]
  const uint8_t nt35510_reg34[] = {NT35510_CMD_WRCABCMB, 0xFF};
 8003860:	f64f 735e 	movw	r3, #65374	; 0xff5e
 8003864:	833b      	strh	r3, [r7, #24]
  const uint8_t nt35510_reg35[] = {NT35510_CMD_RAMWR, 0x00};
 8003866:	232c      	movs	r3, #44	; 0x2c
 8003868:	82bb      	strh	r3, [r7, #20]
  const uint8_t nt35510_reg36[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB565};
 800386a:	f245 533a 	movw	r3, #21818	; 0x553a
 800386e:	823b      	strh	r3, [r7, #16]
  const uint8_t nt35510_reg37[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB888};
 8003870:	f247 733a 	movw	r3, #30522	; 0x773a
 8003874:	81bb      	strh	r3, [r7, #12]

  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg); /* LV2:  Page 1 enable */
 8003876:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800387a:	4619      	mov	r1, r3
 800387c:	2005      	movs	r0, #5
 800387e:	f000 fe1d 	bl	80044bc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg1);/* AVDD: 5.2V */
 8003882:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003886:	4619      	mov	r1, r3
 8003888:	2003      	movs	r0, #3
 800388a:	f000 fe17 	bl	80044bc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg2);/* AVDD: Ratio */
 800388e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003892:	4619      	mov	r1, r3
 8003894:	2003      	movs	r0, #3
 8003896:	f000 fe11 	bl	80044bc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg3);/* AVEE: -5.2V */
 800389a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800389e:	4619      	mov	r1, r3
 80038a0:	2003      	movs	r0, #3
 80038a2:	f000 fe0b 	bl	80044bc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg4);/* AVEE: Ratio */
 80038a6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80038aa:	4619      	mov	r1, r3
 80038ac:	2003      	movs	r0, #3
 80038ae:	f000 fe05 	bl	80044bc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg5);/* VCL: -2.5V */
 80038b2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80038b6:	4619      	mov	r1, r3
 80038b8:	2003      	movs	r0, #3
 80038ba:	f000 fdff 	bl	80044bc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg6);/* VCL: Ratio */
 80038be:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80038c2:	4619      	mov	r1, r3
 80038c4:	2003      	movs	r0, #3
 80038c6:	f000 fdf9 	bl	80044bc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg7);/* VGH: 15V (Free Pump) */
 80038ca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80038ce:	4619      	mov	r1, r3
 80038d0:	2001      	movs	r0, #1
 80038d2:	f000 fdf3 	bl	80044bc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg8);
 80038d6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80038da:	4619      	mov	r1, r3
 80038dc:	2003      	movs	r0, #3
 80038de:	f000 fded 	bl	80044bc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg9);/* VGH: Ratio */
 80038e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80038e6:	4619      	mov	r1, r3
 80038e8:	2003      	movs	r0, #3
 80038ea:	f000 fde7 	bl	80044bc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg10);/* VGL_REG: -10V */
 80038ee:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80038f2:	4619      	mov	r1, r3
 80038f4:	2003      	movs	r0, #3
 80038f6:	f000 fde1 	bl	80044bc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg12);/* VGLX: Ratio */
 80038fa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80038fe:	4619      	mov	r1, r3
 8003900:	2003      	movs	r0, #3
 8003902:	f000 fddb 	bl	80044bc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg13);/* VGMP/VGSP: 4.5V/0V */
 8003906:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800390a:	4619      	mov	r1, r3
 800390c:	2003      	movs	r0, #3
 800390e:	f000 fdd5 	bl	80044bc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg14);/* VGMN/VGSN:-4.5V/0V */
 8003912:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003916:	4619      	mov	r1, r3
 8003918:	2003      	movs	r0, #3
 800391a:	f000 fdcf 	bl	80044bc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg15);/* VCOM: -1.325V */
 800391e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003922:	4619      	mov	r1, r3
 8003924:	2002      	movs	r0, #2
 8003926:	f000 fdc9 	bl	80044bc <DSI_IO_WriteCmd>

/* ************************************************************************** */
/* Proprietary DCS Initialization                                             */
/* ************************************************************************** */
  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg16);/* LV2: Page 0 enable */
 800392a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800392e:	4619      	mov	r1, r3
 8003930:	2005      	movs	r0, #5
 8003932:	f000 fdc3 	bl	80044bc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg17);/* Display control */
 8003936:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800393a:	4619      	mov	r1, r3
 800393c:	2002      	movs	r0, #2
 800393e:	f000 fdbd 	bl	80044bc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg18);/* Src hold time */
 8003942:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003946:	4619      	mov	r1, r3
 8003948:	2001      	movs	r0, #1
 800394a:	f000 fdb7 	bl	80044bc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg19);
 800394e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003952:	4619      	mov	r1, r3
 8003954:	2001      	movs	r0, #1
 8003956:	f000 fdb1 	bl	80044bc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg20);/* Gate EQ control */
 800395a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800395e:	4619      	mov	r1, r3
 8003960:	2002      	movs	r0, #2
 8003962:	f000 fdab 	bl	80044bc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(4, (uint8_t *)nt35510_reg21);/* Src EQ control(Mode2) */
 8003966:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800396a:	4619      	mov	r1, r3
 800396c:	2004      	movs	r0, #4
 800396e:	f000 fda5 	bl	80044bc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg22);/* Inv. mode(2-dot) */
 8003972:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003976:	4619      	mov	r1, r3
 8003978:	2003      	movs	r0, #3
 800397a:	f000 fd9f 	bl	80044bc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg23);
 800397e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003982:	4619      	mov	r1, r3
 8003984:	2003      	movs	r0, #3
 8003986:	f000 fd99 	bl	80044bc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg24);
 800398a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800398e:	4619      	mov	r1, r3
 8003990:	2001      	movs	r0, #1
 8003992:	f000 fd93 	bl	80044bc <DSI_IO_WriteCmd>
  /* Tear on */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg26);
 8003996:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800399a:	4619      	mov	r1, r3
 800399c:	2000      	movs	r0, #0
 800399e:	f000 fd8d 	bl	80044bc <DSI_IO_WriteCmd>
  /* Set Pixel color format to RGB888 */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg37);
 80039a2:	f107 030c 	add.w	r3, r7, #12
 80039a6:	4619      	mov	r1, r3
 80039a8:	2000      	movs	r0, #0
 80039aa:	f000 fd87 	bl	80044bc <DSI_IO_WriteCmd>
/* ************************************************************************** */
/* Standard DCS Initialization                                                */
/* ************************************************************************** */

  /* Add a delay, otherwise MADCTL not taken */
  NT35510_IO_Delay(200);
 80039ae:	20c8      	movs	r0, #200	; 0xc8
 80039b0:	f000 fa68 	bl	8003e84 <NT35510_IO_Delay>

  /* Configure orientation */
  if(orientation == NT35510_ORIENTATION_PORTRAIT)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d112      	bne.n	80039e0 <NT35510_Init+0x2d4>
  {
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_portrait);
 80039ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80039be:	4619      	mov	r1, r3
 80039c0:	2001      	movs	r0, #1
 80039c2:	f000 fd7b 	bl	80044bc <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_portrait);
 80039c6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80039ca:	4619      	mov	r1, r3
 80039cc:	2004      	movs	r0, #4
 80039ce:	f000 fd75 	bl	80044bc <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_portrait);
 80039d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80039d6:	4619      	mov	r1, r3
 80039d8:	2004      	movs	r0, #4
 80039da:	f000 fd6f 	bl	80044bc <DSI_IO_WriteCmd>
 80039de:	e011      	b.n	8003a04 <NT35510_Init+0x2f8>
  }
  else
  {
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_landscape);
 80039e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80039e4:	4619      	mov	r1, r3
 80039e6:	2001      	movs	r0, #1
 80039e8:	f000 fd68 	bl	80044bc <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_landscape);
 80039ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80039f0:	4619      	mov	r1, r3
 80039f2:	2004      	movs	r0, #4
 80039f4:	f000 fd62 	bl	80044bc <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_landscape);
 80039f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80039fc:	4619      	mov	r1, r3
 80039fe:	2004      	movs	r0, #4
 8003a00:	f000 fd5c 	bl	80044bc <DSI_IO_WriteCmd>
  }

  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg27);
 8003a04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a08:	4619      	mov	r1, r3
 8003a0a:	2000      	movs	r0, #0
 8003a0c:	f000 fd56 	bl	80044bc <DSI_IO_WriteCmd>
  /* Wait for sleep out exit */
  NT35510_IO_Delay(120);
 8003a10:	2078      	movs	r0, #120	; 0x78
 8003a12:	f000 fa37 	bl	8003e84 <NT35510_IO_Delay>

  switch(ColorCoding)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d009      	beq.n	8003a30 <NT35510_Init+0x324>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d13c      	bne.n	8003a9c <NT35510_Init+0x390>
  {
    case NT35510_FORMAT_RBG565 :
      /* Set Pixel color format to RGB565 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg36);
 8003a22:	f107 0310 	add.w	r3, r7, #16
 8003a26:	4619      	mov	r1, r3
 8003a28:	2001      	movs	r0, #1
 8003a2a:	f000 fd47 	bl	80044bc <DSI_IO_WriteCmd>
      break;
 8003a2e:	e03c      	b.n	8003aaa <NT35510_Init+0x39e>
    case NT35510_FORMAT_RGB888 :
      /* Set Pixel color format to RGB888 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg37);
 8003a30:	f107 030c 	add.w	r3, r7, #12
 8003a34:	4619      	mov	r1, r3
 8003a36:	2001      	movs	r0, #1
 8003a38:	f000 fd40 	bl	80044bc <DSI_IO_WriteCmd>
      break;
 8003a3c:	e035      	b.n	8003aaa <NT35510_Init+0x39e>
 8003a3e:	bf00      	nop
 8003a40:	08010780 	.word	0x08010780
 8003a44:	b0030303 	.word	0xb0030303
 8003a48:	b6464646 	.word	0xb6464646
 8003a4c:	b1030303 	.word	0xb1030303
 8003a50:	b7363636 	.word	0xb7363636
 8003a54:	b2020000 	.word	0xb2020000
 8003a58:	b8262626 	.word	0xb8262626
 8003a5c:	b3090909 	.word	0xb3090909
 8003a60:	b9363636 	.word	0xb9363636
 8003a64:	b5080808 	.word	0xb5080808
 8003a68:	ba262626 	.word	0xba262626
 8003a6c:	bc008000 	.word	0xbc008000
 8003a70:	bd008000 	.word	0xbd008000
 8003a74:	08010788 	.word	0x08010788
 8003a78:	0801078c 	.word	0x0801078c
 8003a7c:	08010794 	.word	0x08010794
 8003a80:	08010798 	.word	0x08010798
 8003a84:	0801079c 	.word	0x0801079c
 8003a88:	cc000003 	.word	0xcc000003
 8003a8c:	080107a4 	.word	0x080107a4
 8003a90:	080107ac 	.word	0x080107ac
 8003a94:	080107b4 	.word	0x080107b4
 8003a98:	080107bc 	.word	0x080107bc
    default :
      /* Set Pixel color format to RGB888 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg37);
 8003a9c:	f107 030c 	add.w	r3, r7, #12
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	2001      	movs	r0, #1
 8003aa4:	f000 fd0a 	bl	80044bc <DSI_IO_WriteCmd>
      break;
 8003aa8:	bf00      	nop
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg31);
 8003aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003aae:	4619      	mov	r1, r3
 8003ab0:	2001      	movs	r0, #1
 8003ab2:	f000 fd03 	bl	80044bc <DSI_IO_WriteCmd>
  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg32);
 8003ab6:	f107 0320 	add.w	r3, r7, #32
 8003aba:	4619      	mov	r1, r3
 8003abc:	2001      	movs	r0, #1
 8003abe:	f000 fcfd 	bl	80044bc <DSI_IO_WriteCmd>
  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg33);
 8003ac2:	f107 031c 	add.w	r3, r7, #28
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	2001      	movs	r0, #1
 8003aca:	f000 fcf7 	bl	80044bc <DSI_IO_WriteCmd>
  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg34);
 8003ace:	f107 0318 	add.w	r3, r7, #24
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	2001      	movs	r0, #1
 8003ad6:	f000 fcf1 	bl	80044bc <DSI_IO_WriteCmd>
  /** CABC : Content Adaptive Backlight Control section end << */

  /* Display on */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg30);
 8003ada:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ade:	4619      	mov	r1, r3
 8003ae0:	2000      	movs	r0, #0
 8003ae2:	f000 fceb 	bl	80044bc <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg35);
 8003ae6:	f107 0314 	add.w	r3, r7, #20
 8003aea:	4619      	mov	r1, r3
 8003aec:	2000      	movs	r0, #0
 8003aee:	f000 fce5 	bl	80044bc <DSI_IO_WriteCmd>

  return 0;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	37c8      	adds	r7, #200	; 0xc8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b08c      	sub	sp, #48	; 0x30
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a58      	ldr	r2, [pc, #352]	; (8003c68 <I2Cx_MspInit+0x16c>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d15b      	bne.n	8003bc4 <I2Cx_MspInit+0xc8>
  {
  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 8003b0c:	4b57      	ldr	r3, [pc, #348]	; (8003c6c <I2Cx_MspInit+0x170>)
 8003b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b10:	4a56      	ldr	r2, [pc, #344]	; (8003c6c <I2Cx_MspInit+0x170>)
 8003b12:	f043 0308 	orr.w	r3, r3, #8
 8003b16:	6313      	str	r3, [r2, #48]	; 0x30
 8003b18:	4b54      	ldr	r3, [pc, #336]	; (8003c6c <I2Cx_MspInit+0x170>)
 8003b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1c:	f003 0308 	and.w	r3, r3, #8
 8003b20:	61bb      	str	r3, [r7, #24]
 8003b22:	69bb      	ldr	r3, [r7, #24]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 8003b24:	4b51      	ldr	r3, [pc, #324]	; (8003c6c <I2Cx_MspInit+0x170>)
 8003b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b28:	4a50      	ldr	r2, [pc, #320]	; (8003c6c <I2Cx_MspInit+0x170>)
 8003b2a:	f043 0302 	orr.w	r3, r3, #2
 8003b2e:	6313      	str	r3, [r2, #48]	; 0x30
 8003b30:	4b4e      	ldr	r3, [pc, #312]	; (8003c6c <I2Cx_MspInit+0x170>)
 8003b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	617b      	str	r3, [r7, #20]
 8003b3a:	697b      	ldr	r3, [r7, #20]
  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8003b3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b40:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003b42:	2312      	movs	r3, #18
 8003b44:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003b46:	2300      	movs	r3, #0
 8003b48:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 8003b4e:	2304      	movs	r3, #4
 8003b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 8003b52:	f107 031c 	add.w	r3, r7, #28
 8003b56:	4619      	mov	r1, r3
 8003b58:	4845      	ldr	r0, [pc, #276]	; (8003c70 <I2Cx_MspInit+0x174>)
 8003b5a:	f004 f9f1 	bl	8007f40 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8003b5e:	2380      	movs	r3, #128	; 0x80
 8003b60:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SDA_AF;
 8003b62:	230b      	movs	r3, #11
 8003b64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 8003b66:	f107 031c 	add.w	r3, r7, #28
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	4841      	ldr	r0, [pc, #260]	; (8003c74 <I2Cx_MspInit+0x178>)
 8003b6e:	f004 f9e7 	bl	8007f40 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8003b72:	4b3e      	ldr	r3, [pc, #248]	; (8003c6c <I2Cx_MspInit+0x170>)
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	4a3d      	ldr	r2, [pc, #244]	; (8003c6c <I2Cx_MspInit+0x170>)
 8003b78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b7e:	4b3b      	ldr	r3, [pc, #236]	; (8003c6c <I2Cx_MspInit+0x170>)
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b86:	613b      	str	r3, [r7, #16]
 8003b88:	693b      	ldr	r3, [r7, #16]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8003b8a:	4b38      	ldr	r3, [pc, #224]	; (8003c6c <I2Cx_MspInit+0x170>)
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	4a37      	ldr	r2, [pc, #220]	; (8003c6c <I2Cx_MspInit+0x170>)
 8003b90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b94:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8003b96:	4b35      	ldr	r3, [pc, #212]	; (8003c6c <I2Cx_MspInit+0x170>)
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	4a34      	ldr	r2, [pc, #208]	; (8003c6c <I2Cx_MspInit+0x170>)
 8003b9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ba0:	6213      	str	r3, [r2, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	210f      	movs	r1, #15
 8003ba6:	205f      	movs	r0, #95	; 0x5f
 8003ba8:	f001 fda6 	bl	80056f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8003bac:	205f      	movs	r0, #95	; 0x5f
 8003bae:	f001 fdbf 	bl	8005730 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	210f      	movs	r1, #15
 8003bb6:	2060      	movs	r0, #96	; 0x60
 8003bb8:	f001 fd9e 	bl	80056f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);    
 8003bbc:	2060      	movs	r0, #96	; 0x60
 8003bbe:	f001 fdb7 	bl	8005730 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8003bc2:	e04d      	b.n	8003c60 <I2Cx_MspInit+0x164>
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003bc4:	4b29      	ldr	r3, [pc, #164]	; (8003c6c <I2Cx_MspInit+0x170>)
 8003bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc8:	4a28      	ldr	r2, [pc, #160]	; (8003c6c <I2Cx_MspInit+0x170>)
 8003bca:	f043 0302 	orr.w	r3, r3, #2
 8003bce:	6313      	str	r3, [r2, #48]	; 0x30
 8003bd0:	4b26      	ldr	r3, [pc, #152]	; (8003c6c <I2Cx_MspInit+0x170>)
 8003bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	60fb      	str	r3, [r7, #12]
 8003bda:	68fb      	ldr	r3, [r7, #12]
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8003bdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003be0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003be2:	2312      	movs	r3, #18
 8003be4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003be6:	2300      	movs	r3, #0
 8003be8:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003bea:	2302      	movs	r3, #2
 8003bec:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8003bee:	2304      	movs	r3, #4
 8003bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003bf2:	f107 031c 	add.w	r3, r7, #28
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	481e      	ldr	r0, [pc, #120]	; (8003c74 <I2Cx_MspInit+0x178>)
 8003bfa:	f004 f9a1 	bl	8007f40 <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8003bfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003c04:	f107 031c 	add.w	r3, r7, #28
 8003c08:	4619      	mov	r1, r3
 8003c0a:	481a      	ldr	r0, [pc, #104]	; (8003c74 <I2Cx_MspInit+0x178>)
 8003c0c:	f004 f998 	bl	8007f40 <HAL_GPIO_Init>
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8003c10:	4b16      	ldr	r3, [pc, #88]	; (8003c6c <I2Cx_MspInit+0x170>)
 8003c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c14:	4a15      	ldr	r2, [pc, #84]	; (8003c6c <I2Cx_MspInit+0x170>)
 8003c16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c1a:	6413      	str	r3, [r2, #64]	; 0x40
 8003c1c:	4b13      	ldr	r3, [pc, #76]	; (8003c6c <I2Cx_MspInit+0x170>)
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c24:	60bb      	str	r3, [r7, #8]
 8003c26:	68bb      	ldr	r3, [r7, #8]
  DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8003c28:	4b10      	ldr	r3, [pc, #64]	; (8003c6c <I2Cx_MspInit+0x170>)
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	4a0f      	ldr	r2, [pc, #60]	; (8003c6c <I2Cx_MspInit+0x170>)
 8003c2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c32:	6213      	str	r3, [r2, #32]
  DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8003c34:	4b0d      	ldr	r3, [pc, #52]	; (8003c6c <I2Cx_MspInit+0x170>)
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	4a0c      	ldr	r2, [pc, #48]	; (8003c6c <I2Cx_MspInit+0x170>)
 8003c3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c3e:	6213      	str	r3, [r2, #32]
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8003c40:	2200      	movs	r2, #0
 8003c42:	210f      	movs	r1, #15
 8003c44:	201f      	movs	r0, #31
 8003c46:	f001 fd57 	bl	80056f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8003c4a:	201f      	movs	r0, #31
 8003c4c:	f001 fd70 	bl	8005730 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8003c50:	2200      	movs	r2, #0
 8003c52:	210f      	movs	r1, #15
 8003c54:	2020      	movs	r0, #32
 8003c56:	f001 fd4f 	bl	80056f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8003c5a:	2020      	movs	r0, #32
 8003c5c:	f001 fd68 	bl	8005730 <HAL_NVIC_EnableIRQ>
}
 8003c60:	bf00      	nop
 8003c62:	3730      	adds	r7, #48	; 0x30
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	20001164 	.word	0x20001164
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	40020c00 	.word	0x40020c00
 8003c74:	40020400 	.word	0x40020400

08003c78 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f004 ff1d 	bl	8008ac0 <HAL_I2C_GetState>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d125      	bne.n	8003cd8 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a14      	ldr	r2, [pc, #80]	; (8003ce0 <I2Cx_Init+0x68>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d103      	bne.n	8003c9c <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a13      	ldr	r2, [pc, #76]	; (8003ce4 <I2Cx_Init+0x6c>)
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	e002      	b.n	8003ca2 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a12      	ldr	r2, [pc, #72]	; (8003ce8 <I2Cx_Init+0x70>)
 8003ca0:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a11      	ldr	r2, [pc, #68]	; (8003cec <I2Cx_Init+0x74>)
 8003ca6:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f7ff ff15 	bl	8003afc <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f004 fc06 	bl	80084e4 <HAL_I2C_Init>
  }
}
 8003cd8:	bf00      	nop
 8003cda:	3708      	adds	r7, #8
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	20001164 	.word	0x20001164
 8003ce4:	40006000 	.word	0x40006000
 8003ce8:	40005400 	.word	0x40005400
 8003cec:	40912732 	.word	0x40912732

08003cf0 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b08a      	sub	sp, #40	; 0x28
 8003cf4:	af04      	add	r7, sp, #16
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	4608      	mov	r0, r1
 8003cfa:	4611      	mov	r1, r2
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	4603      	mov	r3, r0
 8003d00:	72fb      	strb	r3, [r7, #11]
 8003d02:	460b      	mov	r3, r1
 8003d04:	813b      	strh	r3, [r7, #8]
 8003d06:	4613      	mov	r3, r2
 8003d08:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003d0e:	7afb      	ldrb	r3, [r7, #11]
 8003d10:	b299      	uxth	r1, r3
 8003d12:	88f8      	ldrh	r0, [r7, #6]
 8003d14:	893a      	ldrh	r2, [r7, #8]
 8003d16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d1a:	9302      	str	r3, [sp, #8]
 8003d1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d1e:	9301      	str	r3, [sp, #4]
 8003d20:	6a3b      	ldr	r3, [r7, #32]
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	4603      	mov	r3, r0
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f004 fdb0 	bl	800888c <HAL_I2C_Mem_Read>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003d30:	7dfb      	ldrb	r3, [r7, #23]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d004      	beq.n	8003d40 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8003d36:	7afb      	ldrb	r3, [r7, #11]
 8003d38:	4619      	mov	r1, r3
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	f000 f832 	bl	8003da4 <I2Cx_Error>
  }
  return status;
 8003d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3718      	adds	r7, #24
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b08a      	sub	sp, #40	; 0x28
 8003d4e:	af04      	add	r7, sp, #16
 8003d50:	60f8      	str	r0, [r7, #12]
 8003d52:	4608      	mov	r0, r1
 8003d54:	4611      	mov	r1, r2
 8003d56:	461a      	mov	r2, r3
 8003d58:	4603      	mov	r3, r0
 8003d5a:	72fb      	strb	r3, [r7, #11]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	813b      	strh	r3, [r7, #8]
 8003d60:	4613      	mov	r3, r2
 8003d62:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003d64:	2300      	movs	r3, #0
 8003d66:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003d68:	7afb      	ldrb	r3, [r7, #11]
 8003d6a:	b299      	uxth	r1, r3
 8003d6c:	88f8      	ldrh	r0, [r7, #6]
 8003d6e:	893a      	ldrh	r2, [r7, #8]
 8003d70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d74:	9302      	str	r3, [sp, #8]
 8003d76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d78:	9301      	str	r3, [sp, #4]
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	4603      	mov	r3, r0
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f004 fc6f 	bl	8008664 <HAL_I2C_Mem_Write>
 8003d86:	4603      	mov	r3, r0
 8003d88:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003d8a:	7dfb      	ldrb	r3, [r7, #23]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d004      	beq.n	8003d9a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003d90:	7afb      	ldrb	r3, [r7, #11]
 8003d92:	4619      	mov	r1, r3
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f000 f805 	bl	8003da4 <I2Cx_Error>
  }
  return status;
 8003d9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3718      	adds	r7, #24
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	460b      	mov	r3, r1
 8003dae:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f004 fc27 	bl	8008604 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7ff ff5e 	bl	8003c78 <I2Cx_Init>
}
 8003dbc:	bf00      	nop
 8003dbe:	3708      	adds	r7, #8
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8003dc8:	4802      	ldr	r0, [pc, #8]	; (8003dd4 <TS_IO_Init+0x10>)
 8003dca:	f7ff ff55 	bl	8003c78 <I2Cx_Init>
}
 8003dce:	bf00      	nop
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	20001164 	.word	0x20001164

08003dd8 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af02      	add	r7, sp, #8
 8003dde:	4603      	mov	r3, r0
 8003de0:	71fb      	strb	r3, [r7, #7]
 8003de2:	460b      	mov	r3, r1
 8003de4:	71bb      	strb	r3, [r7, #6]
 8003de6:	4613      	mov	r3, r2
 8003de8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8003dea:	79bb      	ldrb	r3, [r7, #6]
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	79f9      	ldrb	r1, [r7, #7]
 8003df0:	2301      	movs	r3, #1
 8003df2:	9301      	str	r3, [sp, #4]
 8003df4:	1d7b      	adds	r3, r7, #5
 8003df6:	9300      	str	r3, [sp, #0]
 8003df8:	2301      	movs	r3, #1
 8003dfa:	4803      	ldr	r0, [pc, #12]	; (8003e08 <TS_IO_Write+0x30>)
 8003dfc:	f7ff ffa5 	bl	8003d4a <I2Cx_WriteMultiple>
}
 8003e00:	bf00      	nop
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	20001164 	.word	0x20001164

08003e0c <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af02      	add	r7, sp, #8
 8003e12:	4603      	mov	r3, r0
 8003e14:	460a      	mov	r2, r1
 8003e16:	71fb      	strb	r3, [r7, #7]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8003e20:	79bb      	ldrb	r3, [r7, #6]
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	79f9      	ldrb	r1, [r7, #7]
 8003e26:	2301      	movs	r3, #1
 8003e28:	9301      	str	r3, [sp, #4]
 8003e2a:	f107 030f 	add.w	r3, r7, #15
 8003e2e:	9300      	str	r3, [sp, #0]
 8003e30:	2301      	movs	r3, #1
 8003e32:	4804      	ldr	r0, [pc, #16]	; (8003e44 <TS_IO_Read+0x38>)
 8003e34:	f7ff ff5c 	bl	8003cf0 <I2Cx_ReadMultiple>

  return read_value;
 8003e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3710      	adds	r7, #16
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	20001164 	.word	0x20001164

08003e48 <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af02      	add	r7, sp, #8
 8003e4e:	603a      	str	r2, [r7, #0]
 8003e50:	461a      	mov	r2, r3
 8003e52:	4603      	mov	r3, r0
 8003e54:	71fb      	strb	r3, [r7, #7]
 8003e56:	460b      	mov	r3, r1
 8003e58:	71bb      	strb	r3, [r7, #6]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8003e5e:	79bb      	ldrb	r3, [r7, #6]
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	79f9      	ldrb	r1, [r7, #7]
 8003e64:	88bb      	ldrh	r3, [r7, #4]
 8003e66:	9301      	str	r3, [sp, #4]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	9300      	str	r3, [sp, #0]
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	4804      	ldr	r0, [pc, #16]	; (8003e80 <TS_IO_ReadMultiple+0x38>)
 8003e70:	f7ff ff3e 	bl	8003cf0 <I2Cx_ReadMultiple>
 8003e74:	4603      	mov	r3, r0
 8003e76:	b29b      	uxth	r3, r3
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3708      	adds	r7, #8
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	20001164 	.word	0x20001164

08003e84 <NT35510_IO_Delay>:
/**
  * @brief  NT35510 delay
  * @param  Delay: Delay in ms
  */
void NT35510_IO_Delay(uint32_t Delay)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 ff43 	bl	8004d18 <HAL_Delay>
}
 8003e92:	bf00      	nop
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8003e9e:	2001      	movs	r0, #1
 8003ea0:	f000 f804 	bl	8003eac <BSP_LCD_InitEx>
 8003ea4:	4603      	mov	r3, r0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	bd80      	pop	{r7, pc}
	...

08003eac <BSP_LCD_InitEx>:
  *     - OTM8009A LCD Display IC Driver ititialization
  * @param  orientation: LCD orientation, can be LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b090      	sub	sp, #64	; 0x40
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 8003eb6:	f646 3325 	movw	r3, #27429	; 0x6b25
 8003eba:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t read_id = 0;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	877b      	strh	r3, [r7, #58]	; 0x3a

  uint32_t laneByteClk_kHz = 0;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t                   HFP; /*!< Horizontal Front Porch time in units of lcdClk */
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */

  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 8003ec4:	f000 f936 	bl	8004134 <BSP_LCD_Reset>

  /* Check the connected monitor */
  read_id = LCD_IO_GetID();
 8003ec8:	f000 fb22 	bl	8004510 <LCD_IO_GetID>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	877b      	strh	r3, [r7, #58]	; 0x3a
  else if(read_id != LCD_DSI_ID)
  {
    return LCD_ERROR;  
  }
#else
  if(read_id != LCD_DSI_ID)
 8003ed0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003ed2:	2b11      	cmp	r3, #17
 8003ed4:	d001      	beq.n	8003eda <BSP_LCD_InitEx+0x2e>
  {
    return LCD_ERROR;  
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e113      	b.n	8004102 <BSP_LCD_InitEx+0x256>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 8003eda:	f000 fb21 	bl	8004520 <BSP_LCD_MspInit>

/*************************DSI Initialization***********************************/  

  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_discovery.Instance = DSI;
 8003ede:	4b8b      	ldr	r3, [pc, #556]	; (800410c <BSP_LCD_InitEx+0x260>)
 8003ee0:	4a8b      	ldr	r2, [pc, #556]	; (8004110 <BSP_LCD_InitEx+0x264>)
 8003ee2:	601a      	str	r2, [r3, #0]

  HAL_DSI_DeInit(&(hdsi_discovery));
 8003ee4:	4889      	ldr	r0, [pc, #548]	; (800410c <BSP_LCD_InitEx+0x260>)
 8003ee6:	f002 fd0f 	bl	8006908 <HAL_DSI_DeInit>

  dsiPllInit.PLLNDIV  = 100;
 8003eea:	2364      	movs	r3, #100	; 0x64
 8003eec:	60bb      	str	r3, [r7, #8]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 8003eee:	2305      	movs	r3, #5
 8003ef0:	60fb      	str	r3, [r7, #12]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	613b      	str	r3, [r7, #16]
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 8003ef6:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003efa:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set number of Lanes */
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8003efc:	4b83      	ldr	r3, [pc, #524]	; (800410c <BSP_LCD_InitEx+0x260>)
 8003efe:	2201      	movs	r2, #1
 8003f00:	60da      	str	r2, [r3, #12]

  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8003f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f04:	089b      	lsrs	r3, r3, #2
 8003f06:	4a83      	ldr	r2, [pc, #524]	; (8004114 <BSP_LCD_InitEx+0x268>)
 8003f08:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0c:	0a9b      	lsrs	r3, r3, #10
 8003f0e:	4a7f      	ldr	r2, [pc, #508]	; (800410c <BSP_LCD_InitEx+0x260>)
 8003f10:	6093      	str	r3, [r2, #8]

  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 8003f12:	f107 0308 	add.w	r3, r7, #8
 8003f16:	4619      	mov	r1, r3
 8003f18:	487c      	ldr	r0, [pc, #496]	; (800410c <BSP_LCD_InitEx+0x260>)
 8003f1a:	f002 fbd9 	bl	80066d0 <HAL_DSI_Init>

  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 8003f1e:	79fb      	ldrb	r3, [r7, #7]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d108      	bne.n	8003f36 <BSP_LCD_InitEx+0x8a>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8003f24:	4b7c      	ldr	r3, [pc, #496]	; (8004118 <BSP_LCD_InitEx+0x26c>)
 8003f26:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003f2a:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 8003f2c:	4b7b      	ldr	r3, [pc, #492]	; (800411c <BSP_LCD_InitEx+0x270>)
 8003f2e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	e007      	b.n	8003f46 <BSP_LCD_InitEx+0x9a>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 8003f36:	4b78      	ldr	r3, [pc, #480]	; (8004118 <BSP_LCD_InitEx+0x26c>)
 8003f38:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003f3c:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 8003f3e:	4b77      	ldr	r3, [pc, #476]	; (800411c <BSP_LCD_InitEx+0x270>)
 8003f40:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003f44:	601a      	str	r2, [r3, #0]
  }

  HACT = lcd_x_size;
 8003f46:	4b74      	ldr	r3, [pc, #464]	; (8004118 <BSP_LCD_InitEx+0x26c>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	633b      	str	r3, [r7, #48]	; 0x30
  VACT = lcd_y_size;
 8003f4c:	4b73      	ldr	r3, [pc, #460]	; (800411c <BSP_LCD_InitEx+0x270>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* The following values are same for portrait and landscape orientations */
#if defined (USE_STM32F769I_DISCO_REVB03)
  VSA  = NT35510_480X800_VSYNC;
 8003f52:	2378      	movs	r3, #120	; 0x78
 8003f54:	62bb      	str	r3, [r7, #40]	; 0x28
  VBP  = NT35510_480X800_VBP;
 8003f56:	2396      	movs	r3, #150	; 0x96
 8003f58:	627b      	str	r3, [r7, #36]	; 0x24
  VFP  = NT35510_480X800_VFP;
 8003f5a:	2396      	movs	r3, #150	; 0x96
 8003f5c:	623b      	str	r3, [r7, #32]
  HSA  = NT35510_480X800_HSYNC;
 8003f5e:	2302      	movs	r3, #2
 8003f60:	61fb      	str	r3, [r7, #28]
  HBP  = NT35510_480X800_HBP;
 8003f62:	2322      	movs	r3, #34	; 0x22
 8003f64:	61bb      	str	r3, [r7, #24]
  HFP  = NT35510_480X800_HFP;  
 8003f66:	2322      	movs	r3, #34	; 0x22
 8003f68:	617b      	str	r3, [r7, #20]
  HSA  = OTM8009A_480X800_HSYNC;
  HBP  = OTM8009A_480X800_HBP;
  HFP  = OTM8009A_480X800_HFP;
#endif /* USE_STM32F769I_DISCO_REVB03 */

  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 8003f6a:	4b6d      	ldr	r3, [pc, #436]	; (8004120 <BSP_LCD_InitEx+0x274>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 8003f70:	4b6b      	ldr	r3, [pc, #428]	; (8004120 <BSP_LCD_InitEx+0x274>)
 8003f72:	2205      	movs	r2, #5
 8003f74:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8003f76:	4b6a      	ldr	r3, [pc, #424]	; (8004120 <BSP_LCD_InitEx+0x274>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8003f7c:	4b68      	ldr	r3, [pc, #416]	; (8004120 <BSP_LCD_InitEx+0x274>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 8003f82:	4b67      	ldr	r3, [pc, #412]	; (8004120 <BSP_LCD_InitEx+0x274>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 8003f88:	4b65      	ldr	r3, [pc, #404]	; (8004120 <BSP_LCD_InitEx+0x274>)
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 8003f8e:	4b64      	ldr	r3, [pc, #400]	; (8004120 <BSP_LCD_InitEx+0x274>)
 8003f90:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003f94:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 8003f96:	4b62      	ldr	r3, [pc, #392]	; (8004120 <BSP_LCD_InitEx+0x274>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 8003f9c:	4a60      	ldr	r2, [pc, #384]	; (8004120 <BSP_LCD_InitEx+0x274>)
 8003f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa0:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fa6:	fb03 f202 	mul.w	r2, r3, r2
 8003faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb0:	4a5b      	ldr	r2, [pc, #364]	; (8004120 <BSP_LCD_InitEx+0x274>)
 8003fb2:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fb8:	fb03 f202 	mul.w	r2, r3, r2
 8003fbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc2:	4a57      	ldr	r2, [pc, #348]	; (8004120 <BSP_LCD_InitEx+0x274>)
 8003fc4:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 8003fc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	441a      	add	r2, r3
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	441a      	add	r2, r3
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fd6:	fb03 f202 	mul.w	r2, r3, r2
 8003fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe0:	4a4f      	ldr	r2, [pc, #316]	; (8004120 <BSP_LCD_InitEx+0x274>)
 8003fe2:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 8003fe4:	4a4e      	ldr	r2, [pc, #312]	; (8004120 <BSP_LCD_InitEx+0x274>)
 8003fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe8:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 8003fea:	4a4d      	ldr	r2, [pc, #308]	; (8004120 <BSP_LCD_InitEx+0x274>)
 8003fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fee:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8003ff0:	4a4b      	ldr	r2, [pc, #300]	; (8004120 <BSP_LCD_InitEx+0x274>)
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 8003ff6:	4a4a      	ldr	r2, [pc, #296]	; (8004120 <BSP_LCD_InitEx+0x274>)
 8003ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ffa:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 8003ffc:	4b48      	ldr	r3, [pc, #288]	; (8004120 <BSP_LCD_InitEx+0x274>)
 8003ffe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004002:	645a      	str	r2, [r3, #68]	; 0x44

  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 8004004:	4b46      	ldr	r3, [pc, #280]	; (8004120 <BSP_LCD_InitEx+0x274>)
 8004006:	2210      	movs	r2, #16
 8004008:	649a      	str	r2, [r3, #72]	; 0x48

  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 800400a:	4b45      	ldr	r3, [pc, #276]	; (8004120 <BSP_LCD_InitEx+0x274>)
 800400c:	2200      	movs	r2, #0
 800400e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8004010:	4b43      	ldr	r3, [pc, #268]	; (8004120 <BSP_LCD_InitEx+0x274>)
 8004012:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004016:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8004018:	4b41      	ldr	r3, [pc, #260]	; (8004120 <BSP_LCD_InitEx+0x274>)
 800401a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800401e:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8004020:	4b3f      	ldr	r3, [pc, #252]	; (8004120 <BSP_LCD_InitEx+0x274>)
 8004022:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004026:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8004028:	4b3d      	ldr	r3, [pc, #244]	; (8004120 <BSP_LCD_InitEx+0x274>)
 800402a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800402e:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 8004030:	4b3b      	ldr	r3, [pc, #236]	; (8004120 <BSP_LCD_InitEx+0x274>)
 8004032:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004036:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8004038:	4b39      	ldr	r3, [pc, #228]	; (8004120 <BSP_LCD_InitEx+0x274>)
 800403a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800403e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 8004040:	4937      	ldr	r1, [pc, #220]	; (8004120 <BSP_LCD_InitEx+0x274>)
 8004042:	4832      	ldr	r0, [pc, #200]	; (800410c <BSP_LCD_InitEx+0x260>)
 8004044:	f002 fea0 	bl	8006d88 <HAL_DSI_ConfigVideoMode>
  
  
/************************LTDC Initialization***********************************/  

  /* Timing Configuration */    
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	3b01      	subs	r3, #1
 800404c:	4a35      	ldr	r2, [pc, #212]	; (8004124 <BSP_LCD_InitEx+0x278>)
 800404e:	6153      	str	r3, [r2, #20]
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 8004050:	69fa      	ldr	r2, [r7, #28]
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	4413      	add	r3, r2
 8004056:	3b01      	subs	r3, #1
 8004058:	4a32      	ldr	r2, [pc, #200]	; (8004124 <BSP_LCD_InitEx+0x278>)
 800405a:	61d3      	str	r3, [r2, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 800405c:	4b2e      	ldr	r3, [pc, #184]	; (8004118 <BSP_LCD_InitEx+0x26c>)
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	441a      	add	r2, r3
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	4413      	add	r3, r2
 8004068:	3b01      	subs	r3, #1
 800406a:	4a2e      	ldr	r2, [pc, #184]	; (8004124 <BSP_LCD_InitEx+0x278>)
 800406c:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 800406e:	4b2a      	ldr	r3, [pc, #168]	; (8004118 <BSP_LCD_InitEx+0x26c>)
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	441a      	add	r2, r3
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	441a      	add	r2, r3
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	4413      	add	r3, r2
 800407e:	3b01      	subs	r3, #1
 8004080:	4a28      	ldr	r2, [pc, #160]	; (8004124 <BSP_LCD_InitEx+0x278>)
 8004082:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Initialize the LCD pixel width and pixel height */
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 8004084:	4b24      	ldr	r3, [pc, #144]	; (8004118 <BSP_LCD_InitEx+0x26c>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a26      	ldr	r2, [pc, #152]	; (8004124 <BSP_LCD_InitEx+0x278>)
 800408a:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 800408c:	4b23      	ldr	r3, [pc, #140]	; (800411c <BSP_LCD_InitEx+0x270>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a24      	ldr	r2, [pc, #144]	; (8004124 <BSP_LCD_InitEx+0x278>)
 8004092:	6653      	str	r3, [r2, #100]	; 0x64
    * PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz 
    * PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz 
    * PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.85 MHz 
    * LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.85 MHz / 2 = 27.429 MHz 
    */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004094:	4b24      	ldr	r3, [pc, #144]	; (8004128 <BSP_LCD_InitEx+0x27c>)
 8004096:	2208      	movs	r2, #8
 8004098:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800409a:	4b23      	ldr	r3, [pc, #140]	; (8004128 <BSP_LCD_InitEx+0x27c>)
 800409c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80040a0:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 80040a2:	4b21      	ldr	r3, [pc, #132]	; (8004128 <BSP_LCD_InitEx+0x27c>)
 80040a4:	2207      	movs	r2, #7
 80040a6:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80040a8:	4b1f      	ldr	r3, [pc, #124]	; (8004128 <BSP_LCD_InitEx+0x27c>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80040ae:	481e      	ldr	r0, [pc, #120]	; (8004128 <BSP_LCD_InitEx+0x27c>)
 80040b0:	f007 face 	bl	800b650 <HAL_RCCEx_PeriphCLKConfig>

  /* Background value */
  hltdc_discovery.Init.Backcolor.Blue = 0;
 80040b4:	4b1b      	ldr	r3, [pc, #108]	; (8004124 <BSP_LCD_InitEx+0x278>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_discovery.Init.Backcolor.Green = 0;
 80040bc:	4b19      	ldr	r3, [pc, #100]	; (8004124 <BSP_LCD_InitEx+0x278>)
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_discovery.Init.Backcolor.Red = 0;
 80040c4:	4b17      	ldr	r3, [pc, #92]	; (8004124 <BSP_LCD_InitEx+0x278>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80040cc:	4b15      	ldr	r3, [pc, #84]	; (8004124 <BSP_LCD_InitEx+0x278>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	611a      	str	r2, [r3, #16]
  hltdc_discovery.Instance = LTDC;
 80040d2:	4b14      	ldr	r3, [pc, #80]	; (8004124 <BSP_LCD_InitEx+0x278>)
 80040d4:	4a15      	ldr	r2, [pc, #84]	; (800412c <BSP_LCD_InitEx+0x280>)
 80040d6:	601a      	str	r2, [r3, #0]

  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 80040d8:	4911      	ldr	r1, [pc, #68]	; (8004120 <BSP_LCD_InitEx+0x274>)
 80040da:	4812      	ldr	r0, [pc, #72]	; (8004124 <BSP_LCD_InitEx+0x278>)
 80040dc:	f005 fb9a 	bl	8009814 <HAL_LTDCEx_StructInitFromVideoConfig>

  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_discovery);
 80040e0:	4810      	ldr	r0, [pc, #64]	; (8004124 <BSP_LCD_InitEx+0x278>)
 80040e2:	f005 f82d 	bl	8009140 <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&hdsi_discovery);
 80040e6:	4809      	ldr	r0, [pc, #36]	; (800410c <BSP_LCD_InitEx+0x260>)
 80040e8:	f003 fae0 	bl	80076ac <HAL_DSI_Start>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80040ec:	f000 faba 	bl	8004664 <BSP_SDRAM_Init>
#endif /* DATA_IN_ExtSDRAM */

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80040f0:	480f      	ldr	r0, [pc, #60]	; (8004130 <BSP_LCD_InitEx+0x284>)
 80040f2:	f000 f8f7 	bl	80042e4 <BSP_LCD_SetFont>
/***********************NT35510 Initialization********************************/  
  
  /* Initialize the NT35510 LCD Display IC Driver (TechShine LCD IC Driver)
   * depending on configuration set in 'hdsivideo_handle'.
   */
  NT35510_Init(NT35510_FORMAT_RGB888, orientation);
 80040f6:	79fb      	ldrb	r3, [r7, #7]
 80040f8:	4619      	mov	r1, r3
 80040fa:	2000      	movs	r0, #0
 80040fc:	f7ff fb06 	bl	800370c <NT35510_Init>

/***********************End OTM8009A Initialization****************************/ 
#endif /* USE_STM32F769I_DISCO_REVB03 */


  return LCD_OK; 
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3740      	adds	r7, #64	; 0x40
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	20001324 	.word	0x20001324
 8004110:	40016c00 	.word	0x40016c00
 8004114:	43215e57 	.word	0x43215e57
 8004118:	20000034 	.word	0x20000034
 800411c:	20000038 	.word	0x20000038
 8004120:	200011b8 	.word	0x200011b8
 8004124:	2000127c 	.word	0x2000127c
 8004128:	2000135c 	.word	0x2000135c
 800412c:	40016800 	.word	0x40016800
 8004130:	2000002c 	.word	0x2000002c

08004134 <BSP_LCD_Reset>:
  * @brief  BSP LCD Reset
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  */
void BSP_LCD_Reset(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800413a:	4b18      	ldr	r3, [pc, #96]	; (800419c <BSP_LCD_Reset+0x68>)
 800413c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413e:	4a17      	ldr	r2, [pc, #92]	; (800419c <BSP_LCD_Reset+0x68>)
 8004140:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004144:	6313      	str	r3, [r2, #48]	; 0x30
 8004146:	4b15      	ldr	r3, [pc, #84]	; (800419c <BSP_LCD_Reset+0x68>)
 8004148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800414e:	603b      	str	r3, [r7, #0]
 8004150:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PJ15 */
    gpio_init_structure.Pin   = GPIO_PIN_15;
 8004152:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004156:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8004158:	2301      	movs	r3, #1
 800415a:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 800415c:	2301      	movs	r3, #1
 800415e:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8004160:	2303      	movs	r3, #3
 8004162:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8004164:	1d3b      	adds	r3, r7, #4
 8004166:	4619      	mov	r1, r3
 8004168:	480d      	ldr	r0, [pc, #52]	; (80041a0 <BSP_LCD_Reset+0x6c>)
 800416a:	f003 fee9 	bl	8007f40 <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 800416e:	2200      	movs	r2, #0
 8004170:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004174:	480a      	ldr	r0, [pc, #40]	; (80041a0 <BSP_LCD_Reset+0x6c>)
 8004176:	f004 f99b 	bl	80084b0 <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 800417a:	2014      	movs	r0, #20
 800417c:	f000 fdcc 	bl	8004d18 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 8004180:	2201      	movs	r2, #1
 8004182:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004186:	4806      	ldr	r0, [pc, #24]	; (80041a0 <BSP_LCD_Reset+0x6c>)
 8004188:	f004 f992 	bl	80084b0 <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);
 800418c:	200a      	movs	r0, #10
 800418e:	f000 fdc3 	bl	8004d18 <HAL_Delay>
}
 8004192:	bf00      	nop
 8004194:	3718      	adds	r7, #24
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	40023800 	.word	0x40023800
 80041a0:	40022400 	.word	0x40022400

080041a4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80041a4:	b480      	push	{r7}
 80041a6:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 80041a8:	4b03      	ldr	r3, [pc, #12]	; (80041b8 <BSP_LCD_GetXSize+0x14>)
 80041aa:	681b      	ldr	r3, [r3, #0]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	20000034 	.word	0x20000034

080041bc <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 80041c0:	4b03      	ldr	r3, [pc, #12]	; (80041d0 <BSP_LCD_GetYSize+0x14>)
 80041c2:	681b      	ldr	r3, [r3, #0]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	20000038 	.word	0x20000038

080041d4 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b090      	sub	sp, #64	; 0x40
 80041d8:	af00      	add	r7, sp, #0
 80041da:	4603      	mov	r3, r0
 80041dc:	6039      	str	r1, [r7, #0]
 80041de:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 80041e0:	2300      	movs	r3, #0
 80041e2:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80041e4:	f7ff ffde 	bl	80041a4 <BSP_LCD_GetXSize>
 80041e8:	4603      	mov	r3, r0
 80041ea:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80041ec:	2300      	movs	r3, #0
 80041ee:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80041f0:	f7ff ffe4 	bl	80041bc <BSP_LCD_GetYSize>
 80041f4:	4603      	mov	r3, r0
 80041f6:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80041f8:	2300      	movs	r3, #0
 80041fa:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8004200:	23ff      	movs	r3, #255	; 0xff
 8004202:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8004204:	2300      	movs	r3, #0
 8004206:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8004208:	2300      	movs	r3, #0
 800420a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800420e:	2300      	movs	r3, #0
 8004210:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8004214:	2300      	movs	r3, #0
 8004216:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800421a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800421e:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8004220:	2307      	movs	r3, #7
 8004222:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8004224:	f7ff ffbe 	bl	80041a4 <BSP_LCD_GetXSize>
 8004228:	4603      	mov	r3, r0
 800422a:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 800422c:	f7ff ffc6 	bl	80041bc <BSP_LCD_GetYSize>
 8004230:	4603      	mov	r3, r0
 8004232:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 8004234:	88fa      	ldrh	r2, [r7, #6]
 8004236:	f107 030c 	add.w	r3, r7, #12
 800423a:	4619      	mov	r1, r3
 800423c:	4812      	ldr	r0, [pc, #72]	; (8004288 <BSP_LCD_LayerDefaultInit+0xb4>)
 800423e:	f005 f911 	bl	8009464 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8004242:	88fa      	ldrh	r2, [r7, #6]
 8004244:	4911      	ldr	r1, [pc, #68]	; (800428c <BSP_LCD_LayerDefaultInit+0xb8>)
 8004246:	4613      	mov	r3, r2
 8004248:	005b      	lsls	r3, r3, #1
 800424a:	4413      	add	r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	440b      	add	r3, r1
 8004250:	3304      	adds	r3, #4
 8004252:	f04f 32ff 	mov.w	r2, #4294967295
 8004256:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8004258:	88fa      	ldrh	r2, [r7, #6]
 800425a:	490c      	ldr	r1, [pc, #48]	; (800428c <BSP_LCD_LayerDefaultInit+0xb8>)
 800425c:	4613      	mov	r3, r2
 800425e:	005b      	lsls	r3, r3, #1
 8004260:	4413      	add	r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	440b      	add	r3, r1
 8004266:	3308      	adds	r3, #8
 8004268:	4a09      	ldr	r2, [pc, #36]	; (8004290 <BSP_LCD_LayerDefaultInit+0xbc>)
 800426a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 800426c:	88fa      	ldrh	r2, [r7, #6]
 800426e:	4907      	ldr	r1, [pc, #28]	; (800428c <BSP_LCD_LayerDefaultInit+0xb8>)
 8004270:	4613      	mov	r3, r2
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	4413      	add	r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	440b      	add	r3, r1
 800427a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800427e:	601a      	str	r2, [r3, #0]
}
 8004280:	bf00      	nop
 8004282:	3740      	adds	r7, #64	; 0x40
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	2000127c 	.word	0x2000127c
 800428c:	20001344 	.word	0x20001344
 8004290:	2000002c 	.word	0x2000002c

08004294 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 800429c:	4a04      	ldr	r2, [pc, #16]	; (80042b0 <BSP_LCD_SelectLayer+0x1c>)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6013      	str	r3, [r2, #0]
}
 80042a2:	bf00      	nop
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	20001340 	.word	0x20001340

080042b4 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80042bc:	4b07      	ldr	r3, [pc, #28]	; (80042dc <BSP_LCD_SetTextColor+0x28>)
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	4907      	ldr	r1, [pc, #28]	; (80042e0 <BSP_LCD_SetTextColor+0x2c>)
 80042c2:	4613      	mov	r3, r2
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	4413      	add	r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	440b      	add	r3, r1
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	601a      	str	r2, [r3, #0]
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	20001340 	.word	0x20001340
 80042e0:	20001344 	.word	0x20001344

080042e4 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80042ec:	4b08      	ldr	r3, [pc, #32]	; (8004310 <BSP_LCD_SetFont+0x2c>)
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	4908      	ldr	r1, [pc, #32]	; (8004314 <BSP_LCD_SetFont+0x30>)
 80042f2:	4613      	mov	r3, r2
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	4413      	add	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	440b      	add	r3, r1
 80042fc:	3308      	adds	r3, #8
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	601a      	str	r2, [r3, #0]
}
 8004302:	bf00      	nop
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	20001340 	.word	0x20001340
 8004314:	20001344 	.word	0x20001344

08004318 <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8004318:	b5b0      	push	{r4, r5, r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af02      	add	r7, sp, #8
 800431e:	4603      	mov	r3, r0
 8004320:	80fb      	strh	r3, [r7, #6]
 8004322:	460b      	mov	r3, r1
 8004324:	80bb      	strh	r3, [r7, #4]
 8004326:	4613      	mov	r3, r2
 8004328:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 800432a:	2300      	movs	r3, #0
 800432c:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800432e:	4b16      	ldr	r3, [pc, #88]	; (8004388 <BSP_LCD_DrawHLine+0x70>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a16      	ldr	r2, [pc, #88]	; (800438c <BSP_LCD_DrawHLine+0x74>)
 8004334:	2134      	movs	r1, #52	; 0x34
 8004336:	fb01 f303 	mul.w	r3, r1, r3
 800433a:	4413      	add	r3, r2
 800433c:	335c      	adds	r3, #92	; 0x5c
 800433e:	681c      	ldr	r4, [r3, #0]
 8004340:	f7ff ff30 	bl	80041a4 <BSP_LCD_GetXSize>
 8004344:	4602      	mov	r2, r0
 8004346:	88bb      	ldrh	r3, [r7, #4]
 8004348:	fb03 f202 	mul.w	r2, r3, r2
 800434c:	88fb      	ldrh	r3, [r7, #6]
 800434e:	4413      	add	r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4423      	add	r3, r4
 8004354:	60fb      	str	r3, [r7, #12]

  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8004356:	4b0c      	ldr	r3, [pc, #48]	; (8004388 <BSP_LCD_DrawHLine+0x70>)
 8004358:	6818      	ldr	r0, [r3, #0]
 800435a:	68f9      	ldr	r1, [r7, #12]
 800435c:	887c      	ldrh	r4, [r7, #2]
 800435e:	4b0a      	ldr	r3, [pc, #40]	; (8004388 <BSP_LCD_DrawHLine+0x70>)
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	4d0b      	ldr	r5, [pc, #44]	; (8004390 <BSP_LCD_DrawHLine+0x78>)
 8004364:	4613      	mov	r3, r2
 8004366:	005b      	lsls	r3, r3, #1
 8004368:	4413      	add	r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	442b      	add	r3, r5
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	9301      	str	r3, [sp, #4]
 8004372:	2300      	movs	r3, #0
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	2301      	movs	r3, #1
 8004378:	4622      	mov	r2, r4
 800437a:	f000 f93b 	bl	80045f4 <LL_FillBuffer>
}
 800437e:	bf00      	nop
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bdb0      	pop	{r4, r5, r7, pc}
 8004386:	bf00      	nop
 8004388:	20001340 	.word	0x20001340
 800438c:	2000127c 	.word	0x2000127c
 8004390:	20001344 	.word	0x20001344

08004394 <BSP_LCD_DrawVLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8004394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004396:	b087      	sub	sp, #28
 8004398:	af02      	add	r7, sp, #8
 800439a:	4603      	mov	r3, r0
 800439c:	80fb      	strh	r3, [r7, #6]
 800439e:	460b      	mov	r3, r1
 80043a0:	80bb      	strh	r3, [r7, #4]
 80043a2:	4613      	mov	r3, r2
 80043a4:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 80043a6:	2300      	movs	r3, #0
 80043a8:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80043aa:	4b18      	ldr	r3, [pc, #96]	; (800440c <BSP_LCD_DrawVLine+0x78>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a18      	ldr	r2, [pc, #96]	; (8004410 <BSP_LCD_DrawVLine+0x7c>)
 80043b0:	2134      	movs	r1, #52	; 0x34
 80043b2:	fb01 f303 	mul.w	r3, r1, r3
 80043b6:	4413      	add	r3, r2
 80043b8:	335c      	adds	r3, #92	; 0x5c
 80043ba:	681c      	ldr	r4, [r3, #0]
 80043bc:	f7ff fef2 	bl	80041a4 <BSP_LCD_GetXSize>
 80043c0:	4602      	mov	r2, r0
 80043c2:	88bb      	ldrh	r3, [r7, #4]
 80043c4:	fb03 f202 	mul.w	r2, r3, r2
 80043c8:	88fb      	ldrh	r3, [r7, #6]
 80043ca:	4413      	add	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4423      	add	r3, r4
 80043d0:	60fb      	str	r3, [r7, #12]

  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 80043d2:	4b0e      	ldr	r3, [pc, #56]	; (800440c <BSP_LCD_DrawVLine+0x78>)
 80043d4:	681c      	ldr	r4, [r3, #0]
 80043d6:	68fd      	ldr	r5, [r7, #12]
 80043d8:	887e      	ldrh	r6, [r7, #2]
 80043da:	f7ff fee3 	bl	80041a4 <BSP_LCD_GetXSize>
 80043de:	4603      	mov	r3, r0
 80043e0:	1e59      	subs	r1, r3, #1
 80043e2:	4b0a      	ldr	r3, [pc, #40]	; (800440c <BSP_LCD_DrawVLine+0x78>)
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	480b      	ldr	r0, [pc, #44]	; (8004414 <BSP_LCD_DrawVLine+0x80>)
 80043e8:	4613      	mov	r3, r2
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	4413      	add	r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	4403      	add	r3, r0
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	9301      	str	r3, [sp, #4]
 80043f6:	9100      	str	r1, [sp, #0]
 80043f8:	4633      	mov	r3, r6
 80043fa:	2201      	movs	r2, #1
 80043fc:	4629      	mov	r1, r5
 80043fe:	4620      	mov	r0, r4
 8004400:	f000 f8f8 	bl	80045f4 <LL_FillBuffer>
}
 8004404:	bf00      	nop
 8004406:	3714      	adds	r7, #20
 8004408:	46bd      	mov	sp, r7
 800440a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800440c:	20001340 	.word	0x20001340
 8004410:	2000127c 	.word	0x2000127c
 8004414:	20001344 	.word	0x20001344

08004418 <BSP_LCD_DrawRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8004418:	b590      	push	{r4, r7, lr}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	4604      	mov	r4, r0
 8004420:	4608      	mov	r0, r1
 8004422:	4611      	mov	r1, r2
 8004424:	461a      	mov	r2, r3
 8004426:	4623      	mov	r3, r4
 8004428:	80fb      	strh	r3, [r7, #6]
 800442a:	4603      	mov	r3, r0
 800442c:	80bb      	strh	r3, [r7, #4]
 800442e:	460b      	mov	r3, r1
 8004430:	807b      	strh	r3, [r7, #2]
 8004432:	4613      	mov	r3, r2
 8004434:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8004436:	887a      	ldrh	r2, [r7, #2]
 8004438:	88b9      	ldrh	r1, [r7, #4]
 800443a:	88fb      	ldrh	r3, [r7, #6]
 800443c:	4618      	mov	r0, r3
 800443e:	f7ff ff6b 	bl	8004318 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8004442:	88ba      	ldrh	r2, [r7, #4]
 8004444:	883b      	ldrh	r3, [r7, #0]
 8004446:	4413      	add	r3, r2
 8004448:	b299      	uxth	r1, r3
 800444a:	887a      	ldrh	r2, [r7, #2]
 800444c:	88fb      	ldrh	r3, [r7, #6]
 800444e:	4618      	mov	r0, r3
 8004450:	f7ff ff62 	bl	8004318 <BSP_LCD_DrawHLine>

  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8004454:	883a      	ldrh	r2, [r7, #0]
 8004456:	88b9      	ldrh	r1, [r7, #4]
 8004458:	88fb      	ldrh	r3, [r7, #6]
 800445a:	4618      	mov	r0, r3
 800445c:	f7ff ff9a 	bl	8004394 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8004460:	88fa      	ldrh	r2, [r7, #6]
 8004462:	887b      	ldrh	r3, [r7, #2]
 8004464:	4413      	add	r3, r2
 8004466:	b29b      	uxth	r3, r3
 8004468:	883a      	ldrh	r2, [r7, #0]
 800446a:	88b9      	ldrh	r1, [r7, #4]
 800446c:	4618      	mov	r0, r3
 800446e:	f7ff ff91 	bl	8004394 <BSP_LCD_DrawVLine>
}
 8004472:	bf00      	nop
 8004474:	370c      	adds	r7, #12
 8004476:	46bd      	mov	sp, r7
 8004478:	bd90      	pop	{r4, r7, pc}
	...

0800447c <BSP_LCD_SetBrightness>:
/**
  * @brief  Set the brightness value 
  * @param  BrightnessValue: [00: Min (black), 100 Max]
  */
void BSP_LCD_SetBrightness(uint8_t BrightnessValue)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af02      	add	r7, sp, #8
 8004482:	4603      	mov	r3, r0
 8004484:	71fb      	strb	r3, [r7, #7]
  {
    /* Send Display on DCS command to display */
    HAL_DSI_ShortWrite(&hdsi_discovery, 
                       LCD_OTM8009A_ID, 
                       DSI_DCS_SHORT_PKT_WRITE_P1, 
                       OTM8009A_CMD_WRDISBV, (uint16_t)(BrightnessValue * 255)/100);
 8004486:	79fb      	ldrb	r3, [r7, #7]
 8004488:	b29b      	uxth	r3, r3
 800448a:	461a      	mov	r2, r3
 800448c:	0212      	lsls	r2, r2, #8
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	b29b      	uxth	r3, r3
    HAL_DSI_ShortWrite(&hdsi_discovery, 
 8004492:	4a08      	ldr	r2, [pc, #32]	; (80044b4 <BSP_LCD_SetBrightness+0x38>)
 8004494:	fba2 2303 	umull	r2, r3, r2, r3
 8004498:	095b      	lsrs	r3, r3, #5
 800449a:	b29b      	uxth	r3, r3
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	2351      	movs	r3, #81	; 0x51
 80044a0:	2215      	movs	r2, #21
 80044a2:	2100      	movs	r1, #0
 80044a4:	4804      	ldr	r0, [pc, #16]	; (80044b8 <BSP_LCD_SetBrightness+0x3c>)
 80044a6:	f003 f93d 	bl	8007724 <HAL_DSI_ShortWrite>
  }  
}
 80044aa:	bf00      	nop
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	51eb851f 	.word	0x51eb851f
 80044b8:	20001324 	.word	0x20001324

080044bc <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af02      	add	r7, sp, #8
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d80d      	bhi.n	80044e8 <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	461a      	mov	r2, r3
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	3301      	adds	r3, #1
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	9300      	str	r3, [sp, #0]
 80044da:	4613      	mov	r3, r2
 80044dc:	2215      	movs	r2, #21
 80044de:	2100      	movs	r1, #0
 80044e0:	480a      	ldr	r0, [pc, #40]	; (800450c <DSI_IO_WriteCmd+0x50>)
 80044e2:	f003 f91f 	bl	8007724 <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  } 
}
 80044e6:	e00d      	b.n	8004504 <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 80044e8:	683a      	ldr	r2, [r7, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4413      	add	r3, r2
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	461a      	mov	r2, r3
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	9301      	str	r3, [sp, #4]
 80044f6:	9200      	str	r2, [sp, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2239      	movs	r2, #57	; 0x39
 80044fc:	2100      	movs	r1, #0
 80044fe:	4803      	ldr	r0, [pc, #12]	; (800450c <DSI_IO_WriteCmd+0x50>)
 8004500:	f003 f932 	bl	8007768 <HAL_DSI_LongWrite>
}
 8004504:	bf00      	nop
 8004506:	3708      	adds	r7, #8
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	20001324 	.word	0x20001324

08004510 <LCD_IO_GetID>:
  * @brief  Returns the ID of connected screen by checking the HDMI
  *        (adv7533 component) ID or LCD DSI (via TS ID) ID.
  * @retval LCD ID
  */
static uint16_t LCD_IO_GetID(void)
{ 
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0
  else
  {
    return 0;
  }
#else 
  return LCD_DSI_ID; 
 8004514:	2311      	movs	r3, #17
#endif /* USE_LCD_HDMI */
}
 8004516:	4618      	mov	r0, r3
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8004526:	4b32      	ldr	r3, [pc, #200]	; (80045f0 <BSP_LCD_MspInit+0xd0>)
 8004528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452a:	4a31      	ldr	r2, [pc, #196]	; (80045f0 <BSP_LCD_MspInit+0xd0>)
 800452c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004530:	6453      	str	r3, [r2, #68]	; 0x44
 8004532:	4b2f      	ldr	r3, [pc, #188]	; (80045f0 <BSP_LCD_MspInit+0xd0>)
 8004534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004536:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800453a:	60fb      	str	r3, [r7, #12]
 800453c:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 800453e:	4b2c      	ldr	r3, [pc, #176]	; (80045f0 <BSP_LCD_MspInit+0xd0>)
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004542:	4a2b      	ldr	r2, [pc, #172]	; (80045f0 <BSP_LCD_MspInit+0xd0>)
 8004544:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004548:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 800454a:	4b29      	ldr	r3, [pc, #164]	; (80045f0 <BSP_LCD_MspInit+0xd0>)
 800454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454e:	4a28      	ldr	r2, [pc, #160]	; (80045f0 <BSP_LCD_MspInit+0xd0>)
 8004550:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004554:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8004556:	4b26      	ldr	r3, [pc, #152]	; (80045f0 <BSP_LCD_MspInit+0xd0>)
 8004558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455a:	4a25      	ldr	r2, [pc, #148]	; (80045f0 <BSP_LCD_MspInit+0xd0>)
 800455c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004560:	6313      	str	r3, [r2, #48]	; 0x30
 8004562:	4b23      	ldr	r3, [pc, #140]	; (80045f0 <BSP_LCD_MspInit+0xd0>)
 8004564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004566:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800456a:	60bb      	str	r3, [r7, #8]
 800456c:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 800456e:	4b20      	ldr	r3, [pc, #128]	; (80045f0 <BSP_LCD_MspInit+0xd0>)
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	4a1f      	ldr	r2, [pc, #124]	; (80045f0 <BSP_LCD_MspInit+0xd0>)
 8004574:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004578:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 800457a:	4b1d      	ldr	r3, [pc, #116]	; (80045f0 <BSP_LCD_MspInit+0xd0>)
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	4a1c      	ldr	r2, [pc, #112]	; (80045f0 <BSP_LCD_MspInit+0xd0>)
 8004580:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004584:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 8004586:	4b1a      	ldr	r3, [pc, #104]	; (80045f0 <BSP_LCD_MspInit+0xd0>)
 8004588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458a:	4a19      	ldr	r2, [pc, #100]	; (80045f0 <BSP_LCD_MspInit+0xd0>)
 800458c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004590:	6453      	str	r3, [r2, #68]	; 0x44
 8004592:	4b17      	ldr	r3, [pc, #92]	; (80045f0 <BSP_LCD_MspInit+0xd0>)
 8004594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004596:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800459a:	607b      	str	r3, [r7, #4]
 800459c:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 800459e:	4b14      	ldr	r3, [pc, #80]	; (80045f0 <BSP_LCD_MspInit+0xd0>)
 80045a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a2:	4a13      	ldr	r2, [pc, #76]	; (80045f0 <BSP_LCD_MspInit+0xd0>)
 80045a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80045a8:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 80045aa:	4b11      	ldr	r3, [pc, #68]	; (80045f0 <BSP_LCD_MspInit+0xd0>)
 80045ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ae:	4a10      	ldr	r2, [pc, #64]	; (80045f0 <BSP_LCD_MspInit+0xd0>)
 80045b0:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80045b4:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 80045b6:	2200      	movs	r2, #0
 80045b8:	2103      	movs	r1, #3
 80045ba:	2058      	movs	r0, #88	; 0x58
 80045bc:	f001 f89c 	bl	80056f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80045c0:	2058      	movs	r0, #88	; 0x58
 80045c2:	f001 f8b5 	bl	8005730 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 80045c6:	2200      	movs	r2, #0
 80045c8:	2103      	movs	r1, #3
 80045ca:	205a      	movs	r0, #90	; 0x5a
 80045cc:	f001 f894 	bl	80056f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80045d0:	205a      	movs	r0, #90	; 0x5a
 80045d2:	f001 f8ad 	bl	8005730 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 80045d6:	2200      	movs	r2, #0
 80045d8:	2103      	movs	r1, #3
 80045da:	2062      	movs	r0, #98	; 0x62
 80045dc:	f001 f88c 	bl	80056f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 80045e0:	2062      	movs	r0, #98	; 0x62
 80045e2:	f001 f8a5 	bl	8005730 <HAL_NVIC_EnableIRQ>
}
 80045e6:	bf00      	nop
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	40023800 	.word	0x40023800

080045f4 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af02      	add	r7, sp, #8
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
 8004600:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 8004602:	4b16      	ldr	r3, [pc, #88]	; (800465c <LL_FillBuffer+0x68>)
 8004604:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004608:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 800460a:	4b14      	ldr	r3, [pc, #80]	; (800465c <LL_FillBuffer+0x68>)
 800460c:	2200      	movs	r2, #0
 800460e:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 8004610:	4a12      	ldr	r2, [pc, #72]	; (800465c <LL_FillBuffer+0x68>)
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	60d3      	str	r3, [r2, #12]

  hdma2d_discovery.Instance = DMA2D;
 8004616:	4b11      	ldr	r3, [pc, #68]	; (800465c <LL_FillBuffer+0x68>)
 8004618:	4a11      	ldr	r2, [pc, #68]	; (8004660 <LL_FillBuffer+0x6c>)
 800461a:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 800461c:	480f      	ldr	r0, [pc, #60]	; (800465c <LL_FillBuffer+0x68>)
 800461e:	f001 fc57 	bl	8005ed0 <HAL_DMA2D_Init>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d115      	bne.n	8004654 <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 8004628:	68f9      	ldr	r1, [r7, #12]
 800462a:	480c      	ldr	r0, [pc, #48]	; (800465c <LL_FillBuffer+0x68>)
 800462c:	f001 fece 	bl	80063cc <HAL_DMA2D_ConfigLayer>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10e      	bne.n	8004654 <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	9300      	str	r3, [sp, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	69f9      	ldr	r1, [r7, #28]
 8004640:	4806      	ldr	r0, [pc, #24]	; (800465c <LL_FillBuffer+0x68>)
 8004642:	f001 fc9f 	bl	8005f84 <HAL_DMA2D_Start>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d103      	bne.n	8004654 <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 800464c:	210a      	movs	r1, #10
 800464e:	4803      	ldr	r0, [pc, #12]	; (800465c <LL_FillBuffer+0x68>)
 8004650:	f001 fcc3 	bl	8005fda <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8004654:	bf00      	nop
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	20001224 	.word	0x20001224
 8004660:	4002b000 	.word	0x4002b000

08004664 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8004664:	b580      	push	{r7, lr}
 8004666:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004668:	4b29      	ldr	r3, [pc, #164]	; (8004710 <BSP_SDRAM_Init+0xac>)
 800466a:	4a2a      	ldr	r2, [pc, #168]	; (8004714 <BSP_SDRAM_Init+0xb0>)
 800466c:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800466e:	4b2a      	ldr	r3, [pc, #168]	; (8004718 <BSP_SDRAM_Init+0xb4>)
 8004670:	2202      	movs	r2, #2
 8004672:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8004674:	4b28      	ldr	r3, [pc, #160]	; (8004718 <BSP_SDRAM_Init+0xb4>)
 8004676:	2207      	movs	r2, #7
 8004678:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 800467a:	4b27      	ldr	r3, [pc, #156]	; (8004718 <BSP_SDRAM_Init+0xb4>)
 800467c:	2204      	movs	r2, #4
 800467e:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8004680:	4b25      	ldr	r3, [pc, #148]	; (8004718 <BSP_SDRAM_Init+0xb4>)
 8004682:	2207      	movs	r2, #7
 8004684:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8004686:	4b24      	ldr	r3, [pc, #144]	; (8004718 <BSP_SDRAM_Init+0xb4>)
 8004688:	2202      	movs	r2, #2
 800468a:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 800468c:	4b22      	ldr	r3, [pc, #136]	; (8004718 <BSP_SDRAM_Init+0xb4>)
 800468e:	2202      	movs	r2, #2
 8004690:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8004692:	4b21      	ldr	r3, [pc, #132]	; (8004718 <BSP_SDRAM_Init+0xb4>)
 8004694:	2202      	movs	r2, #2
 8004696:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8004698:	4b1d      	ldr	r3, [pc, #116]	; (8004710 <BSP_SDRAM_Init+0xac>)
 800469a:	2200      	movs	r2, #0
 800469c:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800469e:	4b1c      	ldr	r3, [pc, #112]	; (8004710 <BSP_SDRAM_Init+0xac>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80046a4:	4b1a      	ldr	r3, [pc, #104]	; (8004710 <BSP_SDRAM_Init+0xac>)
 80046a6:	2204      	movs	r2, #4
 80046a8:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80046aa:	4b19      	ldr	r3, [pc, #100]	; (8004710 <BSP_SDRAM_Init+0xac>)
 80046ac:	2220      	movs	r2, #32
 80046ae:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80046b0:	4b17      	ldr	r3, [pc, #92]	; (8004710 <BSP_SDRAM_Init+0xac>)
 80046b2:	2240      	movs	r2, #64	; 0x40
 80046b4:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80046b6:	4b16      	ldr	r3, [pc, #88]	; (8004710 <BSP_SDRAM_Init+0xac>)
 80046b8:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80046bc:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80046be:	4b14      	ldr	r3, [pc, #80]	; (8004710 <BSP_SDRAM_Init+0xac>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80046c4:	4b12      	ldr	r3, [pc, #72]	; (8004710 <BSP_SDRAM_Init+0xac>)
 80046c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046ca:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80046cc:	4b10      	ldr	r3, [pc, #64]	; (8004710 <BSP_SDRAM_Init+0xac>)
 80046ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80046d2:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80046d4:	4b0e      	ldr	r3, [pc, #56]	; (8004710 <BSP_SDRAM_Init+0xac>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80046da:	2100      	movs	r1, #0
 80046dc:	480c      	ldr	r0, [pc, #48]	; (8004710 <BSP_SDRAM_Init+0xac>)
 80046de:	f000 f87f 	bl	80047e0 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80046e2:	490d      	ldr	r1, [pc, #52]	; (8004718 <BSP_SDRAM_Init+0xb4>)
 80046e4:	480a      	ldr	r0, [pc, #40]	; (8004710 <BSP_SDRAM_Init+0xac>)
 80046e6:	f008 fa6d 	bl	800cbc4 <HAL_SDRAM_Init>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d003      	beq.n	80046f8 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80046f0:	4b0a      	ldr	r3, [pc, #40]	; (800471c <BSP_SDRAM_Init+0xb8>)
 80046f2:	2201      	movs	r2, #1
 80046f4:	701a      	strb	r2, [r3, #0]
 80046f6:	e002      	b.n	80046fe <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80046f8:	4b08      	ldr	r3, [pc, #32]	; (800471c <BSP_SDRAM_Init+0xb8>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80046fe:	f240 6003 	movw	r0, #1539	; 0x603
 8004702:	f000 f80d 	bl	8004720 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8004706:	4b05      	ldr	r3, [pc, #20]	; (800471c <BSP_SDRAM_Init+0xb8>)
 8004708:	781b      	ldrb	r3, [r3, #0]
}
 800470a:	4618      	mov	r0, r3
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	200013ec 	.word	0x200013ec
 8004714:	a0000140 	.word	0xa0000140
 8004718:	20001420 	.word	0x20001420
 800471c:	2000003c 	.word	0x2000003c

08004720 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8004728:	2300      	movs	r3, #0
 800472a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800472c:	4b2a      	ldr	r3, [pc, #168]	; (80047d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800472e:	2201      	movs	r2, #1
 8004730:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004732:	4b29      	ldr	r3, [pc, #164]	; (80047d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004734:	2210      	movs	r2, #16
 8004736:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004738:	4b27      	ldr	r3, [pc, #156]	; (80047d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800473a:	2201      	movs	r2, #1
 800473c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800473e:	4b26      	ldr	r3, [pc, #152]	; (80047d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004740:	2200      	movs	r2, #0
 8004742:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004744:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004748:	4923      	ldr	r1, [pc, #140]	; (80047d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800474a:	4824      	ldr	r0, [pc, #144]	; (80047dc <BSP_SDRAM_Initialization_sequence+0xbc>)
 800474c:	f008 fa6e 	bl	800cc2c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004750:	2001      	movs	r0, #1
 8004752:	f000 fae1 	bl	8004d18 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8004756:	4b20      	ldr	r3, [pc, #128]	; (80047d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004758:	2202      	movs	r2, #2
 800475a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800475c:	4b1e      	ldr	r3, [pc, #120]	; (80047d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800475e:	2210      	movs	r2, #16
 8004760:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004762:	4b1d      	ldr	r3, [pc, #116]	; (80047d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004764:	2201      	movs	r2, #1
 8004766:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004768:	4b1b      	ldr	r3, [pc, #108]	; (80047d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800476a:	2200      	movs	r2, #0
 800476c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800476e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004772:	4919      	ldr	r1, [pc, #100]	; (80047d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004774:	4819      	ldr	r0, [pc, #100]	; (80047dc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004776:	f008 fa59 	bl	800cc2c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800477a:	4b17      	ldr	r3, [pc, #92]	; (80047d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800477c:	2203      	movs	r2, #3
 800477e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004780:	4b15      	ldr	r3, [pc, #84]	; (80047d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004782:	2210      	movs	r2, #16
 8004784:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8004786:	4b14      	ldr	r3, [pc, #80]	; (80047d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004788:	2208      	movs	r2, #8
 800478a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800478c:	4b12      	ldr	r3, [pc, #72]	; (80047d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800478e:	2200      	movs	r2, #0
 8004790:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004792:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004796:	4910      	ldr	r1, [pc, #64]	; (80047d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004798:	4810      	ldr	r0, [pc, #64]	; (80047dc <BSP_SDRAM_Initialization_sequence+0xbc>)
 800479a:	f008 fa47 	bl	800cc2c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800479e:	f44f 730c 	mov.w	r3, #560	; 0x230
 80047a2:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80047a4:	4b0c      	ldr	r3, [pc, #48]	; (80047d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80047a6:	2204      	movs	r2, #4
 80047a8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80047aa:	4b0b      	ldr	r3, [pc, #44]	; (80047d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80047ac:	2210      	movs	r2, #16
 80047ae:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80047b0:	4b09      	ldr	r3, [pc, #36]	; (80047d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80047b2:	2201      	movs	r2, #1
 80047b4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	4a07      	ldr	r2, [pc, #28]	; (80047d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80047ba:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80047bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047c0:	4905      	ldr	r1, [pc, #20]	; (80047d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80047c2:	4806      	ldr	r0, [pc, #24]	; (80047dc <BSP_SDRAM_Initialization_sequence+0xbc>)
 80047c4:	f008 fa32 	bl	800cc2c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80047c8:	6879      	ldr	r1, [r7, #4]
 80047ca:	4804      	ldr	r0, [pc, #16]	; (80047dc <BSP_SDRAM_Initialization_sequence+0xbc>)
 80047cc:	f008 fa63 	bl	800cc96 <HAL_SDRAM_ProgramRefreshRate>
}
 80047d0:	bf00      	nop
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	2000143c 	.word	0x2000143c
 80047dc:	200013ec 	.word	0x200013ec

080047e0 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b090      	sub	sp, #64	; 0x40
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80047ea:	4b71      	ldr	r3, [pc, #452]	; (80049b0 <BSP_SDRAM_MspInit+0x1d0>)
 80047ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ee:	4a70      	ldr	r2, [pc, #448]	; (80049b0 <BSP_SDRAM_MspInit+0x1d0>)
 80047f0:	f043 0301 	orr.w	r3, r3, #1
 80047f4:	6393      	str	r3, [r2, #56]	; 0x38
 80047f6:	4b6e      	ldr	r3, [pc, #440]	; (80049b0 <BSP_SDRAM_MspInit+0x1d0>)
 80047f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004800:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8004802:	4b6b      	ldr	r3, [pc, #428]	; (80049b0 <BSP_SDRAM_MspInit+0x1d0>)
 8004804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004806:	4a6a      	ldr	r2, [pc, #424]	; (80049b0 <BSP_SDRAM_MspInit+0x1d0>)
 8004808:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800480c:	6313      	str	r3, [r2, #48]	; 0x30
 800480e:	4b68      	ldr	r3, [pc, #416]	; (80049b0 <BSP_SDRAM_MspInit+0x1d0>)
 8004810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004816:	627b      	str	r3, [r7, #36]	; 0x24
 8004818:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800481a:	4b65      	ldr	r3, [pc, #404]	; (80049b0 <BSP_SDRAM_MspInit+0x1d0>)
 800481c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481e:	4a64      	ldr	r2, [pc, #400]	; (80049b0 <BSP_SDRAM_MspInit+0x1d0>)
 8004820:	f043 0308 	orr.w	r3, r3, #8
 8004824:	6313      	str	r3, [r2, #48]	; 0x30
 8004826:	4b62      	ldr	r3, [pc, #392]	; (80049b0 <BSP_SDRAM_MspInit+0x1d0>)
 8004828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482a:	f003 0308 	and.w	r3, r3, #8
 800482e:	623b      	str	r3, [r7, #32]
 8004830:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004832:	4b5f      	ldr	r3, [pc, #380]	; (80049b0 <BSP_SDRAM_MspInit+0x1d0>)
 8004834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004836:	4a5e      	ldr	r2, [pc, #376]	; (80049b0 <BSP_SDRAM_MspInit+0x1d0>)
 8004838:	f043 0310 	orr.w	r3, r3, #16
 800483c:	6313      	str	r3, [r2, #48]	; 0x30
 800483e:	4b5c      	ldr	r3, [pc, #368]	; (80049b0 <BSP_SDRAM_MspInit+0x1d0>)
 8004840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004842:	f003 0310 	and.w	r3, r3, #16
 8004846:	61fb      	str	r3, [r7, #28]
 8004848:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800484a:	4b59      	ldr	r3, [pc, #356]	; (80049b0 <BSP_SDRAM_MspInit+0x1d0>)
 800484c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484e:	4a58      	ldr	r2, [pc, #352]	; (80049b0 <BSP_SDRAM_MspInit+0x1d0>)
 8004850:	f043 0320 	orr.w	r3, r3, #32
 8004854:	6313      	str	r3, [r2, #48]	; 0x30
 8004856:	4b56      	ldr	r3, [pc, #344]	; (80049b0 <BSP_SDRAM_MspInit+0x1d0>)
 8004858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485a:	f003 0320 	and.w	r3, r3, #32
 800485e:	61bb      	str	r3, [r7, #24]
 8004860:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004862:	4b53      	ldr	r3, [pc, #332]	; (80049b0 <BSP_SDRAM_MspInit+0x1d0>)
 8004864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004866:	4a52      	ldr	r2, [pc, #328]	; (80049b0 <BSP_SDRAM_MspInit+0x1d0>)
 8004868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800486c:	6313      	str	r3, [r2, #48]	; 0x30
 800486e:	4b50      	ldr	r3, [pc, #320]	; (80049b0 <BSP_SDRAM_MspInit+0x1d0>)
 8004870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004876:	617b      	str	r3, [r7, #20]
 8004878:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800487a:	4b4d      	ldr	r3, [pc, #308]	; (80049b0 <BSP_SDRAM_MspInit+0x1d0>)
 800487c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487e:	4a4c      	ldr	r2, [pc, #304]	; (80049b0 <BSP_SDRAM_MspInit+0x1d0>)
 8004880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004884:	6313      	str	r3, [r2, #48]	; 0x30
 8004886:	4b4a      	ldr	r3, [pc, #296]	; (80049b0 <BSP_SDRAM_MspInit+0x1d0>)
 8004888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800488e:	613b      	str	r3, [r7, #16]
 8004890:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8004892:	4b47      	ldr	r3, [pc, #284]	; (80049b0 <BSP_SDRAM_MspInit+0x1d0>)
 8004894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004896:	4a46      	ldr	r2, [pc, #280]	; (80049b0 <BSP_SDRAM_MspInit+0x1d0>)
 8004898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800489c:	6313      	str	r3, [r2, #48]	; 0x30
 800489e:	4b44      	ldr	r3, [pc, #272]	; (80049b0 <BSP_SDRAM_MspInit+0x1d0>)
 80048a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a6:	60fb      	str	r3, [r7, #12]
 80048a8:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80048aa:	2302      	movs	r3, #2
 80048ac:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80048ae:	2301      	movs	r3, #1
 80048b0:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80048b2:	2303      	movs	r3, #3
 80048b4:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80048b6:	230c      	movs	r3, #12
 80048b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 80048ba:	f24c 7303 	movw	r3, #50947	; 0xc703
 80048be:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80048c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80048c4:	4619      	mov	r1, r3
 80048c6:	483b      	ldr	r0, [pc, #236]	; (80049b4 <BSP_SDRAM_MspInit+0x1d4>)
 80048c8:	f003 fb3a 	bl	8007f40 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80048cc:	f64f 7383 	movw	r3, #65411	; 0xff83
 80048d0:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
      
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80048d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80048d6:	4619      	mov	r1, r3
 80048d8:	4837      	ldr	r0, [pc, #220]	; (80049b8 <BSP_SDRAM_MspInit+0x1d8>)
 80048da:	f003 fb31 	bl	8007f40 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80048de:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80048e2:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
    
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80048e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80048e8:	4619      	mov	r1, r3
 80048ea:	4834      	ldr	r0, [pc, #208]	; (80049bc <BSP_SDRAM_MspInit+0x1dc>)
 80048ec:	f003 fb28 	bl	8007f40 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 80048f0:	f248 1337 	movw	r3, #33079	; 0x8137
 80048f4:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80048f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80048fa:	4619      	mov	r1, r3
 80048fc:	4830      	ldr	r0, [pc, #192]	; (80049c0 <BSP_SDRAM_MspInit+0x1e0>)
 80048fe:	f003 fb1f 	bl	8007f40 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8004902:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8004906:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8004908:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800490c:	4619      	mov	r1, r3
 800490e:	482d      	ldr	r0, [pc, #180]	; (80049c4 <BSP_SDRAM_MspInit+0x1e4>)
 8004910:	f003 fb16 	bl	8007f40 <HAL_GPIO_Init>
  
  /* GPIOI configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8004914:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8004918:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 800491a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800491e:	4619      	mov	r1, r3
 8004920:	4829      	ldr	r0, [pc, #164]	; (80049c8 <BSP_SDRAM_MspInit+0x1e8>)
 8004922:	f003 fb0d 	bl	8007f40 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8004926:	4b29      	ldr	r3, [pc, #164]	; (80049cc <BSP_SDRAM_MspInit+0x1ec>)
 8004928:	2200      	movs	r2, #0
 800492a:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800492c:	4b27      	ldr	r3, [pc, #156]	; (80049cc <BSP_SDRAM_MspInit+0x1ec>)
 800492e:	2280      	movs	r2, #128	; 0x80
 8004930:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8004932:	4b26      	ldr	r3, [pc, #152]	; (80049cc <BSP_SDRAM_MspInit+0x1ec>)
 8004934:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004938:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800493a:	4b24      	ldr	r3, [pc, #144]	; (80049cc <BSP_SDRAM_MspInit+0x1ec>)
 800493c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004940:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004942:	4b22      	ldr	r3, [pc, #136]	; (80049cc <BSP_SDRAM_MspInit+0x1ec>)
 8004944:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004948:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800494a:	4b20      	ldr	r3, [pc, #128]	; (80049cc <BSP_SDRAM_MspInit+0x1ec>)
 800494c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004950:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8004952:	4b1e      	ldr	r3, [pc, #120]	; (80049cc <BSP_SDRAM_MspInit+0x1ec>)
 8004954:	2200      	movs	r2, #0
 8004956:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004958:	4b1c      	ldr	r3, [pc, #112]	; (80049cc <BSP_SDRAM_MspInit+0x1ec>)
 800495a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800495e:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8004960:	4b1a      	ldr	r3, [pc, #104]	; (80049cc <BSP_SDRAM_MspInit+0x1ec>)
 8004962:	2200      	movs	r2, #0
 8004964:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004966:	4b19      	ldr	r3, [pc, #100]	; (80049cc <BSP_SDRAM_MspInit+0x1ec>)
 8004968:	2203      	movs	r2, #3
 800496a:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800496c:	4b17      	ldr	r3, [pc, #92]	; (80049cc <BSP_SDRAM_MspInit+0x1ec>)
 800496e:	2200      	movs	r2, #0
 8004970:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8004972:	4b16      	ldr	r3, [pc, #88]	; (80049cc <BSP_SDRAM_MspInit+0x1ec>)
 8004974:	2200      	movs	r2, #0
 8004976:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8004978:	4b14      	ldr	r3, [pc, #80]	; (80049cc <BSP_SDRAM_MspInit+0x1ec>)
 800497a:	4a15      	ldr	r2, [pc, #84]	; (80049d0 <BSP_SDRAM_MspInit+0x1f0>)
 800497c:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a12      	ldr	r2, [pc, #72]	; (80049cc <BSP_SDRAM_MspInit+0x1ec>)
 8004982:	631a      	str	r2, [r3, #48]	; 0x30
 8004984:	4a11      	ldr	r2, [pc, #68]	; (80049cc <BSP_SDRAM_MspInit+0x1ec>)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800498a:	4810      	ldr	r0, [pc, #64]	; (80049cc <BSP_SDRAM_MspInit+0x1ec>)
 800498c:	f001 f990 	bl	8005cb0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8004990:	480e      	ldr	r0, [pc, #56]	; (80049cc <BSP_SDRAM_MspInit+0x1ec>)
 8004992:	f001 f8df 	bl	8005b54 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8004996:	2200      	movs	r2, #0
 8004998:	210f      	movs	r1, #15
 800499a:	2038      	movs	r0, #56	; 0x38
 800499c:	f000 feac 	bl	80056f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80049a0:	2038      	movs	r0, #56	; 0x38
 80049a2:	f000 fec5 	bl	8005730 <HAL_NVIC_EnableIRQ>
}
 80049a6:	bf00      	nop
 80049a8:	3740      	adds	r7, #64	; 0x40
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	40023800 	.word	0x40023800
 80049b4:	40020c00 	.word	0x40020c00
 80049b8:	40021000 	.word	0x40021000
 80049bc:	40021400 	.word	0x40021400
 80049c0:	40021800 	.word	0x40021800
 80049c4:	40021c00 	.word	0x40021c00
 80049c8:	40022000 	.word	0x40022000
 80049cc:	2000144c 	.word	0x2000144c
 80049d0:	40026410 	.word	0x40026410

080049d4 <BSP_TS_Init>:
  * @param  ts_SizeX : Maximum X size of the TS area on LCD
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	4603      	mov	r3, r0
 80049dc:	460a      	mov	r2, r1
 80049de:	80fb      	strh	r3, [r7, #6]
 80049e0:	4613      	mov	r3, r2
 80049e2:	80bb      	strh	r3, [r7, #4]
  uint8_t ts_status = TS_OK;
 80049e4:	2300      	movs	r3, #0
 80049e6:	73fb      	strb	r3, [r7, #15]
  uint8_t ts_id1, ts_id2 = 0;
 80049e8:	2300      	movs	r3, #0
 80049ea:	73bb      	strb	r3, [r7, #14]
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 80049ec:	4b25      	ldr	r3, [pc, #148]	; (8004a84 <BSP_TS_Init+0xb0>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a25      	ldr	r2, [pc, #148]	; (8004a88 <BSP_TS_Init+0xb4>)
 80049f2:	7812      	ldrb	r2, [r2, #0]
 80049f4:	b292      	uxth	r2, r2
 80049f6:	4610      	mov	r0, r2
 80049f8:	4798      	blx	r3

  ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 80049fa:	4b22      	ldr	r3, [pc, #136]	; (8004a84 <BSP_TS_Init+0xb0>)
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	2054      	movs	r0, #84	; 0x54
 8004a00:	4798      	blx	r3
 8004a02:	4603      	mov	r3, r0
 8004a04:	737b      	strb	r3, [r7, #13]
  if(ts_id1 != FT6206_ID_VALUE)
 8004a06:	7b7b      	ldrb	r3, [r7, #13]
 8004a08:	2b11      	cmp	r3, #17
 8004a0a:	d009      	beq.n	8004a20 <BSP_TS_Init+0x4c>
  {
    ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 8004a0c:	4b1d      	ldr	r3, [pc, #116]	; (8004a84 <BSP_TS_Init+0xb0>)
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	2070      	movs	r0, #112	; 0x70
 8004a12:	4798      	blx	r3
 8004a14:	4603      	mov	r3, r0
 8004a16:	73bb      	strb	r3, [r7, #14]
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 8004a18:	4b1b      	ldr	r3, [pc, #108]	; (8004a88 <BSP_TS_Init+0xb4>)
 8004a1a:	2270      	movs	r2, #112	; 0x70
 8004a1c:	701a      	strb	r2, [r3, #0]
 8004a1e:	e002      	b.n	8004a26 <BSP_TS_Init+0x52>
  }
  else
  {
    I2C_Address    = TS_I2C_ADDRESS;    
 8004a20:	4b19      	ldr	r3, [pc, #100]	; (8004a88 <BSP_TS_Init+0xb4>)
 8004a22:	2254      	movs	r2, #84	; 0x54
 8004a24:	701a      	strb	r2, [r3, #0]
  }
  
  /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
  /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 8004a26:	7b7b      	ldrb	r3, [r7, #13]
 8004a28:	2b11      	cmp	r3, #17
 8004a2a:	d002      	beq.n	8004a32 <BSP_TS_Init+0x5e>
 8004a2c:	7bbb      	ldrb	r3, [r7, #14]
 8004a2e:	2b11      	cmp	r3, #17
 8004a30:	d121      	bne.n	8004a76 <BSP_TS_Init+0xa2>
  {
    /* Found FT6206 : Initialize the TS driver structure */
    ts_driver = &ft6x06_ts_drv;
 8004a32:	4b16      	ldr	r3, [pc, #88]	; (8004a8c <BSP_TS_Init+0xb8>)
 8004a34:	4a13      	ldr	r2, [pc, #76]	; (8004a84 <BSP_TS_Init+0xb0>)
 8004a36:	601a      	str	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if(ts_SizeX < ts_SizeY)
 8004a38:	88fa      	ldrh	r2, [r7, #6]
 8004a3a:	88bb      	ldrh	r3, [r7, #4]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d203      	bcs.n	8004a48 <BSP_TS_Init+0x74>
    {
      ts_orientation = TS_SWAP_NONE;                
 8004a40:	4b13      	ldr	r3, [pc, #76]	; (8004a90 <BSP_TS_Init+0xbc>)
 8004a42:	2201      	movs	r2, #1
 8004a44:	701a      	strb	r2, [r3, #0]
 8004a46:	e002      	b.n	8004a4e <BSP_TS_Init+0x7a>
    }
    else
    {
      ts_orientation = TS_SWAP_XY | TS_SWAP_Y;                 
 8004a48:	4b11      	ldr	r3, [pc, #68]	; (8004a90 <BSP_TS_Init+0xbc>)
 8004a4a:	220c      	movs	r2, #12
 8004a4c:	701a      	strb	r2, [r3, #0]
    }

    if(ts_status == TS_OK)
 8004a4e:	7bfb      	ldrb	r3, [r7, #15]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d112      	bne.n	8004a7a <BSP_TS_Init+0xa6>
    {
      /* Software reset the TouchScreen */
      ts_driver->Reset(I2C_Address);
 8004a54:	4b0d      	ldr	r3, [pc, #52]	; (8004a8c <BSP_TS_Init+0xb8>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	4a0b      	ldr	r2, [pc, #44]	; (8004a88 <BSP_TS_Init+0xb4>)
 8004a5c:	7812      	ldrb	r2, [r2, #0]
 8004a5e:	b292      	uxth	r2, r2
 8004a60:	4610      	mov	r0, r2
 8004a62:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      ts_driver->Start(I2C_Address);
 8004a64:	4b09      	ldr	r3, [pc, #36]	; (8004a8c <BSP_TS_Init+0xb8>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	4a07      	ldr	r2, [pc, #28]	; (8004a88 <BSP_TS_Init+0xb4>)
 8004a6c:	7812      	ldrb	r2, [r2, #0]
 8004a6e:	b292      	uxth	r2, r2
 8004a70:	4610      	mov	r0, r2
 8004a72:	4798      	blx	r3
    if(ts_status == TS_OK)
 8004a74:	e001      	b.n	8004a7a <BSP_TS_Init+0xa6>

    } /* of if(ts_status == TS_OK) */
  }
  else
  {
    ts_status = TS_DEVICE_NOT_FOUND;
 8004a76:	2303      	movs	r3, #3
 8004a78:	73fb      	strb	r3, [r7, #15]
  }

  return (ts_status);
 8004a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	20000004 	.word	0x20000004
 8004a88:	200014b1 	.word	0x200014b1
 8004a8c:	200014ac 	.word	0x200014ac
 8004a90:	200014b0 	.word	0x200014b0

08004a94 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8004a94:	b590      	push	{r4, r7, lr}
 8004a96:	b089      	sub	sp, #36	; 0x24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	76fb      	strb	r3, [r7, #27]
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = ts_driver->DetectTouch(I2C_Address);
 8004aa0:	4b81      	ldr	r3, [pc, #516]	; (8004ca8 <BSP_TS_GetState+0x214>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	4a81      	ldr	r2, [pc, #516]	; (8004cac <BSP_TS_GetState+0x218>)
 8004aa8:	7812      	ldrb	r2, [r2, #0]
 8004aaa:	b292      	uxth	r2, r2
 8004aac:	4610      	mov	r0, r2
 8004aae:	4798      	blx	r3
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	701a      	strb	r2, [r3, #0]
  if(TS_State->touchDetected)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 80ee 	beq.w	8004c9e <BSP_TS_GetState+0x20a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	61fb      	str	r3, [r7, #28]
 8004ac6:	e0e3      	b.n	8004c90 <BSP_TS_GetState+0x1fc>
    {
      /* Get each touch coordinates */
      ts_driver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 8004ac8:	4b77      	ldr	r3, [pc, #476]	; (8004ca8 <BSP_TS_GetState+0x214>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	4a77      	ldr	r2, [pc, #476]	; (8004cac <BSP_TS_GetState+0x218>)
 8004ad0:	7812      	ldrb	r2, [r2, #0]
 8004ad2:	b290      	uxth	r0, r2
 8004ad4:	f107 0110 	add.w	r1, r7, #16
 8004ad8:	69fa      	ldr	r2, [r7, #28]
 8004ada:	0052      	lsls	r2, r2, #1
 8004adc:	188c      	adds	r4, r1, r2
 8004ade:	f107 010c 	add.w	r1, r7, #12
 8004ae2:	69fa      	ldr	r2, [r7, #28]
 8004ae4:	0052      	lsls	r2, r2, #1
 8004ae6:	440a      	add	r2, r1
 8004ae8:	4621      	mov	r1, r4
 8004aea:	4798      	blx	r3

      if(ts_orientation & TS_SWAP_XY)
 8004aec:	4b70      	ldr	r3, [pc, #448]	; (8004cb0 <BSP_TS_GetState+0x21c>)
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	f003 0308 	and.w	r3, r3, #8
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d019      	beq.n	8004b2c <BSP_TS_GetState+0x98>
      {
        tmp = Raw_x[index];
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	005b      	lsls	r3, r3, #1
 8004afc:	3320      	adds	r3, #32
 8004afe:	443b      	add	r3, r7
 8004b00:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8004b04:	833b      	strh	r3, [r7, #24]
        Raw_x[index] = Raw_y[index]; 
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	3320      	adds	r3, #32
 8004b0c:	443b      	add	r3, r7
 8004b0e:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	005b      	lsls	r3, r3, #1
 8004b16:	3320      	adds	r3, #32
 8004b18:	443b      	add	r3, r7
 8004b1a:	f823 2c10 	strh.w	r2, [r3, #-16]
        Raw_y[index] = tmp;
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	005b      	lsls	r3, r3, #1
 8004b22:	3320      	adds	r3, #32
 8004b24:	443b      	add	r3, r7
 8004b26:	8b3a      	ldrh	r2, [r7, #24]
 8004b28:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
      
      if(ts_orientation & TS_SWAP_X)
 8004b2c:	4b60      	ldr	r3, [pc, #384]	; (8004cb0 <BSP_TS_GetState+0x21c>)
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00f      	beq.n	8004b58 <BSP_TS_GetState+0xc4>
      {
        Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	005b      	lsls	r3, r3, #1
 8004b3c:	3320      	adds	r3, #32
 8004b3e:	443b      	add	r3, r7
 8004b40:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 8004b44:	f240 331f 	movw	r3, #799	; 0x31f
 8004b48:	1a9b      	subs	r3, r3, r2
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	005b      	lsls	r3, r3, #1
 8004b50:	3320      	adds	r3, #32
 8004b52:	443b      	add	r3, r7
 8004b54:	f823 2c10 	strh.w	r2, [r3, #-16]
      }

      if(ts_orientation & TS_SWAP_Y)
 8004b58:	4b55      	ldr	r3, [pc, #340]	; (8004cb0 <BSP_TS_GetState+0x21c>)
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	f003 0304 	and.w	r3, r3, #4
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00f      	beq.n	8004b84 <BSP_TS_GetState+0xf0>
      {
        Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	3320      	adds	r3, #32
 8004b6a:	443b      	add	r3, r7
 8004b6c:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8004b70:	f240 13df 	movw	r3, #479	; 0x1df
 8004b74:	1a9b      	subs	r3, r3, r2
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	005b      	lsls	r3, r3, #1
 8004b7c:	3320      	adds	r3, #32
 8004b7e:	443b      	add	r3, r7
 8004b80:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
            
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	005b      	lsls	r3, r3, #1
 8004b88:	3320      	adds	r3, #32
 8004b8a:	443b      	add	r3, r7
 8004b8c:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8004b90:	4619      	mov	r1, r3
 8004b92:	4a48      	ldr	r2, [pc, #288]	; (8004cb4 <BSP_TS_GetState+0x220>)
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b9a:	4299      	cmp	r1, r3
 8004b9c:	d90d      	bls.n	8004bba <BSP_TS_GetState+0x126>
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	005b      	lsls	r3, r3, #1
 8004ba2:	3320      	adds	r3, #32
 8004ba4:	443b      	add	r3, r7
 8004ba6:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 8004baa:	4942      	ldr	r1, [pc, #264]	; (8004cb4 <BSP_TS_GetState+0x220>)
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	e00c      	b.n	8004bd4 <BSP_TS_GetState+0x140>
 8004bba:	4a3e      	ldr	r2, [pc, #248]	; (8004cb4 <BSP_TS_GetState+0x220>)
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	005b      	lsls	r3, r3, #1
 8004bc8:	3320      	adds	r3, #32
 8004bca:	443b      	add	r3, r7
 8004bcc:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	82fb      	strh	r3, [r7, #22]
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	005b      	lsls	r3, r3, #1
 8004bda:	3320      	adds	r3, #32
 8004bdc:	443b      	add	r3, r7
 8004bde:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8004be2:	4619      	mov	r1, r3
 8004be4:	4a34      	ldr	r2, [pc, #208]	; (8004cb8 <BSP_TS_GetState+0x224>)
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bec:	4299      	cmp	r1, r3
 8004bee:	d90d      	bls.n	8004c0c <BSP_TS_GetState+0x178>
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	005b      	lsls	r3, r3, #1
 8004bf4:	3320      	adds	r3, #32
 8004bf6:	443b      	add	r3, r7
 8004bf8:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8004bfc:	492e      	ldr	r1, [pc, #184]	; (8004cb8 <BSP_TS_GetState+0x224>)
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	e00c      	b.n	8004c26 <BSP_TS_GetState+0x192>
 8004c0c:	4a2a      	ldr	r2, [pc, #168]	; (8004cb8 <BSP_TS_GetState+0x224>)
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	005b      	lsls	r3, r3, #1
 8004c1a:	3320      	adds	r3, #32
 8004c1c:	443b      	add	r3, r7
 8004c1e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	82bb      	strh	r3, [r7, #20]

      if ((xDiff + yDiff) > 5)
 8004c28:	8afa      	ldrh	r2, [r7, #22]
 8004c2a:	8abb      	ldrh	r3, [r7, #20]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	2b05      	cmp	r3, #5
 8004c30:	dd15      	ble.n	8004c5e <BSP_TS_GetState+0x1ca>
      {
        _x[index] = Raw_x[index];
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	005b      	lsls	r3, r3, #1
 8004c36:	3320      	adds	r3, #32
 8004c38:	443b      	add	r3, r7
 8004c3a:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8004c3e:	4619      	mov	r1, r3
 8004c40:	4a1c      	ldr	r2, [pc, #112]	; (8004cb4 <BSP_TS_GetState+0x220>)
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = Raw_y[index];
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	005b      	lsls	r3, r3, #1
 8004c4c:	3320      	adds	r3, #32
 8004c4e:	443b      	add	r3, r7
 8004c50:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8004c54:	4619      	mov	r1, r3
 8004c56:	4a18      	ldr	r2, [pc, #96]	; (8004cb8 <BSP_TS_GetState+0x224>)
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }


      TS_State->touchX[index] = _x[index];
 8004c5e:	4a15      	ldr	r2, [pc, #84]	; (8004cb4 <BSP_TS_GetState+0x220>)
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c66:	b299      	uxth	r1, r3
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	005b      	lsls	r3, r3, #1
 8004c6e:	4413      	add	r3, r2
 8004c70:	460a      	mov	r2, r1
 8004c72:	805a      	strh	r2, [r3, #2]
      TS_State->touchY[index] = _y[index];
 8004c74:	4a10      	ldr	r2, [pc, #64]	; (8004cb8 <BSP_TS_GetState+0x224>)
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c7c:	b299      	uxth	r1, r3
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	005b      	lsls	r3, r3, #1
 8004c84:	4413      	add	r3, r2
 8004c86:	460a      	mov	r2, r1
 8004c88:	80da      	strh	r2, [r3, #6]
    for(index=0; index < TS_State->touchDetected; index++)
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	61fb      	str	r3, [r7, #28]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	461a      	mov	r2, r3
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	f4ff af15 	bcc.w	8004ac8 <BSP_TS_GetState+0x34>
    ts_status = BSP_TS_Get_GestureId(TS_State);
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8004c9e:	7efb      	ldrb	r3, [r7, #27]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3724      	adds	r7, #36	; 0x24
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd90      	pop	{r4, r7, pc}
 8004ca8:	200014ac 	.word	0x200014ac
 8004cac:	200014b1 	.word	0x200014b1
 8004cb0:	200014b0 	.word	0x200014b0
 8004cb4:	200014b4 	.word	0x200014b4
 8004cb8:	200014bc 	.word	0x200014bc

08004cbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004cc0:	2003      	movs	r0, #3
 8004cc2:	f000 fd0e 	bl	80056e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004cc6:	200f      	movs	r0, #15
 8004cc8:	f7fe fa26 	bl	8003118 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ccc:	f7fc ffd2 	bl	8001c74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	bd80      	pop	{r7, pc}
	...

08004cd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004cdc:	4b06      	ldr	r3, [pc, #24]	; (8004cf8 <HAL_IncTick+0x20>)
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	4b06      	ldr	r3, [pc, #24]	; (8004cfc <HAL_IncTick+0x24>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	4a04      	ldr	r2, [pc, #16]	; (8004cfc <HAL_IncTick+0x24>)
 8004cea:	6013      	str	r3, [r2, #0]
}
 8004cec:	bf00      	nop
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	20000044 	.word	0x20000044
 8004cfc:	200014c4 	.word	0x200014c4

08004d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d00:	b480      	push	{r7}
 8004d02:	af00      	add	r7, sp, #0
  return uwTick;
 8004d04:	4b03      	ldr	r3, [pc, #12]	; (8004d14 <HAL_GetTick+0x14>)
 8004d06:	681b      	ldr	r3, [r3, #0]
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	200014c4 	.word	0x200014c4

08004d18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d20:	f7ff ffee 	bl	8004d00 <HAL_GetTick>
 8004d24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d30:	d005      	beq.n	8004d3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d32:	4b0a      	ldr	r3, [pc, #40]	; (8004d5c <HAL_Delay+0x44>)
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	461a      	mov	r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004d3e:	bf00      	nop
 8004d40:	f7ff ffde 	bl	8004d00 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d8f7      	bhi.n	8004d40 <HAL_Delay+0x28>
  {
  }
}
 8004d50:	bf00      	nop
 8004d52:	bf00      	nop
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	20000044 	.word	0x20000044

08004d60 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e031      	b.n	8004dda <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d109      	bne.n	8004d92 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f7fc ff9c 	bl	8001cbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	f003 0310 	and.w	r3, r3, #16
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d116      	bne.n	8004dcc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004da2:	4b10      	ldr	r3, [pc, #64]	; (8004de4 <HAL_ADC_Init+0x84>)
 8004da4:	4013      	ands	r3, r2
 8004da6:	f043 0202 	orr.w	r2, r3, #2
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f970 	bl	8005094 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbe:	f023 0303 	bic.w	r3, r3, #3
 8004dc2:	f043 0201 	orr.w	r2, r3, #1
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	641a      	str	r2, [r3, #64]	; 0x40
 8004dca:	e001      	b.n	8004dd0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	ffffeefd 	.word	0xffffeefd

08004de8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004df2:	2300      	movs	r3, #0
 8004df4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d101      	bne.n	8004e04 <HAL_ADC_ConfigChannel+0x1c>
 8004e00:	2302      	movs	r3, #2
 8004e02:	e136      	b.n	8005072 <HAL_ADC_ConfigChannel+0x28a>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2b09      	cmp	r3, #9
 8004e12:	d93a      	bls.n	8004e8a <HAL_ADC_ConfigChannel+0xa2>
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e1c:	d035      	beq.n	8004e8a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68d9      	ldr	r1, [r3, #12]
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	005b      	lsls	r3, r3, #1
 8004e30:	4413      	add	r3, r2
 8004e32:	3b1e      	subs	r3, #30
 8004e34:	2207      	movs	r2, #7
 8004e36:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3a:	43da      	mvns	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	400a      	ands	r2, r1
 8004e42:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a8d      	ldr	r2, [pc, #564]	; (8005080 <HAL_ADC_ConfigChannel+0x298>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d10a      	bne.n	8004e64 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68d9      	ldr	r1, [r3, #12]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	061a      	lsls	r2, r3, #24
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004e62:	e035      	b.n	8004ed0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68d9      	ldr	r1, [r3, #12]
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	689a      	ldr	r2, [r3, #8]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	4618      	mov	r0, r3
 8004e76:	4603      	mov	r3, r0
 8004e78:	005b      	lsls	r3, r3, #1
 8004e7a:	4403      	add	r3, r0
 8004e7c:	3b1e      	subs	r3, #30
 8004e7e:	409a      	lsls	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	430a      	orrs	r2, r1
 8004e86:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004e88:	e022      	b.n	8004ed0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6919      	ldr	r1, [r3, #16]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	461a      	mov	r2, r3
 8004e98:	4613      	mov	r3, r2
 8004e9a:	005b      	lsls	r3, r3, #1
 8004e9c:	4413      	add	r3, r2
 8004e9e:	2207      	movs	r2, #7
 8004ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea4:	43da      	mvns	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	400a      	ands	r2, r1
 8004eac:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	6919      	ldr	r1, [r3, #16]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	689a      	ldr	r2, [r3, #8]
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	005b      	lsls	r3, r3, #1
 8004ec4:	4403      	add	r3, r0
 8004ec6:	409a      	lsls	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	2b06      	cmp	r3, #6
 8004ed6:	d824      	bhi.n	8004f22 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	685a      	ldr	r2, [r3, #4]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	4413      	add	r3, r2
 8004ee8:	3b05      	subs	r3, #5
 8004eea:	221f      	movs	r2, #31
 8004eec:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef0:	43da      	mvns	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	400a      	ands	r2, r1
 8004ef8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	4618      	mov	r0, r3
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	685a      	ldr	r2, [r3, #4]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4413      	add	r3, r2
 8004f12:	3b05      	subs	r3, #5
 8004f14:	fa00 f203 	lsl.w	r2, r0, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	635a      	str	r2, [r3, #52]	; 0x34
 8004f20:	e04c      	b.n	8004fbc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	2b0c      	cmp	r3, #12
 8004f28:	d824      	bhi.n	8004f74 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	685a      	ldr	r2, [r3, #4]
 8004f34:	4613      	mov	r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4413      	add	r3, r2
 8004f3a:	3b23      	subs	r3, #35	; 0x23
 8004f3c:	221f      	movs	r2, #31
 8004f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f42:	43da      	mvns	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	400a      	ands	r2, r1
 8004f4a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	4618      	mov	r0, r3
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	4413      	add	r3, r2
 8004f64:	3b23      	subs	r3, #35	; 0x23
 8004f66:	fa00 f203 	lsl.w	r2, r0, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	631a      	str	r2, [r3, #48]	; 0x30
 8004f72:	e023      	b.n	8004fbc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685a      	ldr	r2, [r3, #4]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4413      	add	r3, r2
 8004f84:	3b41      	subs	r3, #65	; 0x41
 8004f86:	221f      	movs	r2, #31
 8004f88:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8c:	43da      	mvns	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	400a      	ands	r2, r1
 8004f94:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	685a      	ldr	r2, [r3, #4]
 8004fa8:	4613      	mov	r3, r2
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	4413      	add	r3, r2
 8004fae:	3b41      	subs	r3, #65	; 0x41
 8004fb0:	fa00 f203 	lsl.w	r2, r0, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a30      	ldr	r2, [pc, #192]	; (8005084 <HAL_ADC_ConfigChannel+0x29c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d10a      	bne.n	8004fdc <HAL_ADC_ConfigChannel+0x1f4>
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fce:	d105      	bne.n	8004fdc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004fd0:	4b2d      	ldr	r3, [pc, #180]	; (8005088 <HAL_ADC_ConfigChannel+0x2a0>)
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	4a2c      	ldr	r2, [pc, #176]	; (8005088 <HAL_ADC_ConfigChannel+0x2a0>)
 8004fd6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004fda:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a28      	ldr	r2, [pc, #160]	; (8005084 <HAL_ADC_ConfigChannel+0x29c>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d10f      	bne.n	8005006 <HAL_ADC_ConfigChannel+0x21e>
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2b12      	cmp	r3, #18
 8004fec:	d10b      	bne.n	8005006 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8004fee:	4b26      	ldr	r3, [pc, #152]	; (8005088 <HAL_ADC_ConfigChannel+0x2a0>)
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	4a25      	ldr	r2, [pc, #148]	; (8005088 <HAL_ADC_ConfigChannel+0x2a0>)
 8004ff4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004ff8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004ffa:	4b23      	ldr	r3, [pc, #140]	; (8005088 <HAL_ADC_ConfigChannel+0x2a0>)
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	4a22      	ldr	r2, [pc, #136]	; (8005088 <HAL_ADC_ConfigChannel+0x2a0>)
 8005000:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005004:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a1e      	ldr	r2, [pc, #120]	; (8005084 <HAL_ADC_ConfigChannel+0x29c>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d12b      	bne.n	8005068 <HAL_ADC_ConfigChannel+0x280>
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a1a      	ldr	r2, [pc, #104]	; (8005080 <HAL_ADC_ConfigChannel+0x298>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d003      	beq.n	8005022 <HAL_ADC_ConfigChannel+0x23a>
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2b11      	cmp	r3, #17
 8005020:	d122      	bne.n	8005068 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8005022:	4b19      	ldr	r3, [pc, #100]	; (8005088 <HAL_ADC_ConfigChannel+0x2a0>)
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	4a18      	ldr	r2, [pc, #96]	; (8005088 <HAL_ADC_ConfigChannel+0x2a0>)
 8005028:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800502c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800502e:	4b16      	ldr	r3, [pc, #88]	; (8005088 <HAL_ADC_ConfigChannel+0x2a0>)
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	4a15      	ldr	r2, [pc, #84]	; (8005088 <HAL_ADC_ConfigChannel+0x2a0>)
 8005034:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005038:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a10      	ldr	r2, [pc, #64]	; (8005080 <HAL_ADC_ConfigChannel+0x298>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d111      	bne.n	8005068 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005044:	4b11      	ldr	r3, [pc, #68]	; (800508c <HAL_ADC_ConfigChannel+0x2a4>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a11      	ldr	r2, [pc, #68]	; (8005090 <HAL_ADC_ConfigChannel+0x2a8>)
 800504a:	fba2 2303 	umull	r2, r3, r2, r3
 800504e:	0c9a      	lsrs	r2, r3, #18
 8005050:	4613      	mov	r3, r2
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	4413      	add	r3, r2
 8005056:	005b      	lsls	r3, r3, #1
 8005058:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800505a:	e002      	b.n	8005062 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	3b01      	subs	r3, #1
 8005060:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1f9      	bne.n	800505c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3714      	adds	r7, #20
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	10000012 	.word	0x10000012
 8005084:	40012000 	.word	0x40012000
 8005088:	40012300 	.word	0x40012300
 800508c:	20000000 	.word	0x20000000
 8005090:	431bde83 	.word	0x431bde83

08005094 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800509c:	4b78      	ldr	r3, [pc, #480]	; (8005280 <ADC_Init+0x1ec>)
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	4a77      	ldr	r2, [pc, #476]	; (8005280 <ADC_Init+0x1ec>)
 80050a2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80050a6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80050a8:	4b75      	ldr	r3, [pc, #468]	; (8005280 <ADC_Init+0x1ec>)
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	4973      	ldr	r1, [pc, #460]	; (8005280 <ADC_Init+0x1ec>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	6859      	ldr	r1, [r3, #4]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	021a      	lsls	r2, r3, #8
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	430a      	orrs	r2, r1
 80050d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	685a      	ldr	r2, [r3, #4]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80050e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	6859      	ldr	r1, [r3, #4]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689a      	ldr	r2, [r3, #8]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	430a      	orrs	r2, r1
 80050fa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689a      	ldr	r2, [r3, #8]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800510a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6899      	ldr	r1, [r3, #8]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68da      	ldr	r2, [r3, #12]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	430a      	orrs	r2, r1
 800511c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005122:	4a58      	ldr	r2, [pc, #352]	; (8005284 <ADC_Init+0x1f0>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d022      	beq.n	800516e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	689a      	ldr	r2, [r3, #8]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005136:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6899      	ldr	r1, [r3, #8]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	430a      	orrs	r2, r1
 8005148:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	689a      	ldr	r2, [r3, #8]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005158:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	6899      	ldr	r1, [r3, #8]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	430a      	orrs	r2, r1
 800516a:	609a      	str	r2, [r3, #8]
 800516c:	e00f      	b.n	800518e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	689a      	ldr	r2, [r3, #8]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800517c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	689a      	ldr	r2, [r3, #8]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800518c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	689a      	ldr	r2, [r3, #8]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f022 0202 	bic.w	r2, r2, #2
 800519c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	6899      	ldr	r1, [r3, #8]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	005a      	lsls	r2, r3, #1
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d01b      	beq.n	80051f4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	685a      	ldr	r2, [r3, #4]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051ca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685a      	ldr	r2, [r3, #4]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80051da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6859      	ldr	r1, [r3, #4]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e6:	3b01      	subs	r3, #1
 80051e8:	035a      	lsls	r2, r3, #13
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	605a      	str	r2, [r3, #4]
 80051f2:	e007      	b.n	8005204 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	685a      	ldr	r2, [r3, #4]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005202:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005212:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	3b01      	subs	r3, #1
 8005220:	051a      	lsls	r2, r3, #20
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	430a      	orrs	r2, r1
 8005228:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	689a      	ldr	r2, [r3, #8]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005238:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	6899      	ldr	r1, [r3, #8]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005246:	025a      	lsls	r2, r3, #9
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	430a      	orrs	r2, r1
 800524e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	689a      	ldr	r2, [r3, #8]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800525e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6899      	ldr	r1, [r3, #8]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	029a      	lsls	r2, r3, #10
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	430a      	orrs	r2, r1
 8005272:	609a      	str	r2, [r3, #8]
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr
 8005280:	40012300 	.word	0x40012300
 8005284:	0f000001 	.word	0x0f000001

08005288 <HAL_CEC_Init>:
  *         parameters in the CEC_InitTypeDef and creates the associated handle .
  * @param hcec CEC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CEC_Init(CEC_HandleTypeDef *hcec)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  /* Check the CEC handle allocation */
  if ((hcec == NULL) || (hcec->Init.RxBuffer == NULL))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d003      	beq.n	800529e <HAL_CEC_Init+0x16>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <HAL_CEC_Init+0x1a>
  {
    return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e04f      	b.n	8005342 <HAL_CEC_Init+0xba>

    /* Init the low level hardware */
    hcec->MspInitCallback(hcec);
  }
#else
  if (hcec->gState == HAL_CEC_STATE_RESET)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d106      	bne.n	80052b8 <HAL_CEC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hcec->Lock = HAL_UNLOCKED;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_CEC_MspInit(hcec);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f7fc ff5c 	bl	8002170 <HAL_CEC_MspInit>
  }
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */

  hcec->gState = HAL_CEC_STATE_BUSY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2224      	movs	r2, #36	; 0x24
 80052bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable the Peripheral */
  __HAL_CEC_DISABLE(hcec);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f022 0201 	bic.w	r2, r2, #1
 80052cc:	601a      	str	r2, [r3, #0]

  /* Write to CEC Control Register */
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685a      	ldr	r2, [r3, #4]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	431a      	orrs	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	691b      	ldr	r3, [r3, #16]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 80052e2:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	695b      	ldr	r3, [r3, #20]
 80052e8:	431a      	orrs	r2, r3
                         hcec->Init.BroadcastMsgNoErrorBitGen | \
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	699b      	ldr	r3, [r3, #24]
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 80052ee:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	69db      	ldr	r3, [r3, #28]
                         hcec->Init.BroadcastMsgNoErrorBitGen | \
 80052f4:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80052fa:	041b      	lsls	r3, r3, #16
 80052fc:	ea42 0103 	orr.w	r1, r2, r3
                         hcec->Init.ListenMode;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a1a      	ldr	r2, [r3, #32]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8005308:	430a      	orrs	r2, r1
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 800530a:	605a      	str	r2, [r3, #4]
    * End of Transmission IT
    * Tx Missing Acknowledge IT
    * Tx-Error IT
    * Tx-Buffer Underrun IT
    * Tx arbitration lost   */
  __HAL_CEC_ENABLE_IT(hcec, CEC_IT_RXBR | CEC_IT_RXEND | CEC_IER_RX_ALL_ERR | CEC_IT_TXBR | CEC_IT_TXEND |
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6959      	ldr	r1, [r3, #20]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800531a:	430b      	orrs	r3, r1
 800531c:	6153      	str	r3, [r2, #20]
                      CEC_IER_TX_ALL_ERR);

  /* Enable the CEC Peripheral */
  __HAL_CEC_ENABLE(hcec);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f042 0201 	orr.w	r2, r2, #1
 800532c:	601a      	str	r2, [r3, #0]

  hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	641a      	str	r2, [r3, #64]	; 0x40
  hcec->gState = HAL_CEC_STATE_READY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2220      	movs	r2, #32
 8005338:	639a      	str	r2, [r3, #56]	; 0x38
  hcec->RxState = HAL_CEC_STATE_READY;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2220      	movs	r2, #32
 800533e:	63da      	str	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <HAL_CEC_IRQHandler>:
  * @brief This function handles CEC interrupt requests.
  * @param hcec CEC handle
  * @retval None
  */
void HAL_CEC_IRQHandler(CEC_HandleTypeDef *hcec)
{
 800534a:	b580      	push	{r7, lr}
 800534c:	b084      	sub	sp, #16
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]

  /* save interrupts register for further error or interrupts handling purposes */
  uint32_t itflag;
  itflag = hcec->Instance->ISR;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	60fb      	str	r3, [r7, #12]


  /* ----------------------------Arbitration Lost Management----------------------------------*/
  /* CEC TX arbitration error interrupt occurred --------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_ARBLST))
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00a      	beq.n	800537a <HAL_CEC_IRQHandler+0x30>
  {
    hcec->ErrorCode = HAL_CEC_ERROR_ARBLST;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2280      	movs	r2, #128	; 0x80
 8005368:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_ARBLST);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	691a      	ldr	r2, [r3, #16]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005378:	611a      	str	r2, [r3, #16]
  }

  /* ----------------------------Rx Management----------------------------------*/
  /* CEC RX byte received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXBR))
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f003 0301 	and.w	r3, r3, #1
 8005380:	2b00      	cmp	r3, #0
 8005382:	d01c      	beq.n	80053be <HAL_CEC_IRQHandler+0x74>
  {
    /* reception is starting */
    hcec->RxState = HAL_CEC_STATE_BUSY_RX;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2222      	movs	r2, #34	; 0x22
 8005388:	63da      	str	r2, [r3, #60]	; 0x3c
    hcec->RxXferSize++;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800538e:	3301      	adds	r3, #1
 8005390:	b29a      	uxth	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	865a      	strh	r2, [r3, #50]	; 0x32
    /* read received byte */
    *hcec->Init.RxBuffer = (uint8_t) hcec->Instance->RXDR;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68da      	ldr	r2, [r3, #12]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a0:	b2d2      	uxtb	r2, r2
 80053a2:	701a      	strb	r2, [r3, #0]
    hcec->Init.RxBuffer++;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a8:	1c5a      	adds	r2, r3, #1
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	629a      	str	r2, [r3, #40]	; 0x28
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXBR);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	691a      	ldr	r2, [r3, #16]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f042 0201 	orr.w	r2, r2, #1
 80053bc:	611a      	str	r2, [r3, #16]
  }

  /* CEC RX end received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXEND))
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d01e      	beq.n	8005406 <HAL_CEC_IRQHandler+0xbc>
  {
    /* clear IT */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXEND);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	691a      	ldr	r2, [r3, #16]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f042 0202 	orr.w	r2, r2, #2
 80053d6:	611a      	str	r2, [r3, #16]

    /* Rx process is completed, restore hcec->RxState to Ready */
    hcec->RxState = HAL_CEC_STATE_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2220      	movs	r2, #32
 80053dc:	63da      	str	r2, [r3, #60]	; 0x3c
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	641a      	str	r2, [r3, #64]	; 0x40
    hcec->Init.RxBuffer -= hcec->RxXferSize;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80053ec:	425b      	negs	r3, r3
 80053ee:	441a      	add	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->RxCpltCallback(hcec, hcec->RxXferSize);
#else
    HAL_CEC_RxCpltCallback(hcec, hcec->RxXferSize);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80053f8:	4619      	mov	r1, r3
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 f88b 	bl	8005516 <HAL_CEC_RxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
    hcec->RxXferSize = 0U;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* ----------------------------Tx Management----------------------------------*/
  /* CEC TX byte request interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXBR))
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800540c:	2b00      	cmp	r3, #0
 800540e:	d024      	beq.n	800545a <HAL_CEC_IRQHandler+0x110>
  {
    --hcec->TxXferCount;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8005414:	3b01      	subs	r3, #1
 8005416:	b29a      	uxth	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	861a      	strh	r2, [r3, #48]	; 0x30
    if (hcec->TxXferCount == 0U)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8005420:	2b00      	cmp	r3, #0
 8005422:	d107      	bne.n	8005434 <HAL_CEC_IRQHandler+0xea>
    {
      /* if this is the last byte transmission, set TX End of Message (TXEOM) bit */
      __HAL_CEC_LAST_BYTE_TX_SET(hcec);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f042 0204 	orr.w	r2, r2, #4
 8005432:	601a      	str	r2, [r3, #0]
    }
    /* In all cases transmit the byte */
    hcec->Instance->TXDR = (uint8_t)*hcec->pTxBuffPtr;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005438:	781a      	ldrb	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	609a      	str	r2, [r3, #8]
    hcec->pTxBuffPtr++;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005444:	1c5a      	adds	r2, r3, #1
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	62da      	str	r2, [r3, #44]	; 0x2c
    /* clear Tx-Byte request flag */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXBR);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	691a      	ldr	r2, [r3, #16]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005458:	611a      	str	r2, [r3, #16]
  }

  /* CEC TX end interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXEND))
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005460:	2b00      	cmp	r3, #0
 8005462:	d014      	beq.n	800548e <HAL_CEC_IRQHandler+0x144>
  {
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXEND);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	691a      	ldr	r2, [r3, #16]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005472:	611a      	str	r2, [r3, #16]

    /* Tx process is ended, restore hcec->gState to Ready */
    hcec->gState = HAL_CEC_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2220      	movs	r2, #32
 8005478:	639a      	str	r2, [r3, #56]	; 0x38
    /* Call the Process Unlocked before calling the Tx call back API to give the possibility to
    start again the Transmission under the Tx call back API */
    __HAL_UNLOCK(hcec);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->TxCpltCallback(hcec);
#else
    HAL_CEC_TxCpltCallback(hcec);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 f83a 	bl	8005502 <HAL_CEC_TxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
  }

  /* ----------------------------Rx/Tx Error Management----------------------------------*/
  if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE | CEC_ISR_TXUDR |
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	f641 437c 	movw	r3, #7292	; 0x1c7c
 8005494:	4013      	ands	r3, r2
 8005496:	2b00      	cmp	r3, #0
 8005498:	d02f      	beq.n	80054fa <HAL_CEC_IRQHandler+0x1b0>
              CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U)
  {
    hcec->ErrorCode = itflag;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, HAL_CEC_ERROR_RXOVR | HAL_CEC_ERROR_BRE | CEC_FLAG_LBPE | CEC_FLAG_SBPE |
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	6919      	ldr	r1, [r3, #16]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	f641 437c 	movw	r3, #7292	; 0x1c7c
 80054ae:	430b      	orrs	r3, r1
 80054b0:	6113      	str	r3, [r2, #16]
                         HAL_CEC_ERROR_RXACKE | HAL_CEC_ERROR_TXUDR | HAL_CEC_ERROR_TXERR | HAL_CEC_ERROR_TXACKE);


    if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE)) != 0U)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00e      	beq.n	80054da <HAL_CEC_IRQHandler+0x190>
    {
      hcec->Init.RxBuffer -= hcec->RxXferSize;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80054c4:	425b      	negs	r3, r3
 80054c6:	441a      	add	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	629a      	str	r2, [r3, #40]	; 0x28
      hcec->RxXferSize = 0U;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	865a      	strh	r2, [r3, #50]	; 0x32
      hcec->RxState = HAL_CEC_STATE_READY;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2220      	movs	r2, #32
 80054d6:	63da      	str	r2, [r3, #60]	; 0x3c
 80054d8:	e00c      	b.n	80054f4 <HAL_CEC_IRQHandler+0x1aa>
    }
    else if (((itflag & CEC_ISR_ARBLST) == 0U) && ((itflag & (CEC_ISR_TXUDR | CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U))
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d107      	bne.n	80054f4 <HAL_CEC_IRQHandler+0x1aa>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d002      	beq.n	80054f4 <HAL_CEC_IRQHandler+0x1aa>
    {
      /* Set the CEC state ready to be able to start again the process */
      hcec->gState = HAL_CEC_STATE_READY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2220      	movs	r2, #32
 80054f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->ErrorCallback(hcec);
#else
    /* Error  Call Back */
    HAL_CEC_ErrorCallback(hcec);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 f819 	bl	800552c <HAL_CEC_ErrorCallback>
  }
  else
  {
    /* Nothing todo*/
  }
}
 80054fa:	bf00      	nop
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <HAL_CEC_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_TxCpltCallback(CEC_HandleTypeDef *hcec)
{
 8005502:	b480      	push	{r7}
 8005504:	b083      	sub	sp, #12
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_TxCpltCallback can be implemented in the user file
   */
}
 800550a:	bf00      	nop
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <HAL_CEC_RxCpltCallback>:
  * @param hcec CEC handle
  * @param RxFrameSize Size of frame
  * @retval None
  */
__weak void HAL_CEC_RxCpltCallback(CEC_HandleTypeDef *hcec, uint32_t RxFrameSize)
{
 8005516:	b480      	push	{r7}
 8005518:	b083      	sub	sp, #12
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
 800551e:	6039      	str	r1, [r7, #0]
  UNUSED(hcec);
  UNUSED(RxFrameSize);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_RxCpltCallback can be implemented in the user file
   */
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <HAL_CEC_ErrorCallback>:
  * @brief CEC error callbacks
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_ErrorCallback(CEC_HandleTypeDef *hcec)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_ErrorCallback can be implemented in the user file
   */
}
 8005534:	bf00      	nop
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f003 0307 	and.w	r3, r3, #7
 800554e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005550:	4b0b      	ldr	r3, [pc, #44]	; (8005580 <__NVIC_SetPriorityGrouping+0x40>)
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005556:	68ba      	ldr	r2, [r7, #8]
 8005558:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800555c:	4013      	ands	r3, r2
 800555e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005568:	4b06      	ldr	r3, [pc, #24]	; (8005584 <__NVIC_SetPriorityGrouping+0x44>)
 800556a:	4313      	orrs	r3, r2
 800556c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800556e:	4a04      	ldr	r2, [pc, #16]	; (8005580 <__NVIC_SetPriorityGrouping+0x40>)
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	60d3      	str	r3, [r2, #12]
}
 8005574:	bf00      	nop
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr
 8005580:	e000ed00 	.word	0xe000ed00
 8005584:	05fa0000 	.word	0x05fa0000

08005588 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005588:	b480      	push	{r7}
 800558a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800558c:	4b04      	ldr	r3, [pc, #16]	; (80055a0 <__NVIC_GetPriorityGrouping+0x18>)
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	0a1b      	lsrs	r3, r3, #8
 8005592:	f003 0307 	and.w	r3, r3, #7
}
 8005596:	4618      	mov	r0, r3
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr
 80055a0:	e000ed00 	.word	0xe000ed00

080055a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	4603      	mov	r3, r0
 80055ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	db0b      	blt.n	80055ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055b6:	79fb      	ldrb	r3, [r7, #7]
 80055b8:	f003 021f 	and.w	r2, r3, #31
 80055bc:	4907      	ldr	r1, [pc, #28]	; (80055dc <__NVIC_EnableIRQ+0x38>)
 80055be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055c2:	095b      	lsrs	r3, r3, #5
 80055c4:	2001      	movs	r0, #1
 80055c6:	fa00 f202 	lsl.w	r2, r0, r2
 80055ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80055ce:	bf00      	nop
 80055d0:	370c      	adds	r7, #12
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	e000e100 	.word	0xe000e100

080055e0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	4603      	mov	r3, r0
 80055e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	db12      	blt.n	8005618 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055f2:	79fb      	ldrb	r3, [r7, #7]
 80055f4:	f003 021f 	and.w	r2, r3, #31
 80055f8:	490a      	ldr	r1, [pc, #40]	; (8005624 <__NVIC_DisableIRQ+0x44>)
 80055fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055fe:	095b      	lsrs	r3, r3, #5
 8005600:	2001      	movs	r0, #1
 8005602:	fa00 f202 	lsl.w	r2, r0, r2
 8005606:	3320      	adds	r3, #32
 8005608:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800560c:	f3bf 8f4f 	dsb	sy
}
 8005610:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005612:	f3bf 8f6f 	isb	sy
}
 8005616:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr
 8005624:	e000e100 	.word	0xe000e100

08005628 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	4603      	mov	r3, r0
 8005630:	6039      	str	r1, [r7, #0]
 8005632:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005638:	2b00      	cmp	r3, #0
 800563a:	db0a      	blt.n	8005652 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	b2da      	uxtb	r2, r3
 8005640:	490c      	ldr	r1, [pc, #48]	; (8005674 <__NVIC_SetPriority+0x4c>)
 8005642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005646:	0112      	lsls	r2, r2, #4
 8005648:	b2d2      	uxtb	r2, r2
 800564a:	440b      	add	r3, r1
 800564c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005650:	e00a      	b.n	8005668 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	b2da      	uxtb	r2, r3
 8005656:	4908      	ldr	r1, [pc, #32]	; (8005678 <__NVIC_SetPriority+0x50>)
 8005658:	79fb      	ldrb	r3, [r7, #7]
 800565a:	f003 030f 	and.w	r3, r3, #15
 800565e:	3b04      	subs	r3, #4
 8005660:	0112      	lsls	r2, r2, #4
 8005662:	b2d2      	uxtb	r2, r2
 8005664:	440b      	add	r3, r1
 8005666:	761a      	strb	r2, [r3, #24]
}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr
 8005674:	e000e100 	.word	0xe000e100
 8005678:	e000ed00 	.word	0xe000ed00

0800567c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800567c:	b480      	push	{r7}
 800567e:	b089      	sub	sp, #36	; 0x24
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f003 0307 	and.w	r3, r3, #7
 800568e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	f1c3 0307 	rsb	r3, r3, #7
 8005696:	2b04      	cmp	r3, #4
 8005698:	bf28      	it	cs
 800569a:	2304      	movcs	r3, #4
 800569c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	3304      	adds	r3, #4
 80056a2:	2b06      	cmp	r3, #6
 80056a4:	d902      	bls.n	80056ac <NVIC_EncodePriority+0x30>
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	3b03      	subs	r3, #3
 80056aa:	e000      	b.n	80056ae <NVIC_EncodePriority+0x32>
 80056ac:	2300      	movs	r3, #0
 80056ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056b0:	f04f 32ff 	mov.w	r2, #4294967295
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ba:	43da      	mvns	r2, r3
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	401a      	ands	r2, r3
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056c4:	f04f 31ff 	mov.w	r1, #4294967295
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	fa01 f303 	lsl.w	r3, r1, r3
 80056ce:	43d9      	mvns	r1, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056d4:	4313      	orrs	r3, r2
         );
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3724      	adds	r7, #36	; 0x24
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr

080056e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b082      	sub	sp, #8
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f7ff ff28 	bl	8005540 <__NVIC_SetPriorityGrouping>
}
 80056f0:	bf00      	nop
 80056f2:	3708      	adds	r7, #8
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b086      	sub	sp, #24
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	4603      	mov	r3, r0
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
 8005704:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005706:	2300      	movs	r3, #0
 8005708:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800570a:	f7ff ff3d 	bl	8005588 <__NVIC_GetPriorityGrouping>
 800570e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	68b9      	ldr	r1, [r7, #8]
 8005714:	6978      	ldr	r0, [r7, #20]
 8005716:	f7ff ffb1 	bl	800567c <NVIC_EncodePriority>
 800571a:	4602      	mov	r2, r0
 800571c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005720:	4611      	mov	r1, r2
 8005722:	4618      	mov	r0, r3
 8005724:	f7ff ff80 	bl	8005628 <__NVIC_SetPriority>
}
 8005728:	bf00      	nop
 800572a:	3718      	adds	r7, #24
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	4603      	mov	r3, r0
 8005738:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800573a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800573e:	4618      	mov	r0, r3
 8005740:	f7ff ff30 	bl	80055a4 <__NVIC_EnableIRQ>
}
 8005744:	bf00      	nop
 8005746:	3708      	adds	r7, #8
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0
 8005752:	4603      	mov	r3, r0
 8005754:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800575a:	4618      	mov	r0, r3
 800575c:	f7ff ff40 	bl	80055e0 <__NVIC_DisableIRQ>
}
 8005760:	bf00      	nop
 8005762:	3708      	adds	r7, #8
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e054      	b.n	8005824 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	7f5b      	ldrb	r3, [r3, #29]
 800577e:	b2db      	uxtb	r3, r3
 8005780:	2b00      	cmp	r3, #0
 8005782:	d105      	bne.n	8005790 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f7fc fb1e 	bl	8001dcc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2202      	movs	r2, #2
 8005794:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	791b      	ldrb	r3, [r3, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10c      	bne.n	80057b8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a22      	ldr	r2, [pc, #136]	; (800582c <HAL_CRC_Init+0xc4>)
 80057a4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	689a      	ldr	r2, [r3, #8]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f022 0218 	bic.w	r2, r2, #24
 80057b4:	609a      	str	r2, [r3, #8]
 80057b6:	e00c      	b.n	80057d2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6899      	ldr	r1, [r3, #8]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	461a      	mov	r2, r3
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 f834 	bl	8005830 <HAL_CRCEx_Polynomial_Set>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d001      	beq.n	80057d2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e028      	b.n	8005824 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	795b      	ldrb	r3, [r3, #5]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d105      	bne.n	80057e6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f04f 32ff 	mov.w	r2, #4294967295
 80057e2:	611a      	str	r2, [r3, #16]
 80057e4:	e004      	b.n	80057f0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	6912      	ldr	r2, [r2, #16]
 80057ee:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	695a      	ldr	r2, [r3, #20]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	430a      	orrs	r2, r1
 8005804:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	699a      	ldr	r2, [r3, #24]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	430a      	orrs	r2, r1
 800581a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3708      	adds	r7, #8
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	04c11db7 	.word	0x04c11db7

08005830 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005830:	b480      	push	{r7}
 8005832:	b087      	sub	sp, #28
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800583c:	2300      	movs	r3, #0
 800583e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005840:	231f      	movs	r3, #31
 8005842:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005844:	bf00      	nop
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	1e5a      	subs	r2, r3, #1
 800584a:	613a      	str	r2, [r7, #16]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d009      	beq.n	8005864 <HAL_CRCEx_Polynomial_Set+0x34>
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	f003 031f 	and.w	r3, r3, #31
 8005856:	68ba      	ldr	r2, [r7, #8]
 8005858:	fa22 f303 	lsr.w	r3, r2, r3
 800585c:	f003 0301 	and.w	r3, r3, #1
 8005860:	2b00      	cmp	r3, #0
 8005862:	d0f0      	beq.n	8005846 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b18      	cmp	r3, #24
 8005868:	d846      	bhi.n	80058f8 <HAL_CRCEx_Polynomial_Set+0xc8>
 800586a:	a201      	add	r2, pc, #4	; (adr r2, 8005870 <HAL_CRCEx_Polynomial_Set+0x40>)
 800586c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005870:	080058ff 	.word	0x080058ff
 8005874:	080058f9 	.word	0x080058f9
 8005878:	080058f9 	.word	0x080058f9
 800587c:	080058f9 	.word	0x080058f9
 8005880:	080058f9 	.word	0x080058f9
 8005884:	080058f9 	.word	0x080058f9
 8005888:	080058f9 	.word	0x080058f9
 800588c:	080058f9 	.word	0x080058f9
 8005890:	080058ed 	.word	0x080058ed
 8005894:	080058f9 	.word	0x080058f9
 8005898:	080058f9 	.word	0x080058f9
 800589c:	080058f9 	.word	0x080058f9
 80058a0:	080058f9 	.word	0x080058f9
 80058a4:	080058f9 	.word	0x080058f9
 80058a8:	080058f9 	.word	0x080058f9
 80058ac:	080058f9 	.word	0x080058f9
 80058b0:	080058e1 	.word	0x080058e1
 80058b4:	080058f9 	.word	0x080058f9
 80058b8:	080058f9 	.word	0x080058f9
 80058bc:	080058f9 	.word	0x080058f9
 80058c0:	080058f9 	.word	0x080058f9
 80058c4:	080058f9 	.word	0x080058f9
 80058c8:	080058f9 	.word	0x080058f9
 80058cc:	080058f9 	.word	0x080058f9
 80058d0:	080058d5 	.word	0x080058d5
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	2b06      	cmp	r3, #6
 80058d8:	d913      	bls.n	8005902 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80058de:	e010      	b.n	8005902 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	2b07      	cmp	r3, #7
 80058e4:	d90f      	bls.n	8005906 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80058ea:	e00c      	b.n	8005906 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	2b0f      	cmp	r3, #15
 80058f0:	d90b      	bls.n	800590a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80058f6:	e008      	b.n	800590a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	75fb      	strb	r3, [r7, #23]
      break;
 80058fc:	e006      	b.n	800590c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80058fe:	bf00      	nop
 8005900:	e004      	b.n	800590c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005902:	bf00      	nop
 8005904:	e002      	b.n	800590c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005906:	bf00      	nop
 8005908:	e000      	b.n	800590c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800590a:	bf00      	nop
  }
  if (status == HAL_OK)
 800590c:	7dfb      	ldrb	r3, [r7, #23]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10d      	bne.n	800592e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	f023 0118 	bic.w	r1, r3, #24
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	430a      	orrs	r2, r1
 800592c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800592e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005930:	4618      	mov	r0, r3
 8005932:	371c      	adds	r7, #28
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d101      	bne.n	800594e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e0ac      	b.n	8005aa8 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4618      	mov	r0, r3
 8005954:	f000 f8b2 	bl	8005abc <DFSDM_GetChannelFromInstance>
 8005958:	4603      	mov	r3, r0
 800595a:	4a55      	ldr	r2, [pc, #340]	; (8005ab0 <HAL_DFSDM_ChannelInit+0x174>)
 800595c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d001      	beq.n	8005968 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e09f      	b.n	8005aa8 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f7fc fa4f 	bl	8001e0c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800596e:	4b51      	ldr	r3, [pc, #324]	; (8005ab4 <HAL_DFSDM_ChannelInit+0x178>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	3301      	adds	r3, #1
 8005974:	4a4f      	ldr	r2, [pc, #316]	; (8005ab4 <HAL_DFSDM_ChannelInit+0x178>)
 8005976:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(v_dfsdm1ChannelCounter == 1)
 8005978:	4b4e      	ldr	r3, [pc, #312]	; (8005ab4 <HAL_DFSDM_ChannelInit+0x178>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d125      	bne.n	80059cc <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8005980:	4b4d      	ldr	r3, [pc, #308]	; (8005ab8 <HAL_DFSDM_ChannelInit+0x17c>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a4c      	ldr	r2, [pc, #304]	; (8005ab8 <HAL_DFSDM_ChannelInit+0x17c>)
 8005986:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800598a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800598c:	4b4a      	ldr	r3, [pc, #296]	; (8005ab8 <HAL_DFSDM_ChannelInit+0x17c>)
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	4948      	ldr	r1, [pc, #288]	; (8005ab8 <HAL_DFSDM_ChannelInit+0x17c>)
 8005996:	4313      	orrs	r3, r2
 8005998:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800599a:	4b47      	ldr	r3, [pc, #284]	; (8005ab8 <HAL_DFSDM_ChannelInit+0x17c>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a46      	ldr	r2, [pc, #280]	; (8005ab8 <HAL_DFSDM_ChannelInit+0x17c>)
 80059a0:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80059a4:	6013      	str	r3, [r2, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	791b      	ldrb	r3, [r3, #4]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d108      	bne.n	80059c0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) <<
 80059ae:	4b42      	ldr	r3, [pc, #264]	; (8005ab8 <HAL_DFSDM_ChannelInit+0x17c>)
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	3b01      	subs	r3, #1
 80059b8:	041b      	lsls	r3, r3, #16
 80059ba:	493f      	ldr	r1, [pc, #252]	; (8005ab8 <HAL_DFSDM_ChannelInit+0x17c>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80059c0:	4b3d      	ldr	r3, [pc, #244]	; (8005ab8 <HAL_DFSDM_ChannelInit+0x17c>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a3c      	ldr	r2, [pc, #240]	; (8005ab8 <HAL_DFSDM_ChannelInit+0x17c>)
 80059c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059ca:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80059da:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6819      	ldr	r1, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80059ea:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80059f0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	430a      	orrs	r2, r1
 80059f8:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f022 020f 	bic.w	r2, r2, #15
 8005a08:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	6819      	ldr	r1, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8005a18:	431a      	orrs	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	689a      	ldr	r2, [r3, #8]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8005a30:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	6899      	ldr	r1, [r3, #8]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a40:	3b01      	subs	r3, #1
 8005a42:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8005a44:	431a      	orrs	r2, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	685a      	ldr	r2, [r3, #4]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f002 0207 	and.w	r2, r2, #7
 8005a5c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	6859      	ldr	r1, [r3, #4]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a68:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8005a70:	431a      	orrs	r2, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	430a      	orrs	r2, r1
 8005a78:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005a88:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 f810 	bl	8005abc <DFSDM_GetChannelFromInstance>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	4904      	ldr	r1, [pc, #16]	; (8005ab0 <HAL_DFSDM_ChannelInit+0x174>)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3708      	adds	r7, #8
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	200014cc 	.word	0x200014cc
 8005ab4:	200014c8 	.word	0x200014c8
 8005ab8:	40017400 	.word	0x40017400

08005abc <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a1c      	ldr	r2, [pc, #112]	; (8005b38 <DFSDM_GetChannelFromInstance+0x7c>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d102      	bne.n	8005ad2 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8005acc:	2300      	movs	r3, #0
 8005ace:	60fb      	str	r3, [r7, #12]
 8005ad0:	e02b      	b.n	8005b2a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel1)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a19      	ldr	r2, [pc, #100]	; (8005b3c <DFSDM_GetChannelFromInstance+0x80>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d102      	bne.n	8005ae0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8005ada:	2301      	movs	r3, #1
 8005adc:	60fb      	str	r3, [r7, #12]
 8005ade:	e024      	b.n	8005b2a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a17      	ldr	r2, [pc, #92]	; (8005b40 <DFSDM_GetChannelFromInstance+0x84>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d102      	bne.n	8005aee <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8005ae8:	2302      	movs	r3, #2
 8005aea:	60fb      	str	r3, [r7, #12]
 8005aec:	e01d      	b.n	8005b2a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a14      	ldr	r2, [pc, #80]	; (8005b44 <DFSDM_GetChannelFromInstance+0x88>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d102      	bne.n	8005afc <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 8005af6:	2303      	movs	r3, #3
 8005af8:	60fb      	str	r3, [r7, #12]
 8005afa:	e016      	b.n	8005b2a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a12      	ldr	r2, [pc, #72]	; (8005b48 <DFSDM_GetChannelFromInstance+0x8c>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d102      	bne.n	8005b0a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 8005b04:	2304      	movs	r3, #4
 8005b06:	60fb      	str	r3, [r7, #12]
 8005b08:	e00f      	b.n	8005b2a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a0f      	ldr	r2, [pc, #60]	; (8005b4c <DFSDM_GetChannelFromInstance+0x90>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d102      	bne.n	8005b18 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 8005b12:	2305      	movs	r3, #5
 8005b14:	60fb      	str	r3, [r7, #12]
 8005b16:	e008      	b.n	8005b2a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a0d      	ldr	r2, [pc, #52]	; (8005b50 <DFSDM_GetChannelFromInstance+0x94>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d102      	bne.n	8005b26 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8005b20:	2306      	movs	r3, #6
 8005b22:	60fb      	str	r3, [r7, #12]
 8005b24:	e001      	b.n	8005b2a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 8005b26:	2307      	movs	r3, #7
 8005b28:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3714      	adds	r7, #20
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr
 8005b38:	40017400 	.word	0x40017400
 8005b3c:	40017420 	.word	0x40017420
 8005b40:	40017440 	.word	0x40017440
 8005b44:	40017460 	.word	0x40017460
 8005b48:	40017480 	.word	0x40017480
 8005b4c:	400174a0 	.word	0x400174a0
 8005b50:	400174c0 	.word	0x400174c0

08005b54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b086      	sub	sp, #24
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005b60:	f7ff f8ce 	bl	8004d00 <HAL_GetTick>
 8005b64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d101      	bne.n	8005b70 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e099      	b.n	8005ca4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2202      	movs	r2, #2
 8005b74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f022 0201 	bic.w	r2, r2, #1
 8005b8e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b90:	e00f      	b.n	8005bb2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b92:	f7ff f8b5 	bl	8004d00 <HAL_GetTick>
 8005b96:	4602      	mov	r2, r0
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	2b05      	cmp	r3, #5
 8005b9e:	d908      	bls.n	8005bb2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2220      	movs	r2, #32
 8005ba4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2203      	movs	r2, #3
 8005baa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e078      	b.n	8005ca4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0301 	and.w	r3, r3, #1
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1e8      	bne.n	8005b92 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005bc8:	697a      	ldr	r2, [r7, #20]
 8005bca:	4b38      	ldr	r3, [pc, #224]	; (8005cac <HAL_DMA_Init+0x158>)
 8005bcc:	4013      	ands	r3, r2
 8005bce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685a      	ldr	r2, [r3, #4]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005bde:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bf6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6a1b      	ldr	r3, [r3, #32]
 8005bfc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005bfe:	697a      	ldr	r2, [r7, #20]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c08:	2b04      	cmp	r3, #4
 8005c0a:	d107      	bne.n	8005c1c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c14:	4313      	orrs	r3, r2
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	f023 0307 	bic.w	r3, r3, #7
 8005c32:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c42:	2b04      	cmp	r3, #4
 8005c44:	d117      	bne.n	8005c76 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00e      	beq.n	8005c76 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 f8bd 	bl	8005dd8 <DMA_CheckFifoParam>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d008      	beq.n	8005c76 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2240      	movs	r2, #64	; 0x40
 8005c68:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005c72:	2301      	movs	r3, #1
 8005c74:	e016      	b.n	8005ca4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 f874 	bl	8005d6c <DMA_CalcBaseAndBitshift>
 8005c84:	4603      	mov	r3, r0
 8005c86:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c8c:	223f      	movs	r2, #63	; 0x3f
 8005c8e:	409a      	lsls	r2, r3
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3718      	adds	r7, #24
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	e010803f 	.word	0xe010803f

08005cb0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d101      	bne.n	8005cc2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e050      	b.n	8005d64 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d101      	bne.n	8005cd2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8005cce:	2302      	movs	r3, #2
 8005cd0:	e048      	b.n	8005d64 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f022 0201 	bic.w	r2, r2, #1
 8005ce0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2200      	movs	r2, #0
 8005d08:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2221      	movs	r2, #33	; 0x21
 8005d10:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 f82a 	bl	8005d6c <DMA_CalcBaseAndBitshift>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d20:	223f      	movs	r2, #63	; 0x3f
 8005d22:	409a      	lsls	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3710      	adds	r7, #16
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	3b10      	subs	r3, #16
 8005d7c:	4a13      	ldr	r2, [pc, #76]	; (8005dcc <DMA_CalcBaseAndBitshift+0x60>)
 8005d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d82:	091b      	lsrs	r3, r3, #4
 8005d84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005d86:	4a12      	ldr	r2, [pc, #72]	; (8005dd0 <DMA_CalcBaseAndBitshift+0x64>)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	461a      	mov	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2b03      	cmp	r3, #3
 8005d98:	d908      	bls.n	8005dac <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	4b0c      	ldr	r3, [pc, #48]	; (8005dd4 <DMA_CalcBaseAndBitshift+0x68>)
 8005da2:	4013      	ands	r3, r2
 8005da4:	1d1a      	adds	r2, r3, #4
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	659a      	str	r2, [r3, #88]	; 0x58
 8005daa:	e006      	b.n	8005dba <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	461a      	mov	r2, r3
 8005db2:	4b08      	ldr	r3, [pc, #32]	; (8005dd4 <DMA_CalcBaseAndBitshift+0x68>)
 8005db4:	4013      	ands	r3, r2
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3714      	adds	r7, #20
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	aaaaaaab 	.word	0xaaaaaaab
 8005dd0:	08012294 	.word	0x08012294
 8005dd4:	fffffc00 	.word	0xfffffc00

08005dd8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005de0:	2300      	movs	r3, #0
 8005de2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d11f      	bne.n	8005e32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	2b03      	cmp	r3, #3
 8005df6:	d856      	bhi.n	8005ea6 <DMA_CheckFifoParam+0xce>
 8005df8:	a201      	add	r2, pc, #4	; (adr r2, 8005e00 <DMA_CheckFifoParam+0x28>)
 8005dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dfe:	bf00      	nop
 8005e00:	08005e11 	.word	0x08005e11
 8005e04:	08005e23 	.word	0x08005e23
 8005e08:	08005e11 	.word	0x08005e11
 8005e0c:	08005ea7 	.word	0x08005ea7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d046      	beq.n	8005eaa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e20:	e043      	b.n	8005eaa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e26:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005e2a:	d140      	bne.n	8005eae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e30:	e03d      	b.n	8005eae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e3a:	d121      	bne.n	8005e80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	2b03      	cmp	r3, #3
 8005e40:	d837      	bhi.n	8005eb2 <DMA_CheckFifoParam+0xda>
 8005e42:	a201      	add	r2, pc, #4	; (adr r2, 8005e48 <DMA_CheckFifoParam+0x70>)
 8005e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e48:	08005e59 	.word	0x08005e59
 8005e4c:	08005e5f 	.word	0x08005e5f
 8005e50:	08005e59 	.word	0x08005e59
 8005e54:	08005e71 	.word	0x08005e71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e5c:	e030      	b.n	8005ec0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d025      	beq.n	8005eb6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e6e:	e022      	b.n	8005eb6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e74:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005e78:	d11f      	bne.n	8005eba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005e7e:	e01c      	b.n	8005eba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d903      	bls.n	8005e8e <DMA_CheckFifoParam+0xb6>
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	2b03      	cmp	r3, #3
 8005e8a:	d003      	beq.n	8005e94 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005e8c:	e018      	b.n	8005ec0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	73fb      	strb	r3, [r7, #15]
      break;
 8005e92:	e015      	b.n	8005ec0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00e      	beq.n	8005ebe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ea4:	e00b      	b.n	8005ebe <DMA_CheckFifoParam+0xe6>
      break;
 8005ea6:	bf00      	nop
 8005ea8:	e00a      	b.n	8005ec0 <DMA_CheckFifoParam+0xe8>
      break;
 8005eaa:	bf00      	nop
 8005eac:	e008      	b.n	8005ec0 <DMA_CheckFifoParam+0xe8>
      break;
 8005eae:	bf00      	nop
 8005eb0:	e006      	b.n	8005ec0 <DMA_CheckFifoParam+0xe8>
      break;
 8005eb2:	bf00      	nop
 8005eb4:	e004      	b.n	8005ec0 <DMA_CheckFifoParam+0xe8>
      break;
 8005eb6:	bf00      	nop
 8005eb8:	e002      	b.n	8005ec0 <DMA_CheckFifoParam+0xe8>
      break;   
 8005eba:	bf00      	nop
 8005ebc:	e000      	b.n	8005ec0 <DMA_CheckFifoParam+0xe8>
      break;
 8005ebe:	bf00      	nop
    }
  } 
  
  return status; 
 8005ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3714      	adds	r7, #20
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop

08005ed0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d101      	bne.n	8005ee2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e049      	b.n	8005f76 <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d106      	bne.n	8005efc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f7fc f810 	bl	8001f1c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2202      	movs	r2, #2
 8005f00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	685a      	ldr	r2, [r3, #4]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	430a      	orrs	r2, r1
 8005f18:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f20:	f023 0107 	bic.w	r1, r3, #7
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689a      	ldr	r2, [r3, #8]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	430a      	orrs	r2, r1
 8005f2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f36:	4b12      	ldr	r3, [pc, #72]	; (8005f80 <HAL_DMA2D_Init+0xb0>)
 8005f38:	4013      	ands	r3, r2
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	68d1      	ldr	r1, [r2, #12]
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	6812      	ldr	r2, [r2, #0]
 8005f42:	430b      	orrs	r3, r1
 8005f44:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f4c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	051a      	lsls	r2, r3, #20
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	695b      	ldr	r3, [r3, #20]
 8005f5a:	055b      	lsls	r3, r3, #21
 8005f5c:	431a      	orrs	r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	430a      	orrs	r2, r1
 8005f64:	635a      	str	r2, [r3, #52]	; 0x34
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3708      	adds	r7, #8
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	ffffc000 	.word	0xffffc000

08005f84 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b086      	sub	sp, #24
 8005f88:	af02      	add	r7, sp, #8
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
 8005f90:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d101      	bne.n	8005fa0 <HAL_DMA2D_Start+0x1c>
 8005f9c:	2302      	movs	r3, #2
 8005f9e:	e018      	b.n	8005fd2 <HAL_DMA2D_Start+0x4e>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2202      	movs	r2, #2
 8005fac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	9300      	str	r3, [sp, #0]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	68b9      	ldr	r1, [r7, #8]
 8005fba:	68f8      	ldr	r0, [r7, #12]
 8005fbc:	f000 faa4 	bl	8006508 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f042 0201 	orr.w	r2, r2, #1
 8005fce:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3710      	adds	r7, #16
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}

08005fda <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005fda:	b580      	push	{r7, lr}
 8005fdc:	b086      	sub	sp, #24
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
 8005fe2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0301 	and.w	r3, r3, #1
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d056      	beq.n	80060a4 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ff6:	f7fe fe83 	bl	8004d00 <HAL_GetTick>
 8005ffa:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005ffc:	e04b      	b.n	8006096 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800600c:	2b00      	cmp	r3, #0
 800600e:	d023      	beq.n	8006058 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f003 0320 	and.w	r3, r3, #32
 8006016:	2b00      	cmp	r3, #0
 8006018:	d005      	beq.n	8006026 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800601e:	f043 0202 	orr.w	r2, r3, #2
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f003 0301 	and.w	r3, r3, #1
 800602c:	2b00      	cmp	r3, #0
 800602e:	d005      	beq.n	800603c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006034:	f043 0201 	orr.w	r2, r3, #1
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2221      	movs	r2, #33	; 0x21
 8006042:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2204      	movs	r2, #4
 8006048:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e0a5      	b.n	80061a4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800605e:	d01a      	beq.n	8006096 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006060:	f7fe fe4e 	bl	8004d00 <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	683a      	ldr	r2, [r7, #0]
 800606c:	429a      	cmp	r2, r3
 800606e:	d302      	bcc.n	8006076 <HAL_DMA2D_PollForTransfer+0x9c>
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d10f      	bne.n	8006096 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800607a:	f043 0220 	orr.w	r2, r3, #32
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2203      	movs	r2, #3
 8006086:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8006092:	2303      	movs	r3, #3
 8006094:	e086      	b.n	80061a4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	f003 0302 	and.w	r3, r3, #2
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d0ac      	beq.n	8005ffe <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	69db      	ldr	r3, [r3, #28]
 80060aa:	f003 0320 	and.w	r3, r3, #32
 80060ae:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b6:	f003 0320 	and.w	r3, r3, #32
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	4313      	orrs	r3, r2
 80060be:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d061      	beq.n	800618a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80060c6:	f7fe fe1b 	bl	8004d00 <HAL_GetTick>
 80060ca:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80060cc:	e056      	b.n	800617c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d02e      	beq.n	800613e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f003 0308 	and.w	r3, r3, #8
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d005      	beq.n	80060f6 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ee:	f043 0204 	orr.w	r2, r3, #4
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f003 0320 	and.w	r3, r3, #32
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d005      	beq.n	800610c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006104:	f043 0202 	orr.w	r2, r3, #2
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f003 0301 	and.w	r3, r3, #1
 8006112:	2b00      	cmp	r3, #0
 8006114:	d005      	beq.n	8006122 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800611a:	f043 0201 	orr.w	r2, r3, #1
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2229      	movs	r2, #41	; 0x29
 8006128:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2204      	movs	r2, #4
 800612e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e032      	b.n	80061a4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006144:	d01a      	beq.n	800617c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006146:	f7fe fddb 	bl	8004d00 <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	683a      	ldr	r2, [r7, #0]
 8006152:	429a      	cmp	r2, r3
 8006154:	d302      	bcc.n	800615c <HAL_DMA2D_PollForTransfer+0x182>
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10f      	bne.n	800617c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006160:	f043 0220 	orr.w	r2, r3, #32
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2203      	movs	r2, #3
 800616c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	e013      	b.n	80061a4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f003 0310 	and.w	r3, r3, #16
 8006186:	2b00      	cmp	r3, #0
 8006188:	d0a1      	beq.n	80060ce <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2212      	movs	r2, #18
 8006190:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2201      	movs	r2, #1
 8006196:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3718      	adds	r7, #24
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f003 0301 	and.w	r3, r3, #1
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d026      	beq.n	800621c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d021      	beq.n	800621c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061e6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ec:	f043 0201 	orr.w	r2, r3, #1
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2201      	movs	r2, #1
 80061fa:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2204      	movs	r2, #4
 8006200:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	69db      	ldr	r3, [r3, #28]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d003      	beq.n	800621c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	69db      	ldr	r3, [r3, #28]
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f003 0320 	and.w	r3, r3, #32
 8006222:	2b00      	cmp	r3, #0
 8006224:	d026      	beq.n	8006274 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d021      	beq.n	8006274 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800623e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2220      	movs	r2, #32
 8006246:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800624c:	f043 0202 	orr.w	r2, r3, #2
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2204      	movs	r2, #4
 8006258:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	69db      	ldr	r3, [r3, #28]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d003      	beq.n	8006274 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	69db      	ldr	r3, [r3, #28]
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f003 0308 	and.w	r3, r3, #8
 800627a:	2b00      	cmp	r3, #0
 800627c:	d026      	beq.n	80062cc <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006284:	2b00      	cmp	r3, #0
 8006286:	d021      	beq.n	80062cc <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006296:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2208      	movs	r2, #8
 800629e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062a4:	f043 0204 	orr.w	r2, r3, #4
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2204      	movs	r2, #4
 80062b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	69db      	ldr	r3, [r3, #28]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d003      	beq.n	80062cc <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	69db      	ldr	r3, [r3, #28]
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f003 0304 	and.w	r3, r3, #4
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d013      	beq.n	80062fe <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00e      	beq.n	80062fe <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062ee:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2204      	movs	r2, #4
 80062f6:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 f853 	bl	80063a4 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f003 0302 	and.w	r3, r3, #2
 8006304:	2b00      	cmp	r3, #0
 8006306:	d024      	beq.n	8006352 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800630e:	2b00      	cmp	r3, #0
 8006310:	d01f      	beq.n	8006352 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006320:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2202      	movs	r2, #2
 8006328:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferCpltCallback != NULL)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d003      	beq.n	8006352 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f003 0310 	and.w	r3, r3, #16
 8006358:	2b00      	cmp	r3, #0
 800635a:	d01f      	beq.n	800639c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006362:	2b00      	cmp	r3, #0
 8006364:	d01a      	beq.n	800639c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006374:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2210      	movs	r2, #16
 800637c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f80e 	bl	80063b8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800639c:	bf00      	nop
 800639e:	3710      	adds	r7, #16
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b087      	sub	sp, #28
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d101      	bne.n	80063ec <HAL_DMA2D_ConfigLayer+0x20>
 80063e8:	2302      	movs	r3, #2
 80063ea:	e084      	b.n	80064f6 <HAL_DMA2D_ConfigLayer+0x12a>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2202      	movs	r2, #2
 80063f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80063fc:	683a      	ldr	r2, [r7, #0]
 80063fe:	4613      	mov	r3, r2
 8006400:	005b      	lsls	r3, r3, #1
 8006402:	4413      	add	r3, r2
 8006404:	00db      	lsls	r3, r3, #3
 8006406:	3320      	adds	r3, #32
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	4413      	add	r3, r2
 800640c:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	685a      	ldr	r2, [r3, #4]
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	041b      	lsls	r3, r3, #16
 8006418:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006420:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	695b      	ldr	r3, [r3, #20]
 8006426:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006428:	4313      	orrs	r3, r2
 800642a:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 800642c:	4b35      	ldr	r3, [pc, #212]	; (8006504 <HAL_DMA2D_ConfigLayer+0x138>)
 800642e:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	2b0a      	cmp	r3, #10
 8006436:	d003      	beq.n	8006440 <HAL_DMA2D_ConfigLayer+0x74>
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	2b09      	cmp	r3, #9
 800643e:	d107      	bne.n	8006450 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006448:	697a      	ldr	r2, [r7, #20]
 800644a:	4313      	orrs	r3, r2
 800644c:	617b      	str	r3, [r7, #20]
 800644e:	e005      	b.n	800645c <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	061b      	lsls	r3, r3, #24
 8006456:	697a      	ldr	r2, [r7, #20]
 8006458:	4313      	orrs	r3, r2
 800645a:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d120      	bne.n	80064a4 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	43db      	mvns	r3, r3
 800646c:	ea02 0103 	and.w	r1, r2, r3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	697a      	ldr	r2, [r7, #20]
 8006476:	430a      	orrs	r2, r1
 8006478:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	693a      	ldr	r2, [r7, #16]
 8006480:	6812      	ldr	r2, [r2, #0]
 8006482:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	2b0a      	cmp	r3, #10
 800648a:	d003      	beq.n	8006494 <HAL_DMA2D_ConfigLayer+0xc8>
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	2b09      	cmp	r3, #9
 8006492:	d127      	bne.n	80064e4 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	68da      	ldr	r2, [r3, #12]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80064a0:	629a      	str	r2, [r3, #40]	; 0x28
 80064a2:	e01f      	b.n	80064e4 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	69da      	ldr	r2, [r3, #28]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	43db      	mvns	r3, r3
 80064ae:	ea02 0103 	and.w	r1, r2, r3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	697a      	ldr	r2, [r7, #20]
 80064b8:	430a      	orrs	r2, r1
 80064ba:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	693a      	ldr	r2, [r7, #16]
 80064c2:	6812      	ldr	r2, [r2, #0]
 80064c4:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	2b0a      	cmp	r3, #10
 80064cc:	d003      	beq.n	80064d6 <HAL_DMA2D_ConfigLayer+0x10a>
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	2b09      	cmp	r3, #9
 80064d4:	d106      	bne.n	80064e4 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	68da      	ldr	r2, [r3, #12]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80064e2:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	371c      	adds	r7, #28
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	ff33000f 	.word	0xff33000f

08006508 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8006508:	b480      	push	{r7}
 800650a:	b08b      	sub	sp, #44	; 0x2c
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	607a      	str	r2, [r7, #4]
 8006514:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800651c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	041a      	lsls	r2, r3, #16
 8006524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006526:	431a      	orrs	r2, r3
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	430a      	orrs	r2, r1
 800652e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006540:	d174      	bne.n	800662c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006548:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006550:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006558:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	b2db      	uxtb	r3, r3
 800655e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d108      	bne.n	800657a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8006568:	69ba      	ldr	r2, [r7, #24]
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	431a      	orrs	r2, r3
 800656e:	6a3b      	ldr	r3, [r7, #32]
 8006570:	4313      	orrs	r3, r2
 8006572:	697a      	ldr	r2, [r7, #20]
 8006574:	4313      	orrs	r3, r2
 8006576:	627b      	str	r3, [r7, #36]	; 0x24
 8006578:	e053      	b.n	8006622 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	2b01      	cmp	r3, #1
 8006580:	d106      	bne.n	8006590 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8006582:	69ba      	ldr	r2, [r7, #24]
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	4313      	orrs	r3, r2
 8006588:	697a      	ldr	r2, [r7, #20]
 800658a:	4313      	orrs	r3, r2
 800658c:	627b      	str	r3, [r7, #36]	; 0x24
 800658e:	e048      	b.n	8006622 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	2b02      	cmp	r3, #2
 8006596:	d111      	bne.n	80065bc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	0cdb      	lsrs	r3, r3, #19
 800659c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	0a9b      	lsrs	r3, r3, #10
 80065a2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	08db      	lsrs	r3, r3, #3
 80065a8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	015a      	lsls	r2, r3, #5
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	02db      	lsls	r3, r3, #11
 80065b2:	4313      	orrs	r3, r2
 80065b4:	697a      	ldr	r2, [r7, #20]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	627b      	str	r3, [r7, #36]	; 0x24
 80065ba:	e032      	b.n	8006622 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	2b03      	cmp	r3, #3
 80065c2:	d117      	bne.n	80065f4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80065c4:	6a3b      	ldr	r3, [r7, #32]
 80065c6:	0fdb      	lsrs	r3, r3, #31
 80065c8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	0cdb      	lsrs	r3, r3, #19
 80065ce:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	0adb      	lsrs	r3, r3, #11
 80065d4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	08db      	lsrs	r3, r3, #3
 80065da:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	015a      	lsls	r2, r3, #5
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	029b      	lsls	r3, r3, #10
 80065e4:	431a      	orrs	r2, r3
 80065e6:	6a3b      	ldr	r3, [r7, #32]
 80065e8:	03db      	lsls	r3, r3, #15
 80065ea:	4313      	orrs	r3, r2
 80065ec:	697a      	ldr	r2, [r7, #20]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	627b      	str	r3, [r7, #36]	; 0x24
 80065f2:	e016      	b.n	8006622 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80065f4:	6a3b      	ldr	r3, [r7, #32]
 80065f6:	0f1b      	lsrs	r3, r3, #28
 80065f8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	0d1b      	lsrs	r3, r3, #20
 80065fe:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	0b1b      	lsrs	r3, r3, #12
 8006604:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	091b      	lsrs	r3, r3, #4
 800660a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	011a      	lsls	r2, r3, #4
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	021b      	lsls	r3, r3, #8
 8006614:	431a      	orrs	r2, r3
 8006616:	6a3b      	ldr	r3, [r7, #32]
 8006618:	031b      	lsls	r3, r3, #12
 800661a:	4313      	orrs	r3, r2
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	4313      	orrs	r3, r2
 8006620:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006628:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800662a:	e003      	b.n	8006634 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68ba      	ldr	r2, [r7, #8]
 8006632:	60da      	str	r2, [r3, #12]
}
 8006634:	bf00      	nop
 8006636:	372c      	adds	r7, #44	; 0x2c
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]
 800664c:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	019a      	lsls	r2, r3, #6
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	431a      	orrs	r2, r3
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	021b      	lsls	r3, r3, #8
 800665a:	431a      	orrs	r2, r3
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	041b      	lsls	r3, r3, #16
 8006660:	431a      	orrs	r2, r3
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8006666:	bf00      	nop
 8006668:	3714      	adds	r7, #20
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr

08006672 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8006672:	b580      	push	{r7, lr}
 8006674:	b086      	sub	sp, #24
 8006676:	af00      	add	r7, sp, #0
 8006678:	60f8      	str	r0, [r7, #12]
 800667a:	60b9      	str	r1, [r7, #8]
 800667c:	607a      	str	r2, [r7, #4]
 800667e:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8006680:	f7fe fb3e 	bl	8004d00 <HAL_GetTick>
 8006684:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8006686:	e009      	b.n	800669c <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006688:	f7fe fb3a 	bl	8004d00 <HAL_GetTick>
 800668c:	4602      	mov	r2, r0
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006696:	d901      	bls.n	800669c <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e015      	b.n	80066c8 <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066a2:	f003 0301 	and.w	r3, r3, #1
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d0ee      	beq.n	8006688 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	019a      	lsls	r2, r3, #6
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	431a      	orrs	r2, r3
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	021b      	lsls	r3, r3, #8
 80066b6:	ea42 0103 	orr.w	r1, r2, r3
 80066ba:	6a3b      	ldr	r3, [r7, #32]
 80066bc:	041a      	lsls	r2, r3, #16
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	430a      	orrs	r2, r1
 80066c4:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3718      	adds	r7, #24
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b088      	sub	sp, #32
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d101      	bne.n	80066e4 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	e109      	b.n	80068f8 <HAL_DSI_Init+0x228>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	7c5b      	ldrb	r3, [r3, #17]
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d102      	bne.n	80066f4 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f7fb fc3a 	bl	8001f68 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2203      	movs	r2, #3
 80066f8:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 80066fa:	2300      	movs	r3, #0
 80066fc:	613b      	str	r3, [r7, #16]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800670e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800671a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800671e:	613b      	str	r3, [r7, #16]
 8006720:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006722:	f7fe faed 	bl	8004d00 <HAL_GetTick>
 8006726:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8006728:	e009      	b.n	800673e <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800672a:	f7fe fae9 	bl	8004d00 <HAL_GetTick>
 800672e:	4602      	mov	r2, r0
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006738:	d901      	bls.n	800673e <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	e0dc      	b.n	80068f8 <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8006746:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800674a:	2b00      	cmp	r3, #0
 800674c:	d0ed      	beq.n	800672a <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	4b69      	ldr	r3, [pc, #420]	; (8006900 <HAL_DSI_Init+0x230>)
 800675c:	400b      	ands	r3, r1
 800675e:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8006776:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800677e:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	430a      	orrs	r2, r1
 8006786:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 800678a:	2300      	movs	r3, #0
 800678c:	60fb      	str	r3, [r7, #12]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f042 0201 	orr.w	r2, r2, #1
 800679e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80067aa:	f003 0301 	and.w	r3, r3, #1
 80067ae:	60fb      	str	r3, [r7, #12]
 80067b0:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 80067b2:	2001      	movs	r0, #1
 80067b4:	f7fe fab0 	bl	8004d18 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 80067b8:	f7fe faa2 	bl	8004d00 <HAL_GetTick>
 80067bc:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80067be:	e009      	b.n	80067d4 <HAL_DSI_Init+0x104>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80067c0:	f7fe fa9e 	bl	8004d00 <HAL_GetTick>
 80067c4:	4602      	mov	r2, r0
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067ce:	d901      	bls.n	80067d4 <HAL_DSI_Init+0x104>
    {
      return HAL_TIMEOUT;
 80067d0:	2303      	movs	r3, #3
 80067d2:	e091      	b.n	80068f8 <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80067dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d0ed      	beq.n	80067c0 <HAL_DSI_Init+0xf0>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f042 0206 	orr.w	r2, r2, #6
 80067f4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f022 0203 	bic.w	r2, r2, #3
 8006808:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	431a      	orrs	r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f042 0201 	orr.w	r2, r2, #1
 8006822:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f022 0203 	bic.w	r2, r2, #3
 8006836:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	68da      	ldr	r2, [r3, #12]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	430a      	orrs	r2, r1
 800684c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	689a      	ldr	r2, [r3, #8]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800685e:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	6899      	ldr	r1, [r3, #8]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	689a      	ldr	r2, [r3, #8]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	430a      	orrs	r2, r1
 8006870:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d002      	beq.n	8006880 <HAL_DSI_Init+0x1b0>
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	e000      	b.n	8006882 <HAL_DSI_Init+0x1b2>
 8006880:	2301      	movs	r3, #1
 8006882:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	4a1f      	ldr	r2, [pc, #124]	; (8006904 <HAL_DSI_Init+0x234>)
 8006888:	fb03 f202 	mul.w	r2, r3, r2
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	f003 0303 	and.w	r3, r3, #3
 8006894:	409a      	lsls	r2, r3
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f246 11a8 	movw	r1, #25000	; 0x61a8
 800689e:	fb01 f303 	mul.w	r3, r1, r3
 80068a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80068a6:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80068b8:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	697a      	ldr	r2, [r7, #20]
 80068ca:	430a      	orrs	r2, r1
 80068cc:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2200      	movs	r2, #0
 80068e0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3720      	adds	r7, #32
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	fffc8603 	.word	0xfffc8603
 8006904:	003d0900 	.word	0x003d0900

08006908 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b086      	sub	sp, #24
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d101      	bne.n	800691a <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e066      	b.n	80069e8 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2203      	movs	r2, #3
 800691e:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8006920:	2300      	movs	r3, #0
 8006922:	617b      	str	r3, [r7, #20]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f022 0208 	bic.w	r2, r2, #8
 8006934:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006940:	f003 0308 	and.w	r3, r3, #8
 8006944:	617b      	str	r3, [r7, #20]
 8006946:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8006948:	2300      	movs	r3, #0
 800694a:	613b      	str	r3, [r7, #16]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	685a      	ldr	r2, [r3, #4]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f022 0201 	bic.w	r2, r2, #1
 800695a:	605a      	str	r2, [r3, #4]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	f003 0301 	and.w	r3, r3, #1
 8006966:	613b      	str	r3, [r7, #16]
 8006968:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f022 0206 	bic.w	r2, r2, #6
 800697a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 800697e:	2300      	movs	r3, #0
 8006980:	60fb      	str	r3, [r7, #12]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f022 0201 	bic.w	r2, r2, #1
 8006992:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800699e:	f003 0301 	and.w	r3, r3, #1
 80069a2:	60fb      	str	r3, [r7, #12]
 80069a4:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 80069a6:	2300      	movs	r3, #0
 80069a8:	60bb      	str	r3, [r7, #8]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80069ba:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80069c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80069ca:	60bb      	str	r3, [r7, #8]
 80069cc:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f7fb fb16 	bl	8002000 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80069e6:	2300      	movs	r3, #0
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3718      	adds	r7, #24
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	7c1b      	ldrb	r3, [r3, #16]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d101      	bne.n	8006a06 <HAL_DSI_ConfigErrorMonitor+0x16>
 8006a02:	2302      	movs	r3, #2
 8006a04:	e0aa      	b.n	8006b5c <HAL_DSI_ConfigErrorMonitor+0x16c>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	683a      	ldr	r2, [r7, #0]
 8006a24:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	f003 0301 	and.w	r3, r3, #1
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d00a      	beq.n	8006a46 <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006a40:	430b      	orrs	r3, r1
 8006a42:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	f003 0302 	and.w	r3, r3, #2
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d009      	beq.n	8006a64 <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8006a60:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	f003 0304 	and.w	r3, r3, #4
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d009      	beq.n	8006a82 <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f042 0201 	orr.w	r2, r2, #1
 8006a7e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	f003 0308 	and.w	r3, r3, #8
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d009      	beq.n	8006aa0 <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f042 0202 	orr.w	r2, r2, #2
 8006a9c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	f003 0310 	and.w	r3, r3, #16
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d009      	beq.n	8006abe <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f042 020c 	orr.w	r2, r2, #12
 8006aba:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	f003 0320 	and.w	r3, r3, #32
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d009      	beq.n	8006adc <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f042 0210 	orr.w	r2, r2, #16
 8006ad8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d009      	beq.n	8006afa <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f042 0220 	orr.w	r2, r2, #32
 8006af6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d009      	beq.n	8006b18 <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b14:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d009      	beq.n	8006b36 <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b32:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d009      	beq.n	8006b54 <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8006b50:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8006b78:	f003 0301 	and.w	r3, r3, #1
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d00f      	beq.n	8006ba0 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8006b88:	f003 0301 	and.w	r3, r3, #1
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d007      	beq.n	8006ba0 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2201      	movs	r2, #1
 8006b96:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 f8ad 	bl	8006cfa <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8006ba8:	f003 0302 	and.w	r3, r3, #2
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00f      	beq.n	8006bd0 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8006bb8:	f003 0302 	and.w	r3, r3, #2
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d007      	beq.n	8006bd0 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2202      	movs	r2, #2
 8006bc6:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 f89f 	bl	8006d0e <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	699b      	ldr	r3, [r3, #24]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f000 808c 	beq.w	8006cf2 <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006be2:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	4013      	ands	r3, r2
 8006bf0:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006bfa:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8006c04:	68ba      	ldr	r2, [r7, #8]
 8006c06:	4013      	ands	r3, r2
 8006c08:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d005      	beq.n	8006c1e <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	695b      	ldr	r3, [r3, #20]
 8006c16:	f043 0201 	orr.w	r2, r3, #1
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d005      	beq.n	8006c34 <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	695b      	ldr	r3, [r3, #20]
 8006c2c:	f043 0202 	orr.w	r2, r3, #2
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	f003 0301 	and.w	r3, r3, #1
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d005      	beq.n	8006c4a <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	695b      	ldr	r3, [r3, #20]
 8006c42:	f043 0204 	orr.w	r2, r3, #4
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	f003 0302 	and.w	r3, r3, #2
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d005      	beq.n	8006c60 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	695b      	ldr	r3, [r3, #20]
 8006c58:	f043 0208 	orr.w	r2, r3, #8
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	f003 030c 	and.w	r3, r3, #12
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d005      	beq.n	8006c76 <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	695b      	ldr	r3, [r3, #20]
 8006c6e:	f043 0210 	orr.w	r2, r3, #16
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	f003 0310 	and.w	r3, r3, #16
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d005      	beq.n	8006c8c <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	695b      	ldr	r3, [r3, #20]
 8006c84:	f043 0220 	orr.w	r2, r3, #32
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	f003 0320 	and.w	r3, r3, #32
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d005      	beq.n	8006ca2 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	695b      	ldr	r3, [r3, #20]
 8006c9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d005      	beq.n	8006cb8 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	695b      	ldr	r3, [r3, #20]
 8006cb0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d005      	beq.n	8006cce <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	695b      	ldr	r3, [r3, #20]
 8006cc6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d005      	beq.n	8006ce4 <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	695b      	ldr	r3, [r3, #20]
 8006cdc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	695b      	ldr	r3, [r3, #20]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d002      	beq.n	8006cf2 <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 f818 	bl	8006d22 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8006cf2:	bf00      	nop
 8006cf4:	3710      	adds	r7, #16
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}

08006cfa <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8006cfa:	b480      	push	{r7}
 8006cfc:	b083      	sub	sp, #12
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 8006d02:	bf00      	nop
 8006d04:	370c      	adds	r7, #12
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr

08006d0e <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8006d0e:	b480      	push	{r7}
 8006d10:	b083      	sub	sp, #12
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 8006d16:	bf00      	nop
 8006d18:	370c      	adds	r7, #12
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr

08006d22 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8006d22:	b480      	push	{r7}
 8006d24:	b083      	sub	sp, #12
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8006d2a:	bf00      	nop
 8006d2c:	370c      	adds	r7, #12
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr

08006d36 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8006d36:	b480      	push	{r7}
 8006d38:	b083      	sub	sp, #12
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
 8006d3e:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	7c1b      	ldrb	r3, [r3, #16]
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d101      	bne.n	8006d4c <HAL_DSI_SetGenericVCID+0x16>
 8006d48:	2302      	movs	r3, #2
 8006d4a:	e016      	b.n	8006d7a <HAL_DSI_SetGenericVCID+0x44>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f022 0203 	bic.w	r2, r2, #3
 8006d60:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	683a      	ldr	r2, [r7, #0]
 8006d6e:	430a      	orrs	r2, r1
 8006d70:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	370c      	adds	r7, #12
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr
	...

08006d88 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	7c1b      	ldrb	r3, [r3, #16]
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d101      	bne.n	8006d9e <HAL_DSI_ConfigVideoMode+0x16>
 8006d9a:	2302      	movs	r3, #2
 8006d9c:	e1ee      	b.n	800717c <HAL_DSI_ConfigVideoMode+0x3f4>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2201      	movs	r2, #1
 8006da2:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f022 0201 	bic.w	r2, r2, #1
 8006db2:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f022 0201 	bic.w	r2, r2, #1
 8006dc4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f022 0203 	bic.w	r2, r2, #3
 8006dd6:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	68da      	ldr	r2, [r3, #12]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	430a      	orrs	r2, r1
 8006de8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	4b8b      	ldr	r3, [pc, #556]	; (8007024 <HAL_DSI_ConfigVideoMode+0x29c>)
 8006df6:	400b      	ands	r3, r1
 8006df8:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	691a      	ldr	r2, [r3, #16]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	430a      	orrs	r2, r1
 8006e0a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	4b84      	ldr	r3, [pc, #528]	; (8007028 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8006e18:	400b      	ands	r3, r1
 8006e1a:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	695a      	ldr	r2, [r3, #20]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	430a      	orrs	r2, r1
 8006e2c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	4b7b      	ldr	r3, [pc, #492]	; (8007028 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8006e3a:	400b      	ands	r3, r1
 8006e3c:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	699a      	ldr	r2, [r3, #24]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	430a      	orrs	r2, r1
 8006e4e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68da      	ldr	r2, [r3, #12]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f022 0203 	bic.w	r2, r2, #3
 8006e5e:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68d9      	ldr	r1, [r3, #12]
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	430a      	orrs	r2, r1
 8006e70:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	695a      	ldr	r2, [r3, #20]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f022 0207 	bic.w	r2, r2, #7
 8006e80:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	6959      	ldr	r1, [r3, #20]
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	6a1b      	ldr	r3, [r3, #32]
 8006e90:	431a      	orrs	r2, r3
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	69db      	ldr	r3, [r3, #28]
 8006e96:	431a      	orrs	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	430a      	orrs	r2, r1
 8006e9e:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	691a      	ldr	r2, [r3, #16]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f022 020f 	bic.w	r2, r2, #15
 8006eae:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	6919      	ldr	r1, [r3, #16]
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	685a      	ldr	r2, [r3, #4]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	430a      	orrs	r2, r1
 8006ec0:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f022 020e 	bic.w	r2, r2, #14
 8006ed2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	005a      	lsls	r2, r3, #1
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	430a      	orrs	r2, r1
 8006eea:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	2b03      	cmp	r3, #3
 8006ef4:	d110      	bne.n	8006f18 <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	691a      	ldr	r2, [r3, #16]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f04:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	6919      	ldr	r1, [r3, #16]
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	689a      	ldr	r2, [r3, #8]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	430a      	orrs	r2, r1
 8006f16:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	4b42      	ldr	r3, [pc, #264]	; (800702c <HAL_DSI_ConfigVideoMode+0x2a4>)
 8006f24:	400b      	ands	r3, r1
 8006f26:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	430a      	orrs	r2, r1
 8006f38:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	4b39      	ldr	r3, [pc, #228]	; (800702c <HAL_DSI_ConfigVideoMode+0x2a4>)
 8006f46:	400b      	ands	r3, r1
 8006f48:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	430a      	orrs	r2, r1
 8006f5a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	4b32      	ldr	r3, [pc, #200]	; (8007030 <HAL_DSI_ConfigVideoMode+0x2a8>)
 8006f68:	400b      	ands	r3, r1
 8006f6a:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	430a      	orrs	r2, r1
 8006f7c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	4b2a      	ldr	r3, [pc, #168]	; (8007034 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8006f8a:	400b      	ands	r3, r1
 8006f8c:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	430a      	orrs	r2, r1
 8006f9e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	4b22      	ldr	r3, [pc, #136]	; (8007034 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8006fac:	400b      	ands	r3, r1
 8006fae:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	430a      	orrs	r2, r1
 8006fc0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	4b19      	ldr	r3, [pc, #100]	; (8007034 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8006fce:	400b      	ands	r3, r1
 8006fd0:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	430a      	orrs	r2, r1
 8006fe2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	4b0d      	ldr	r3, [pc, #52]	; (8007024 <HAL_DSI_ConfigVideoMode+0x29c>)
 8006ff0:	400b      	ands	r3, r1
 8006ff2:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	430a      	orrs	r2, r1
 8007004:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007014:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007020:	e00a      	b.n	8007038 <HAL_DSI_ConfigVideoMode+0x2b0>
 8007022:	bf00      	nop
 8007024:	ffffc000 	.word	0xffffc000
 8007028:	ffffe000 	.word	0xffffe000
 800702c:	fffff000 	.word	0xfffff000
 8007030:	ffff8000 	.word	0xffff8000
 8007034:	fffffc00 	.word	0xfffffc00
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	430a      	orrs	r2, r1
 800703e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	699a      	ldr	r2, [r3, #24]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 800704e:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	6999      	ldr	r1, [r3, #24]
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800705a:	041a      	lsls	r2, r3, #16
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	430a      	orrs	r2, r1
 8007062:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	699a      	ldr	r2, [r3, #24]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007072:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	6999      	ldr	r1, [r3, #24]
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	430a      	orrs	r2, r1
 8007084:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007094:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	430a      	orrs	r2, r1
 80070a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80070b6:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	430a      	orrs	r2, r1
 80070c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070d8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	430a      	orrs	r2, r1
 80070ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070fa:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	430a      	orrs	r2, r1
 800710c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800711c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	430a      	orrs	r2, r1
 800712e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800713e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	430a      	orrs	r2, r1
 8007150:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007160:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	430a      	orrs	r2, r1
 8007172:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	7c1b      	ldrb	r3, [r3, #16]
 8007196:	2b01      	cmp	r3, #1
 8007198:	d101      	bne.n	800719e <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 800719a:	2302      	movs	r3, #2
 800719c:	e0c5      	b.n	800732a <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2201      	movs	r2, #1
 80071a2:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f042 0201 	orr.w	r2, r2, #1
 80071b2:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f022 0201 	bic.w	r2, r2, #1
 80071c4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f042 0201 	orr.w	r2, r2, #1
 80071d8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68da      	ldr	r2, [r3, #12]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f022 0203 	bic.w	r2, r2, #3
 80071ea:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68d9      	ldr	r1, [r3, #12]
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	430a      	orrs	r2, r1
 80071fc:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	695a      	ldr	r2, [r3, #20]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f022 0207 	bic.w	r2, r2, #7
 800720c:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	6959      	ldr	r1, [r3, #20]
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	69da      	ldr	r2, [r3, #28]
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	699b      	ldr	r3, [r3, #24]
 800721c:	431a      	orrs	r2, r3
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	695b      	ldr	r3, [r3, #20]
 8007222:	431a      	orrs	r2, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	430a      	orrs	r2, r1
 800722a:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	691a      	ldr	r2, [r3, #16]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f022 020f 	bic.w	r2, r2, #15
 800723a:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	6919      	ldr	r1, [r3, #16]
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	685a      	ldr	r2, [r3, #4]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	430a      	orrs	r2, r1
 800724c:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f022 020e 	bic.w	r2, r2, #14
 800725e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	005a      	lsls	r2, r3, #1
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	430a      	orrs	r2, r1
 8007276:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	4b2c      	ldr	r3, [pc, #176]	; (8007338 <HAL_DSI_ConfigAdaptedCommandMode+0x1b0>)
 8007286:	400b      	ands	r3, r1
 8007288:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	689a      	ldr	r2, [r3, #8]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	430a      	orrs	r2, r1
 800729a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80072ac:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	68da      	ldr	r2, [r3, #12]
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	431a      	orrs	r2, r3
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c6:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80072cc:	431a      	orrs	r2, r3
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	430a      	orrs	r2, r1
 80072d4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f022 0201 	bic.w	r2, r2, #1
 80072e6:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	430a      	orrs	r2, r1
 80072f8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f042 0201 	orr.w	r2, r2, #1
 800730a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f042 0202 	orr.w	r2, r2, #2
 800731e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	370c      	adds	r7, #12
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr
 8007336:	bf00      	nop
 8007338:	ffff0000 	.word	0xffff0000

0800733c <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 800733c:	b480      	push	{r7}
 800733e:	b083      	sub	sp, #12
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	7c1b      	ldrb	r3, [r3, #16]
 800734a:	2b01      	cmp	r3, #1
 800734c:	d101      	bne.n	8007352 <HAL_DSI_ConfigCommand+0x16>
 800734e:	2302      	movs	r3, #2
 8007350:	e049      	b.n	80073e6 <HAL_DSI_ConfigCommand+0xaa>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2201      	movs	r2, #1
 8007356:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	4b24      	ldr	r3, [pc, #144]	; (80073f4 <HAL_DSI_ConfigCommand+0xb8>)
 8007364:	400b      	ands	r3, r1
 8007366:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8007376:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 800737c:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8007382:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8007388:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 800738e:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8007394:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 800739a:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 80073a0:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 80073a6:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 80073ac:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 80073b2:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	430a      	orrs	r2, r1
 80073ba:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f022 0202 	bic.w	r2, r2, #2
 80073ca:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	430a      	orrs	r2, r1
 80073dc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	370c      	adds	r7, #12
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop
 80073f4:	fef080ff 	.word	0xfef080ff

080073f8 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	7c1b      	ldrb	r3, [r3, #16]
 8007406:	2b01      	cmp	r3, #1
 8007408:	d101      	bne.n	800740e <HAL_DSI_ConfigFlowControl+0x16>
 800740a:	2302      	movs	r3, #2
 800740c:	e016      	b.n	800743c <HAL_DSI_ConfigFlowControl+0x44>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2201      	movs	r2, #1
 8007412:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f022 021f 	bic.w	r2, r2, #31
 8007422:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	683a      	ldr	r2, [r7, #0]
 8007430:	430a      	orrs	r2, r1
 8007432:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800743a:	2300      	movs	r3, #0
}
 800743c:	4618      	mov	r0, r3
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	7c1b      	ldrb	r3, [r3, #16]
 8007456:	2b01      	cmp	r3, #1
 8007458:	d101      	bne.n	800745e <HAL_DSI_ConfigPhyTimer+0x16>
 800745a:	2302      	movs	r3, #2
 800745c:	e058      	b.n	8007510 <HAL_DSI_ConfigPhyTimer+0xc8>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2201      	movs	r2, #1
 8007462:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	4293      	cmp	r3, r2
 800746e:	bf38      	it	cc
 8007470:	4613      	movcc	r3, r2
 8007472:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8007484:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	041a      	lsls	r2, r3, #16
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	431a      	orrs	r2, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	430a      	orrs	r2, r1
 800749e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80074b2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	691a      	ldr	r2, [r3, #16]
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	041b      	lsls	r3, r3, #16
 80074c8:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80074d0:	431a      	orrs	r2, r3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	430a      	orrs	r2, r1
 80074d8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80074ec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	695b      	ldr	r3, [r3, #20]
 80074fc:	021a      	lsls	r2, r3, #8
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	430a      	orrs	r2, r1
 8007504:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800750e:	2300      	movs	r3, #0
}
 8007510:	4618      	mov	r0, r3
 8007512:	3714      	adds	r7, #20
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	7c1b      	ldrb	r3, [r3, #16]
 800752a:	2b01      	cmp	r3, #1
 800752c:	d101      	bne.n	8007532 <HAL_DSI_ConfigHostTimeouts+0x16>
 800752e:	2302      	movs	r3, #2
 8007530:	e0b4      	b.n	800769c <HAL_DSI_ConfigHostTimeouts+0x180>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2201      	movs	r2, #1
 8007536:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	689a      	ldr	r2, [r3, #8]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8007546:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	6899      	ldr	r1, [r3, #8]
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	021a      	lsls	r2, r3, #8
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	430a      	orrs	r2, r1
 800755a:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	b292      	uxth	r2, r2
 8007568:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	041a      	lsls	r2, r3, #16
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	430a      	orrs	r2, r1
 800757c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	4b47      	ldr	r3, [pc, #284]	; (80076a8 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 800758a:	400b      	ands	r3, r1
 800758c:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	689a      	ldr	r2, [r3, #8]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	430a      	orrs	r2, r1
 800759e:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	4b3f      	ldr	r3, [pc, #252]	; (80076a8 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80075ac:	400b      	ands	r3, r1
 80075ae:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	68da      	ldr	r2, [r3, #12]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	430a      	orrs	r2, r1
 80075c0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	4b36      	ldr	r3, [pc, #216]	; (80076a8 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80075d0:	400b      	ands	r3, r1
 80075d2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	691a      	ldr	r2, [r3, #16]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	430a      	orrs	r2, r1
 80075e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	4b2b      	ldr	r3, [pc, #172]	; (80076a8 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80075fa:	400b      	ands	r3, r1
 80075fc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	695a      	ldr	r2, [r3, #20]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	430a      	orrs	r2, r1
 8007612:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007626:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	699a      	ldr	r2, [r3, #24]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	430a      	orrs	r2, r1
 800763c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	4b16      	ldr	r3, [pc, #88]	; (80076a8 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 800764e:	400b      	ands	r3, r1
 8007650:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	69da      	ldr	r2, [r3, #28]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	430a      	orrs	r2, r1
 8007666:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	4b0c      	ldr	r3, [pc, #48]	; (80076a8 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8007678:	400b      	ands	r3, r1
 800767a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	6a1a      	ldr	r2, [r3, #32]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	430a      	orrs	r2, r1
 8007690:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800769a:	2300      	movs	r3, #0
}
 800769c:	4618      	mov	r0, r3
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr
 80076a8:	ffff0000 	.word	0xffff0000

080076ac <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b085      	sub	sp, #20
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	7c1b      	ldrb	r3, [r3, #16]
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d101      	bne.n	80076c0 <HAL_DSI_Start+0x14>
 80076bc:	2302      	movs	r3, #2
 80076be:	e02b      	b.n	8007718 <HAL_DSI_Start+0x6c>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 80076c6:	2300      	movs	r3, #0
 80076c8:	60fb      	str	r3, [r7, #12]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	685a      	ldr	r2, [r3, #4]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f042 0201 	orr.w	r2, r2, #1
 80076d8:	605a      	str	r2, [r3, #4]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	f003 0301 	and.w	r3, r3, #1
 80076e4:	60fb      	str	r3, [r7, #12]
 80076e6:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80076e8:	2300      	movs	r3, #0
 80076ea:	60bb      	str	r3, [r7, #8]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f042 0208 	orr.w	r2, r2, #8
 80076fc:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007708:	f003 0308 	and.w	r3, r3, #8
 800770c:	60bb      	str	r3, [r7, #8]
 800770e:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8007716:	2300      	movs	r3, #0
}
 8007718:	4618      	mov	r0, r3
 800771a:	3714      	adds	r7, #20
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b088      	sub	sp, #32
 8007728:	af02      	add	r7, sp, #8
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	607a      	str	r2, [r7, #4]
 8007730:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	7c1b      	ldrb	r3, [r3, #16]
 8007736:	2b01      	cmp	r3, #1
 8007738:	d101      	bne.n	800773e <HAL_DSI_ShortWrite+0x1a>
 800773a:	2302      	movs	r3, #2
 800773c:	e010      	b.n	8007760 <HAL_DSI_ShortWrite+0x3c>
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2201      	movs	r2, #1
 8007742:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8007744:	6a3b      	ldr	r3, [r7, #32]
 8007746:	9300      	str	r3, [sp, #0]
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	68b9      	ldr	r1, [r7, #8]
 800774e:	68f8      	ldr	r0, [r7, #12]
 8007750:	f7fe ff8f 	bl	8006672 <DSI_ShortWrite>
 8007754:	4603      	mov	r3, r0
 8007756:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2200      	movs	r2, #0
 800775c:	741a      	strb	r2, [r3, #16]

  return status;
 800775e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007760:	4618      	mov	r0, r3
 8007762:	3718      	adds	r7, #24
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b08c      	sub	sp, #48	; 0x30
 800776c:	af02      	add	r7, sp, #8
 800776e:	60f8      	str	r0, [r7, #12]
 8007770:	60b9      	str	r1, [r7, #8]
 8007772:	607a      	str	r2, [r7, #4]
 8007774:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8007776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007778:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	7c1b      	ldrb	r3, [r3, #16]
 800777e:	2b01      	cmp	r3, #1
 8007780:	d101      	bne.n	8007786 <HAL_DSI_LongWrite+0x1e>
 8007782:	2302      	movs	r3, #2
 8007784:	e084      	b.n	8007890 <HAL_DSI_LongWrite+0x128>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2201      	movs	r2, #1
 800778a:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800778c:	f7fd fab8 	bl	8004d00 <HAL_GetTick>
 8007790:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8007792:	e00c      	b.n	80077ae <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007794:	f7fd fab4 	bl	8004d00 <HAL_GetTick>
 8007798:	4602      	mov	r2, r0
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	1ad3      	subs	r3, r2, r3
 800779e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077a2:	d904      	bls.n	80077ae <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2200      	movs	r2, #0
 80077a8:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 80077aa:	2303      	movs	r3, #3
 80077ac:	e070      	b.n	8007890 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077b4:	f003 0301 	and.w	r3, r3, #1
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d0eb      	beq.n	8007794 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 80077bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077be:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	2b03      	cmp	r3, #3
 80077c4:	bf28      	it	cs
 80077c6:	2303      	movcs	r3, #3
 80077c8:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 80077ca:	2300      	movs	r3, #0
 80077cc:	623b      	str	r3, [r7, #32]
 80077ce:	e00f      	b.n	80077f0 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80077d0:	69ba      	ldr	r2, [r7, #24]
 80077d2:	6a3b      	ldr	r3, [r7, #32]
 80077d4:	4413      	add	r3, r2
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	461a      	mov	r2, r3
 80077da:	6a3b      	ldr	r3, [r7, #32]
 80077dc:	3301      	adds	r3, #1
 80077de:	00db      	lsls	r3, r3, #3
 80077e0:	fa02 f303 	lsl.w	r3, r2, r3
 80077e4:	69fa      	ldr	r2, [r7, #28]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 80077ea:	6a3b      	ldr	r3, [r7, #32]
 80077ec:	3301      	adds	r3, #1
 80077ee:	623b      	str	r3, [r7, #32]
 80077f0:	6a3a      	ldr	r2, [r7, #32]
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d3eb      	bcc.n	80077d0 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	69fa      	ldr	r2, [r7, #28]
 80077fe:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8007800:	683a      	ldr	r2, [r7, #0]
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	1ad3      	subs	r3, r2, r3
 8007806:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8007808:	69ba      	ldr	r2, [r7, #24]
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	4413      	add	r3, r2
 800780e:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8007810:	e028      	b.n	8007864 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8007812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007814:	2b04      	cmp	r3, #4
 8007816:	bf28      	it	cs
 8007818:	2304      	movcs	r3, #4
 800781a:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 800781c:	2300      	movs	r3, #0
 800781e:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8007820:	2300      	movs	r3, #0
 8007822:	623b      	str	r3, [r7, #32]
 8007824:	e00e      	b.n	8007844 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8007826:	69ba      	ldr	r2, [r7, #24]
 8007828:	6a3b      	ldr	r3, [r7, #32]
 800782a:	4413      	add	r3, r2
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	461a      	mov	r2, r3
 8007830:	6a3b      	ldr	r3, [r7, #32]
 8007832:	00db      	lsls	r3, r3, #3
 8007834:	fa02 f303 	lsl.w	r3, r2, r3
 8007838:	69fa      	ldr	r2, [r7, #28]
 800783a:	4313      	orrs	r3, r2
 800783c:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 800783e:	6a3b      	ldr	r3, [r7, #32]
 8007840:	3301      	adds	r3, #1
 8007842:	623b      	str	r3, [r7, #32]
 8007844:	6a3a      	ldr	r2, [r7, #32]
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	429a      	cmp	r2, r3
 800784a:	d3ec      	bcc.n	8007826 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	69fa      	ldr	r2, [r7, #28]
 8007852:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8007854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 800785c:	69ba      	ldr	r2, [r7, #24]
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	4413      	add	r3, r2
 8007862:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8007864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007866:	2b00      	cmp	r3, #0
 8007868:	d1d3      	bne.n	8007812 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8007872:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	3301      	adds	r3, #1
 8007878:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 800787a:	b2db      	uxtb	r3, r3
 800787c:	9300      	str	r3, [sp, #0]
 800787e:	4613      	mov	r3, r2
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	68b9      	ldr	r1, [r7, #8]
 8007884:	f7fe fedc 	bl	8006640 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2200      	movs	r2, #0
 800788c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800788e:	2300      	movs	r3, #0
}
 8007890:	4618      	mov	r0, r3
 8007892:	3728      	adds	r7, #40	; 0x28
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	7c1b      	ldrb	r3, [r3, #16]
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d101      	bne.n	80078ae <HAL_DSI_SetLowPowerRXFilter+0x16>
 80078aa:	2302      	movs	r3, #2
 80078ac:	e01b      	b.n	80078e6 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2201      	movs	r2, #1
 80078b2:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 80078c4:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	065a      	lsls	r2, r3, #25
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	430a      	orrs	r2, r1
 80078da:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80078e4:	2300      	movs	r3, #0
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	370c      	adds	r7, #12
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr
	...

080078f4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d101      	bne.n	8007906 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	e06a      	b.n	80079dc <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800790c:	2b00      	cmp	r3, #0
 800790e:	d106      	bne.n	800791e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2223      	movs	r2, #35	; 0x23
 8007914:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f7fa fb91 	bl	8002040 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800791e:	4b31      	ldr	r3, [pc, #196]	; (80079e4 <HAL_ETH_Init+0xf0>)
 8007920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007922:	4a30      	ldr	r2, [pc, #192]	; (80079e4 <HAL_ETH_Init+0xf0>)
 8007924:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007928:	6453      	str	r3, [r2, #68]	; 0x44
 800792a:	4b2e      	ldr	r3, [pc, #184]	; (80079e4 <HAL_ETH_Init+0xf0>)
 800792c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800792e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007932:	60bb      	str	r3, [r7, #8]
 8007934:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8007936:	4b2c      	ldr	r3, [pc, #176]	; (80079e8 <HAL_ETH_Init+0xf4>)
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	4a2b      	ldr	r2, [pc, #172]	; (80079e8 <HAL_ETH_Init+0xf4>)
 800793c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007940:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8007942:	4b29      	ldr	r3, [pc, #164]	; (80079e8 <HAL_ETH_Init+0xf4>)
 8007944:	685a      	ldr	r2, [r3, #4]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	4927      	ldr	r1, [pc, #156]	; (80079e8 <HAL_ETH_Init+0xf4>)
 800794c:	4313      	orrs	r3, r2
 800794e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8007950:	4b25      	ldr	r3, [pc, #148]	; (80079e8 <HAL_ETH_Init+0xf4>)
 8007952:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	6812      	ldr	r2, [r2, #0]
 8007962:	f043 0301 	orr.w	r3, r3, #1
 8007966:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800796a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800796c:	f7fd f9c8 	bl	8004d00 <HAL_GetTick>
 8007970:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8007972:	e011      	b.n	8007998 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8007974:	f7fd f9c4 	bl	8004d00 <HAL_GetTick>
 8007978:	4602      	mov	r2, r0
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	1ad3      	subs	r3, r2, r3
 800797e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007982:	d909      	bls.n	8007998 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2204      	movs	r2, #4
 8007988:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	22e0      	movs	r2, #224	; 0xe0
 8007990:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8007994:	2301      	movs	r3, #1
 8007996:	e021      	b.n	80079dc <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f003 0301 	and.w	r3, r3, #1
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d1e4      	bne.n	8007974 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 f958 	bl	8007c60 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 f9ff 	bl	8007db4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 fa55 	bl	8007e66 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	461a      	mov	r2, r3
 80079c2:	2100      	movs	r1, #0
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 f9bd 	bl	8007d44 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2200      	movs	r2, #0
 80079ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2210      	movs	r2, #16
 80079d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80079da:	2300      	movs	r3, #0
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3710      	adds	r7, #16
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	40023800 	.word	0x40023800
 80079e8:	40013800 	.word	0x40013800

080079ec <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	4b51      	ldr	r3, [pc, #324]	; (8007b48 <ETH_SetMACConfig+0x15c>)
 8007a02:	4013      	ands	r3, r2
 8007a04:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	7c1b      	ldrb	r3, [r3, #16]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d102      	bne.n	8007a14 <ETH_SetMACConfig+0x28>
 8007a0e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007a12:	e000      	b.n	8007a16 <ETH_SetMACConfig+0x2a>
 8007a14:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	7c5b      	ldrb	r3, [r3, #17]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d102      	bne.n	8007a24 <ETH_SetMACConfig+0x38>
 8007a1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007a22:	e000      	b.n	8007a26 <ETH_SetMACConfig+0x3a>
 8007a24:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8007a26:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8007a2c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	7fdb      	ldrb	r3, [r3, #31]
 8007a32:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8007a34:	431a      	orrs	r2, r3
                        macconf->Speed |
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8007a3a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8007a3c:	683a      	ldr	r2, [r7, #0]
 8007a3e:	7f92      	ldrb	r2, [r2, #30]
 8007a40:	2a00      	cmp	r2, #0
 8007a42:	d102      	bne.n	8007a4a <ETH_SetMACConfig+0x5e>
 8007a44:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007a48:	e000      	b.n	8007a4c <ETH_SetMACConfig+0x60>
 8007a4a:	2200      	movs	r2, #0
                        macconf->Speed |
 8007a4c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	7f1b      	ldrb	r3, [r3, #28]
 8007a52:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8007a54:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8007a5a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	791b      	ldrb	r3, [r3, #4]
 8007a60:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8007a62:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8007a64:	683a      	ldr	r2, [r7, #0]
 8007a66:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007a6a:	2a00      	cmp	r2, #0
 8007a6c:	d102      	bne.n	8007a74 <ETH_SetMACConfig+0x88>
 8007a6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a72:	e000      	b.n	8007a76 <ETH_SetMACConfig+0x8a>
 8007a74:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8007a76:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	7bdb      	ldrb	r3, [r3, #15]
 8007a7c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8007a7e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8007a84:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a8c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	68fa      	ldr	r2, [r7, #12]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	68fa      	ldr	r2, [r7, #12]
 8007a9c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007aa6:	2001      	movs	r0, #1
 8007aa8:	f7fd f936 	bl	8004d18 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	68fa      	ldr	r2, [r7, #12]
 8007ab2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	699b      	ldr	r3, [r3, #24]
 8007aba:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8007abc:	68fa      	ldr	r2, [r7, #12]
 8007abe:	f64f 7341 	movw	r3, #65345	; 0xff41
 8007ac2:	4013      	ands	r3, r2
 8007ac4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007aca:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8007acc:	683a      	ldr	r2, [r7, #0]
 8007ace:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8007ad2:	2a00      	cmp	r2, #0
 8007ad4:	d101      	bne.n	8007ada <ETH_SetMACConfig+0xee>
 8007ad6:	2280      	movs	r2, #128	; 0x80
 8007ad8:	e000      	b.n	8007adc <ETH_SetMACConfig+0xf0>
 8007ada:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8007adc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8007ae2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8007ae4:	683a      	ldr	r2, [r7, #0]
 8007ae6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8007aea:	2a01      	cmp	r2, #1
 8007aec:	d101      	bne.n	8007af2 <ETH_SetMACConfig+0x106>
 8007aee:	2208      	movs	r2, #8
 8007af0:	e000      	b.n	8007af4 <ETH_SetMACConfig+0x108>
 8007af2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8007af4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8007af6:	683a      	ldr	r2, [r7, #0]
 8007af8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8007afc:	2a01      	cmp	r2, #1
 8007afe:	d101      	bne.n	8007b04 <ETH_SetMACConfig+0x118>
 8007b00:	2204      	movs	r2, #4
 8007b02:	e000      	b.n	8007b06 <ETH_SetMACConfig+0x11a>
 8007b04:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8007b06:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8007b08:	683a      	ldr	r2, [r7, #0]
 8007b0a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8007b0e:	2a01      	cmp	r2, #1
 8007b10:	d101      	bne.n	8007b16 <ETH_SetMACConfig+0x12a>
 8007b12:	2202      	movs	r2, #2
 8007b14:	e000      	b.n	8007b18 <ETH_SetMACConfig+0x12c>
 8007b16:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	68fa      	ldr	r2, [r7, #12]
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	68fa      	ldr	r2, [r7, #12]
 8007b26:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	699b      	ldr	r3, [r3, #24]
 8007b2e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007b30:	2001      	movs	r0, #1
 8007b32:	f7fd f8f1 	bl	8004d18 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	68fa      	ldr	r2, [r7, #12]
 8007b3c:	619a      	str	r2, [r3, #24]
}
 8007b3e:	bf00      	nop
 8007b40:	3710      	adds	r7, #16
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	ff20810f 	.word	0xff20810f

08007b4c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b5e:	699b      	ldr	r3, [r3, #24]
 8007b60:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	4b3d      	ldr	r3, [pc, #244]	; (8007c5c <ETH_SetDMAConfig+0x110>)
 8007b66:	4013      	ands	r3, r2
 8007b68:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	7b1b      	ldrb	r3, [r3, #12]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d102      	bne.n	8007b78 <ETH_SetDMAConfig+0x2c>
 8007b72:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8007b76:	e000      	b.n	8007b7a <ETH_SetDMAConfig+0x2e>
 8007b78:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	7b5b      	ldrb	r3, [r3, #13]
 8007b7e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8007b80:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8007b82:	683a      	ldr	r2, [r7, #0]
 8007b84:	7f52      	ldrb	r2, [r2, #29]
 8007b86:	2a00      	cmp	r2, #0
 8007b88:	d102      	bne.n	8007b90 <ETH_SetDMAConfig+0x44>
 8007b8a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007b8e:	e000      	b.n	8007b92 <ETH_SetDMAConfig+0x46>
 8007b90:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8007b92:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	7b9b      	ldrb	r3, [r3, #14]
 8007b98:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8007b9a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8007ba0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	7f1b      	ldrb	r3, [r3, #28]
 8007ba6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8007ba8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	7f9b      	ldrb	r3, [r3, #30]
 8007bae:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8007bb0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8007bb6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007bbe:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	68fa      	ldr	r2, [r7, #12]
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bde:	699b      	ldr	r3, [r3, #24]
 8007be0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007be2:	2001      	movs	r0, #1
 8007be4:	f7fd f898 	bl	8004d18 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	791b      	ldrb	r3, [r3, #4]
 8007bfa:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8007c00:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8007c06:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8007c0c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007c14:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8007c16:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c1c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8007c1e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8007c24:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	6812      	ldr	r2, [r2, #0]
 8007c2a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007c2e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007c32:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007c40:	2001      	movs	r0, #1
 8007c42:	f7fd f869 	bl	8004d18 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c4e:	461a      	mov	r2, r3
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	6013      	str	r3, [r2, #0]
}
 8007c54:	bf00      	nop
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}
 8007c5c:	f8de3f23 	.word	0xf8de3f23

08007c60 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b0a6      	sub	sp, #152	; 0x98
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8007c74:	2300      	movs	r3, #0
 8007c76:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8007c84:	2300      	movs	r3, #0
 8007c86:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8007c90:	2300      	movs	r3, #0
 8007c92:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8007c96:	2300      	movs	r3, #0
 8007c98:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8007caa:	2300      	movs	r3, #0
 8007cac:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8007cc2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007cc6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8007cc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8007cd4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007cd8:	4619      	mov	r1, r3
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f7ff fe86 	bl	80079ec <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8007d02:	2300      	movs	r3, #0
 8007d04:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8007d06:	2301      	movs	r3, #1
 8007d08:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8007d10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007d14:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8007d16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007d1a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8007d1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007d20:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8007d22:	2301      	movs	r3, #1
 8007d24:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8007d30:	f107 0308 	add.w	r3, r7, #8
 8007d34:	4619      	mov	r1, r3
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f7ff ff08 	bl	8007b4c <ETH_SetDMAConfig>
}
 8007d3c:	bf00      	nop
 8007d3e:	3798      	adds	r7, #152	; 0x98
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b087      	sub	sp, #28
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	60f8      	str	r0, [r7, #12]
 8007d4c:	60b9      	str	r1, [r7, #8]
 8007d4e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	3305      	adds	r3, #5
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	021b      	lsls	r3, r3, #8
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	3204      	adds	r2, #4
 8007d5c:	7812      	ldrb	r2, [r2, #0]
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8007d62:	68ba      	ldr	r2, [r7, #8]
 8007d64:	4b11      	ldr	r3, [pc, #68]	; (8007dac <ETH_MACAddressConfig+0x68>)
 8007d66:	4413      	add	r3, r2
 8007d68:	461a      	mov	r2, r3
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	3303      	adds	r3, #3
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	061a      	lsls	r2, r3, #24
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	3302      	adds	r3, #2
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	041b      	lsls	r3, r3, #16
 8007d7e:	431a      	orrs	r2, r3
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	3301      	adds	r3, #1
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	021b      	lsls	r3, r3, #8
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	7812      	ldrb	r2, [r2, #0]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8007d92:	68ba      	ldr	r2, [r7, #8]
 8007d94:	4b06      	ldr	r3, [pc, #24]	; (8007db0 <ETH_MACAddressConfig+0x6c>)
 8007d96:	4413      	add	r3, r2
 8007d98:	461a      	mov	r2, r3
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	6013      	str	r3, [r2, #0]
}
 8007d9e:	bf00      	nop
 8007da0:	371c      	adds	r7, #28
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	40028040 	.word	0x40028040
 8007db0:	40028044 	.word	0x40028044

08007db4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b085      	sub	sp, #20
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	60fb      	str	r3, [r7, #12]
 8007dc0:	e03e      	b.n	8007e40 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	68d9      	ldr	r1, [r3, #12]
 8007dc6:	68fa      	ldr	r2, [r7, #12]
 8007dc8:	4613      	mov	r3, r2
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	4413      	add	r3, r2
 8007dce:	00db      	lsls	r3, r3, #3
 8007dd0:	440b      	add	r3, r1
 8007dd2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	2200      	movs	r2, #0
 8007de4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	2200      	movs	r2, #0
 8007dea:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8007dec:	68b9      	ldr	r1, [r7, #8]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	68fa      	ldr	r2, [r7, #12]
 8007df2:	3206      	adds	r2, #6
 8007df4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	d80c      	bhi.n	8007e24 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	68d9      	ldr	r1, [r3, #12]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	1c5a      	adds	r2, r3, #1
 8007e12:	4613      	mov	r3, r2
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	4413      	add	r3, r2
 8007e18:	00db      	lsls	r3, r3, #3
 8007e1a:	440b      	add	r3, r1
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	60da      	str	r2, [r3, #12]
 8007e22:	e004      	b.n	8007e2e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	461a      	mov	r2, r3
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	60fb      	str	r3, [r7, #12]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2b03      	cmp	r3, #3
 8007e44:	d9bd      	bls.n	8007dc2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	68da      	ldr	r2, [r3, #12]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e58:	611a      	str	r2, [r3, #16]
}
 8007e5a:	bf00      	nop
 8007e5c:	3714      	adds	r7, #20
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr

08007e66 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8007e66:	b480      	push	{r7}
 8007e68:	b085      	sub	sp, #20
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007e6e:	2300      	movs	r3, #0
 8007e70:	60fb      	str	r3, [r7, #12]
 8007e72:	e046      	b.n	8007f02 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6919      	ldr	r1, [r3, #16]
 8007e78:	68fa      	ldr	r2, [r7, #12]
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	4413      	add	r3, r2
 8007e80:	00db      	lsls	r3, r3, #3
 8007e82:	440b      	add	r3, r1
 8007e84:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	2200      	movs	r2, #0
 8007e96:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007eb0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8007eb8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8007ec6:	68b9      	ldr	r1, [r7, #8]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	68fa      	ldr	r2, [r7, #12]
 8007ecc:	3212      	adds	r2, #18
 8007ece:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2b02      	cmp	r3, #2
 8007ed6:	d80c      	bhi.n	8007ef2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6919      	ldr	r1, [r3, #16]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	1c5a      	adds	r2, r3, #1
 8007ee0:	4613      	mov	r3, r2
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	4413      	add	r3, r2
 8007ee6:	00db      	lsls	r3, r3, #3
 8007ee8:	440b      	add	r3, r1
 8007eea:	461a      	mov	r2, r3
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	60da      	str	r2, [r3, #12]
 8007ef0:	e004      	b.n	8007efc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	691b      	ldr	r3, [r3, #16]
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	3301      	adds	r3, #1
 8007f00:	60fb      	str	r3, [r7, #12]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2b03      	cmp	r3, #3
 8007f06:	d9b5      	bls.n	8007e74 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	691a      	ldr	r2, [r3, #16]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f32:	60da      	str	r2, [r3, #12]
}
 8007f34:	bf00      	nop
 8007f36:	3714      	adds	r7, #20
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b089      	sub	sp, #36	; 0x24
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8007f52:	2300      	movs	r3, #0
 8007f54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8007f56:	2300      	movs	r3, #0
 8007f58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	61fb      	str	r3, [r7, #28]
 8007f5e:	e175      	b.n	800824c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007f60:	2201      	movs	r2, #1
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	fa02 f303 	lsl.w	r3, r2, r3
 8007f68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	697a      	ldr	r2, [r7, #20]
 8007f70:	4013      	ands	r3, r2
 8007f72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007f74:	693a      	ldr	r2, [r7, #16]
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	f040 8164 	bne.w	8008246 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	f003 0303 	and.w	r3, r3, #3
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d005      	beq.n	8007f96 <HAL_GPIO_Init+0x56>
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	f003 0303 	and.w	r3, r3, #3
 8007f92:	2b02      	cmp	r3, #2
 8007f94:	d130      	bne.n	8007ff8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	005b      	lsls	r3, r3, #1
 8007fa0:	2203      	movs	r2, #3
 8007fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8007fa6:	43db      	mvns	r3, r3
 8007fa8:	69ba      	ldr	r2, [r7, #24]
 8007faa:	4013      	ands	r3, r2
 8007fac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	68da      	ldr	r2, [r3, #12]
 8007fb2:	69fb      	ldr	r3, [r7, #28]
 8007fb4:	005b      	lsls	r3, r3, #1
 8007fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8007fba:	69ba      	ldr	r2, [r7, #24]
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	69ba      	ldr	r2, [r7, #24]
 8007fc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007fcc:	2201      	movs	r2, #1
 8007fce:	69fb      	ldr	r3, [r7, #28]
 8007fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8007fd4:	43db      	mvns	r3, r3
 8007fd6:	69ba      	ldr	r2, [r7, #24]
 8007fd8:	4013      	ands	r3, r2
 8007fda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	091b      	lsrs	r3, r3, #4
 8007fe2:	f003 0201 	and.w	r2, r3, #1
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8007fec:	69ba      	ldr	r2, [r7, #24]
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	69ba      	ldr	r2, [r7, #24]
 8007ff6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	f003 0303 	and.w	r3, r3, #3
 8008000:	2b03      	cmp	r3, #3
 8008002:	d017      	beq.n	8008034 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	005b      	lsls	r3, r3, #1
 800800e:	2203      	movs	r2, #3
 8008010:	fa02 f303 	lsl.w	r3, r2, r3
 8008014:	43db      	mvns	r3, r3
 8008016:	69ba      	ldr	r2, [r7, #24]
 8008018:	4013      	ands	r3, r2
 800801a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	689a      	ldr	r2, [r3, #8]
 8008020:	69fb      	ldr	r3, [r7, #28]
 8008022:	005b      	lsls	r3, r3, #1
 8008024:	fa02 f303 	lsl.w	r3, r2, r3
 8008028:	69ba      	ldr	r2, [r7, #24]
 800802a:	4313      	orrs	r3, r2
 800802c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	69ba      	ldr	r2, [r7, #24]
 8008032:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	f003 0303 	and.w	r3, r3, #3
 800803c:	2b02      	cmp	r3, #2
 800803e:	d123      	bne.n	8008088 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8008040:	69fb      	ldr	r3, [r7, #28]
 8008042:	08da      	lsrs	r2, r3, #3
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	3208      	adds	r2, #8
 8008048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800804c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	f003 0307 	and.w	r3, r3, #7
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	220f      	movs	r2, #15
 8008058:	fa02 f303 	lsl.w	r3, r2, r3
 800805c:	43db      	mvns	r3, r3
 800805e:	69ba      	ldr	r2, [r7, #24]
 8008060:	4013      	ands	r3, r2
 8008062:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	691a      	ldr	r2, [r3, #16]
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	f003 0307 	and.w	r3, r3, #7
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	fa02 f303 	lsl.w	r3, r2, r3
 8008074:	69ba      	ldr	r2, [r7, #24]
 8008076:	4313      	orrs	r3, r2
 8008078:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800807a:	69fb      	ldr	r3, [r7, #28]
 800807c:	08da      	lsrs	r2, r3, #3
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	3208      	adds	r2, #8
 8008082:	69b9      	ldr	r1, [r7, #24]
 8008084:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	005b      	lsls	r3, r3, #1
 8008092:	2203      	movs	r2, #3
 8008094:	fa02 f303 	lsl.w	r3, r2, r3
 8008098:	43db      	mvns	r3, r3
 800809a:	69ba      	ldr	r2, [r7, #24]
 800809c:	4013      	ands	r3, r2
 800809e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	f003 0203 	and.w	r2, r3, #3
 80080a8:	69fb      	ldr	r3, [r7, #28]
 80080aa:	005b      	lsls	r3, r3, #1
 80080ac:	fa02 f303 	lsl.w	r3, r2, r3
 80080b0:	69ba      	ldr	r2, [r7, #24]
 80080b2:	4313      	orrs	r3, r2
 80080b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	69ba      	ldr	r2, [r7, #24]
 80080ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	f000 80be 	beq.w	8008246 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80080ca:	4b66      	ldr	r3, [pc, #408]	; (8008264 <HAL_GPIO_Init+0x324>)
 80080cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ce:	4a65      	ldr	r2, [pc, #404]	; (8008264 <HAL_GPIO_Init+0x324>)
 80080d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80080d4:	6453      	str	r3, [r2, #68]	; 0x44
 80080d6:	4b63      	ldr	r3, [pc, #396]	; (8008264 <HAL_GPIO_Init+0x324>)
 80080d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080de:	60fb      	str	r3, [r7, #12]
 80080e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80080e2:	4a61      	ldr	r2, [pc, #388]	; (8008268 <HAL_GPIO_Init+0x328>)
 80080e4:	69fb      	ldr	r3, [r7, #28]
 80080e6:	089b      	lsrs	r3, r3, #2
 80080e8:	3302      	adds	r3, #2
 80080ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	f003 0303 	and.w	r3, r3, #3
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	220f      	movs	r2, #15
 80080fa:	fa02 f303 	lsl.w	r3, r2, r3
 80080fe:	43db      	mvns	r3, r3
 8008100:	69ba      	ldr	r2, [r7, #24]
 8008102:	4013      	ands	r3, r2
 8008104:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	4a58      	ldr	r2, [pc, #352]	; (800826c <HAL_GPIO_Init+0x32c>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d037      	beq.n	800817e <HAL_GPIO_Init+0x23e>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	4a57      	ldr	r2, [pc, #348]	; (8008270 <HAL_GPIO_Init+0x330>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d031      	beq.n	800817a <HAL_GPIO_Init+0x23a>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	4a56      	ldr	r2, [pc, #344]	; (8008274 <HAL_GPIO_Init+0x334>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d02b      	beq.n	8008176 <HAL_GPIO_Init+0x236>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	4a55      	ldr	r2, [pc, #340]	; (8008278 <HAL_GPIO_Init+0x338>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d025      	beq.n	8008172 <HAL_GPIO_Init+0x232>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4a54      	ldr	r2, [pc, #336]	; (800827c <HAL_GPIO_Init+0x33c>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d01f      	beq.n	800816e <HAL_GPIO_Init+0x22e>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	4a53      	ldr	r2, [pc, #332]	; (8008280 <HAL_GPIO_Init+0x340>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d019      	beq.n	800816a <HAL_GPIO_Init+0x22a>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	4a52      	ldr	r2, [pc, #328]	; (8008284 <HAL_GPIO_Init+0x344>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d013      	beq.n	8008166 <HAL_GPIO_Init+0x226>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	4a51      	ldr	r2, [pc, #324]	; (8008288 <HAL_GPIO_Init+0x348>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d00d      	beq.n	8008162 <HAL_GPIO_Init+0x222>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	4a50      	ldr	r2, [pc, #320]	; (800828c <HAL_GPIO_Init+0x34c>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d007      	beq.n	800815e <HAL_GPIO_Init+0x21e>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	4a4f      	ldr	r2, [pc, #316]	; (8008290 <HAL_GPIO_Init+0x350>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d101      	bne.n	800815a <HAL_GPIO_Init+0x21a>
 8008156:	2309      	movs	r3, #9
 8008158:	e012      	b.n	8008180 <HAL_GPIO_Init+0x240>
 800815a:	230a      	movs	r3, #10
 800815c:	e010      	b.n	8008180 <HAL_GPIO_Init+0x240>
 800815e:	2308      	movs	r3, #8
 8008160:	e00e      	b.n	8008180 <HAL_GPIO_Init+0x240>
 8008162:	2307      	movs	r3, #7
 8008164:	e00c      	b.n	8008180 <HAL_GPIO_Init+0x240>
 8008166:	2306      	movs	r3, #6
 8008168:	e00a      	b.n	8008180 <HAL_GPIO_Init+0x240>
 800816a:	2305      	movs	r3, #5
 800816c:	e008      	b.n	8008180 <HAL_GPIO_Init+0x240>
 800816e:	2304      	movs	r3, #4
 8008170:	e006      	b.n	8008180 <HAL_GPIO_Init+0x240>
 8008172:	2303      	movs	r3, #3
 8008174:	e004      	b.n	8008180 <HAL_GPIO_Init+0x240>
 8008176:	2302      	movs	r3, #2
 8008178:	e002      	b.n	8008180 <HAL_GPIO_Init+0x240>
 800817a:	2301      	movs	r3, #1
 800817c:	e000      	b.n	8008180 <HAL_GPIO_Init+0x240>
 800817e:	2300      	movs	r3, #0
 8008180:	69fa      	ldr	r2, [r7, #28]
 8008182:	f002 0203 	and.w	r2, r2, #3
 8008186:	0092      	lsls	r2, r2, #2
 8008188:	4093      	lsls	r3, r2
 800818a:	69ba      	ldr	r2, [r7, #24]
 800818c:	4313      	orrs	r3, r2
 800818e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8008190:	4935      	ldr	r1, [pc, #212]	; (8008268 <HAL_GPIO_Init+0x328>)
 8008192:	69fb      	ldr	r3, [r7, #28]
 8008194:	089b      	lsrs	r3, r3, #2
 8008196:	3302      	adds	r3, #2
 8008198:	69ba      	ldr	r2, [r7, #24]
 800819a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800819e:	4b3d      	ldr	r3, [pc, #244]	; (8008294 <HAL_GPIO_Init+0x354>)
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	43db      	mvns	r3, r3
 80081a8:	69ba      	ldr	r2, [r7, #24]
 80081aa:	4013      	ands	r3, r2
 80081ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d003      	beq.n	80081c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80081ba:	69ba      	ldr	r2, [r7, #24]
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	4313      	orrs	r3, r2
 80081c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80081c2:	4a34      	ldr	r2, [pc, #208]	; (8008294 <HAL_GPIO_Init+0x354>)
 80081c4:	69bb      	ldr	r3, [r7, #24]
 80081c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80081c8:	4b32      	ldr	r3, [pc, #200]	; (8008294 <HAL_GPIO_Init+0x354>)
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	43db      	mvns	r3, r3
 80081d2:	69ba      	ldr	r2, [r7, #24]
 80081d4:	4013      	ands	r3, r2
 80081d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d003      	beq.n	80081ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80081e4:	69ba      	ldr	r2, [r7, #24]
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	4313      	orrs	r3, r2
 80081ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80081ec:	4a29      	ldr	r2, [pc, #164]	; (8008294 <HAL_GPIO_Init+0x354>)
 80081ee:	69bb      	ldr	r3, [r7, #24]
 80081f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80081f2:	4b28      	ldr	r3, [pc, #160]	; (8008294 <HAL_GPIO_Init+0x354>)
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	43db      	mvns	r3, r3
 80081fc:	69ba      	ldr	r2, [r7, #24]
 80081fe:	4013      	ands	r3, r2
 8008200:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800820a:	2b00      	cmp	r3, #0
 800820c:	d003      	beq.n	8008216 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800820e:	69ba      	ldr	r2, [r7, #24]
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	4313      	orrs	r3, r2
 8008214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008216:	4a1f      	ldr	r2, [pc, #124]	; (8008294 <HAL_GPIO_Init+0x354>)
 8008218:	69bb      	ldr	r3, [r7, #24]
 800821a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800821c:	4b1d      	ldr	r3, [pc, #116]	; (8008294 <HAL_GPIO_Init+0x354>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	43db      	mvns	r3, r3
 8008226:	69ba      	ldr	r2, [r7, #24]
 8008228:	4013      	ands	r3, r2
 800822a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008234:	2b00      	cmp	r3, #0
 8008236:	d003      	beq.n	8008240 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008238:	69ba      	ldr	r2, [r7, #24]
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	4313      	orrs	r3, r2
 800823e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008240:	4a14      	ldr	r2, [pc, #80]	; (8008294 <HAL_GPIO_Init+0x354>)
 8008242:	69bb      	ldr	r3, [r7, #24]
 8008244:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8008246:	69fb      	ldr	r3, [r7, #28]
 8008248:	3301      	adds	r3, #1
 800824a:	61fb      	str	r3, [r7, #28]
 800824c:	69fb      	ldr	r3, [r7, #28]
 800824e:	2b0f      	cmp	r3, #15
 8008250:	f67f ae86 	bls.w	8007f60 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8008254:	bf00      	nop
 8008256:	bf00      	nop
 8008258:	3724      	adds	r7, #36	; 0x24
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr
 8008262:	bf00      	nop
 8008264:	40023800 	.word	0x40023800
 8008268:	40013800 	.word	0x40013800
 800826c:	40020000 	.word	0x40020000
 8008270:	40020400 	.word	0x40020400
 8008274:	40020800 	.word	0x40020800
 8008278:	40020c00 	.word	0x40020c00
 800827c:	40021000 	.word	0x40021000
 8008280:	40021400 	.word	0x40021400
 8008284:	40021800 	.word	0x40021800
 8008288:	40021c00 	.word	0x40021c00
 800828c:	40022000 	.word	0x40022000
 8008290:	40022400 	.word	0x40022400
 8008294:	40013c00 	.word	0x40013c00

08008298 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008298:	b480      	push	{r7}
 800829a:	b087      	sub	sp, #28
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80082a2:	2300      	movs	r3, #0
 80082a4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80082a6:	2300      	movs	r3, #0
 80082a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80082aa:	2300      	movs	r3, #0
 80082ac:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80082ae:	2300      	movs	r3, #0
 80082b0:	617b      	str	r3, [r7, #20]
 80082b2:	e0d9      	b.n	8008468 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80082b4:	2201      	movs	r2, #1
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	fa02 f303 	lsl.w	r3, r2, r3
 80082bc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80082be:	683a      	ldr	r2, [r7, #0]
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	4013      	ands	r3, r2
 80082c4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80082c6:	68fa      	ldr	r2, [r7, #12]
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	f040 80c9 	bne.w	8008462 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80082d0:	4a6b      	ldr	r2, [pc, #428]	; (8008480 <HAL_GPIO_DeInit+0x1e8>)
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	089b      	lsrs	r3, r3, #2
 80082d6:	3302      	adds	r3, #2
 80082d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082dc:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	f003 0303 	and.w	r3, r3, #3
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	220f      	movs	r2, #15
 80082e8:	fa02 f303 	lsl.w	r3, r2, r3
 80082ec:	68ba      	ldr	r2, [r7, #8]
 80082ee:	4013      	ands	r3, r2
 80082f0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	4a63      	ldr	r2, [pc, #396]	; (8008484 <HAL_GPIO_DeInit+0x1ec>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d037      	beq.n	800836a <HAL_GPIO_DeInit+0xd2>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4a62      	ldr	r2, [pc, #392]	; (8008488 <HAL_GPIO_DeInit+0x1f0>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d031      	beq.n	8008366 <HAL_GPIO_DeInit+0xce>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	4a61      	ldr	r2, [pc, #388]	; (800848c <HAL_GPIO_DeInit+0x1f4>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d02b      	beq.n	8008362 <HAL_GPIO_DeInit+0xca>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4a60      	ldr	r2, [pc, #384]	; (8008490 <HAL_GPIO_DeInit+0x1f8>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d025      	beq.n	800835e <HAL_GPIO_DeInit+0xc6>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4a5f      	ldr	r2, [pc, #380]	; (8008494 <HAL_GPIO_DeInit+0x1fc>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d01f      	beq.n	800835a <HAL_GPIO_DeInit+0xc2>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4a5e      	ldr	r2, [pc, #376]	; (8008498 <HAL_GPIO_DeInit+0x200>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d019      	beq.n	8008356 <HAL_GPIO_DeInit+0xbe>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4a5d      	ldr	r2, [pc, #372]	; (800849c <HAL_GPIO_DeInit+0x204>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d013      	beq.n	8008352 <HAL_GPIO_DeInit+0xba>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4a5c      	ldr	r2, [pc, #368]	; (80084a0 <HAL_GPIO_DeInit+0x208>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d00d      	beq.n	800834e <HAL_GPIO_DeInit+0xb6>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	4a5b      	ldr	r2, [pc, #364]	; (80084a4 <HAL_GPIO_DeInit+0x20c>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d007      	beq.n	800834a <HAL_GPIO_DeInit+0xb2>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4a5a      	ldr	r2, [pc, #360]	; (80084a8 <HAL_GPIO_DeInit+0x210>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d101      	bne.n	8008346 <HAL_GPIO_DeInit+0xae>
 8008342:	2309      	movs	r3, #9
 8008344:	e012      	b.n	800836c <HAL_GPIO_DeInit+0xd4>
 8008346:	230a      	movs	r3, #10
 8008348:	e010      	b.n	800836c <HAL_GPIO_DeInit+0xd4>
 800834a:	2308      	movs	r3, #8
 800834c:	e00e      	b.n	800836c <HAL_GPIO_DeInit+0xd4>
 800834e:	2307      	movs	r3, #7
 8008350:	e00c      	b.n	800836c <HAL_GPIO_DeInit+0xd4>
 8008352:	2306      	movs	r3, #6
 8008354:	e00a      	b.n	800836c <HAL_GPIO_DeInit+0xd4>
 8008356:	2305      	movs	r3, #5
 8008358:	e008      	b.n	800836c <HAL_GPIO_DeInit+0xd4>
 800835a:	2304      	movs	r3, #4
 800835c:	e006      	b.n	800836c <HAL_GPIO_DeInit+0xd4>
 800835e:	2303      	movs	r3, #3
 8008360:	e004      	b.n	800836c <HAL_GPIO_DeInit+0xd4>
 8008362:	2302      	movs	r3, #2
 8008364:	e002      	b.n	800836c <HAL_GPIO_DeInit+0xd4>
 8008366:	2301      	movs	r3, #1
 8008368:	e000      	b.n	800836c <HAL_GPIO_DeInit+0xd4>
 800836a:	2300      	movs	r3, #0
 800836c:	697a      	ldr	r2, [r7, #20]
 800836e:	f002 0203 	and.w	r2, r2, #3
 8008372:	0092      	lsls	r2, r2, #2
 8008374:	4093      	lsls	r3, r2
 8008376:	68ba      	ldr	r2, [r7, #8]
 8008378:	429a      	cmp	r2, r3
 800837a:	d132      	bne.n	80083e2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800837c:	4b4b      	ldr	r3, [pc, #300]	; (80084ac <HAL_GPIO_DeInit+0x214>)
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	43db      	mvns	r3, r3
 8008384:	4949      	ldr	r1, [pc, #292]	; (80084ac <HAL_GPIO_DeInit+0x214>)
 8008386:	4013      	ands	r3, r2
 8008388:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800838a:	4b48      	ldr	r3, [pc, #288]	; (80084ac <HAL_GPIO_DeInit+0x214>)
 800838c:	685a      	ldr	r2, [r3, #4]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	43db      	mvns	r3, r3
 8008392:	4946      	ldr	r1, [pc, #280]	; (80084ac <HAL_GPIO_DeInit+0x214>)
 8008394:	4013      	ands	r3, r2
 8008396:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8008398:	4b44      	ldr	r3, [pc, #272]	; (80084ac <HAL_GPIO_DeInit+0x214>)
 800839a:	68da      	ldr	r2, [r3, #12]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	43db      	mvns	r3, r3
 80083a0:	4942      	ldr	r1, [pc, #264]	; (80084ac <HAL_GPIO_DeInit+0x214>)
 80083a2:	4013      	ands	r3, r2
 80083a4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80083a6:	4b41      	ldr	r3, [pc, #260]	; (80084ac <HAL_GPIO_DeInit+0x214>)
 80083a8:	689a      	ldr	r2, [r3, #8]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	43db      	mvns	r3, r3
 80083ae:	493f      	ldr	r1, [pc, #252]	; (80084ac <HAL_GPIO_DeInit+0x214>)
 80083b0:	4013      	ands	r3, r2
 80083b2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	f003 0303 	and.w	r3, r3, #3
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	220f      	movs	r2, #15
 80083be:	fa02 f303 	lsl.w	r3, r2, r3
 80083c2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80083c4:	4a2e      	ldr	r2, [pc, #184]	; (8008480 <HAL_GPIO_DeInit+0x1e8>)
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	089b      	lsrs	r3, r3, #2
 80083ca:	3302      	adds	r3, #2
 80083cc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	43da      	mvns	r2, r3
 80083d4:	482a      	ldr	r0, [pc, #168]	; (8008480 <HAL_GPIO_DeInit+0x1e8>)
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	089b      	lsrs	r3, r3, #2
 80083da:	400a      	ands	r2, r1
 80083dc:	3302      	adds	r3, #2
 80083de:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	005b      	lsls	r3, r3, #1
 80083ea:	2103      	movs	r1, #3
 80083ec:	fa01 f303 	lsl.w	r3, r1, r3
 80083f0:	43db      	mvns	r3, r3
 80083f2:	401a      	ands	r2, r3
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	08da      	lsrs	r2, r3, #3
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	3208      	adds	r2, #8
 8008400:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	f003 0307 	and.w	r3, r3, #7
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	220f      	movs	r2, #15
 800840e:	fa02 f303 	lsl.w	r3, r2, r3
 8008412:	43db      	mvns	r3, r3
 8008414:	697a      	ldr	r2, [r7, #20]
 8008416:	08d2      	lsrs	r2, r2, #3
 8008418:	4019      	ands	r1, r3
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	3208      	adds	r2, #8
 800841e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	68da      	ldr	r2, [r3, #12]
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	005b      	lsls	r3, r3, #1
 800842a:	2103      	movs	r1, #3
 800842c:	fa01 f303 	lsl.w	r3, r1, r3
 8008430:	43db      	mvns	r3, r3
 8008432:	401a      	ands	r2, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	685a      	ldr	r2, [r3, #4]
 800843c:	2101      	movs	r1, #1
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	fa01 f303 	lsl.w	r3, r1, r3
 8008444:	43db      	mvns	r3, r3
 8008446:	401a      	ands	r2, r3
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	689a      	ldr	r2, [r3, #8]
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	005b      	lsls	r3, r3, #1
 8008454:	2103      	movs	r1, #3
 8008456:	fa01 f303 	lsl.w	r3, r1, r3
 800845a:	43db      	mvns	r3, r3
 800845c:	401a      	ands	r2, r3
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	3301      	adds	r3, #1
 8008466:	617b      	str	r3, [r7, #20]
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	2b0f      	cmp	r3, #15
 800846c:	f67f af22 	bls.w	80082b4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8008470:	bf00      	nop
 8008472:	bf00      	nop
 8008474:	371c      	adds	r7, #28
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr
 800847e:	bf00      	nop
 8008480:	40013800 	.word	0x40013800
 8008484:	40020000 	.word	0x40020000
 8008488:	40020400 	.word	0x40020400
 800848c:	40020800 	.word	0x40020800
 8008490:	40020c00 	.word	0x40020c00
 8008494:	40021000 	.word	0x40021000
 8008498:	40021400 	.word	0x40021400
 800849c:	40021800 	.word	0x40021800
 80084a0:	40021c00 	.word	0x40021c00
 80084a4:	40022000 	.word	0x40022000
 80084a8:	40022400 	.word	0x40022400
 80084ac:	40013c00 	.word	0x40013c00

080084b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b083      	sub	sp, #12
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	460b      	mov	r3, r1
 80084ba:	807b      	strh	r3, [r7, #2]
 80084bc:	4613      	mov	r3, r2
 80084be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80084c0:	787b      	ldrb	r3, [r7, #1]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d003      	beq.n	80084ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80084c6:	887a      	ldrh	r2, [r7, #2]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80084cc:	e003      	b.n	80084d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80084ce:	887b      	ldrh	r3, [r7, #2]
 80084d0:	041a      	lsls	r2, r3, #16
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	619a      	str	r2, [r3, #24]
}
 80084d6:	bf00      	nop
 80084d8:	370c      	adds	r7, #12
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr
	...

080084e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b082      	sub	sp, #8
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d101      	bne.n	80084f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	e07f      	b.n	80085f6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d106      	bne.n	8008510 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f7f9 fe9a 	bl	8002244 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2224      	movs	r2, #36	; 0x24
 8008514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f022 0201 	bic.w	r2, r2, #1
 8008526:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	685a      	ldr	r2, [r3, #4]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008534:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	689a      	ldr	r2, [r3, #8]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008544:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	68db      	ldr	r3, [r3, #12]
 800854a:	2b01      	cmp	r3, #1
 800854c:	d107      	bne.n	800855e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	689a      	ldr	r2, [r3, #8]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800855a:	609a      	str	r2, [r3, #8]
 800855c:	e006      	b.n	800856c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	689a      	ldr	r2, [r3, #8]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800856a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	2b02      	cmp	r3, #2
 8008572:	d104      	bne.n	800857e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800857c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	6859      	ldr	r1, [r3, #4]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	4b1d      	ldr	r3, [pc, #116]	; (8008600 <HAL_I2C_Init+0x11c>)
 800858a:	430b      	orrs	r3, r1
 800858c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	68da      	ldr	r2, [r3, #12]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800859c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	691a      	ldr	r2, [r3, #16]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	695b      	ldr	r3, [r3, #20]
 80085a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	699b      	ldr	r3, [r3, #24]
 80085ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	430a      	orrs	r2, r1
 80085b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	69d9      	ldr	r1, [r3, #28]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6a1a      	ldr	r2, [r3, #32]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	430a      	orrs	r2, r1
 80085c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f042 0201 	orr.w	r2, r2, #1
 80085d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2220      	movs	r2, #32
 80085e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2200      	movs	r2, #0
 80085ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2200      	movs	r2, #0
 80085f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3708      	adds	r7, #8
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
 80085fe:	bf00      	nop
 8008600:	02008000 	.word	0x02008000

08008604 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d101      	bne.n	8008616 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	e021      	b.n	800865a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2224      	movs	r2, #36	; 0x24
 800861a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f022 0201 	bic.w	r2, r2, #1
 800862c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f7f9 fed2 	bl	80023d8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2200      	movs	r2, #0
 8008646:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2200      	movs	r2, #0
 8008654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008658:	2300      	movs	r3, #0
}
 800865a:	4618      	mov	r0, r3
 800865c:	3708      	adds	r7, #8
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
	...

08008664 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b088      	sub	sp, #32
 8008668:	af02      	add	r7, sp, #8
 800866a:	60f8      	str	r0, [r7, #12]
 800866c:	4608      	mov	r0, r1
 800866e:	4611      	mov	r1, r2
 8008670:	461a      	mov	r2, r3
 8008672:	4603      	mov	r3, r0
 8008674:	817b      	strh	r3, [r7, #10]
 8008676:	460b      	mov	r3, r1
 8008678:	813b      	strh	r3, [r7, #8]
 800867a:	4613      	mov	r3, r2
 800867c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008684:	b2db      	uxtb	r3, r3
 8008686:	2b20      	cmp	r3, #32
 8008688:	f040 80f9 	bne.w	800887e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800868c:	6a3b      	ldr	r3, [r7, #32]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d002      	beq.n	8008698 <HAL_I2C_Mem_Write+0x34>
 8008692:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008694:	2b00      	cmp	r3, #0
 8008696:	d105      	bne.n	80086a4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800869e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80086a0:	2301      	movs	r3, #1
 80086a2:	e0ed      	b.n	8008880 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d101      	bne.n	80086b2 <HAL_I2C_Mem_Write+0x4e>
 80086ae:	2302      	movs	r3, #2
 80086b0:	e0e6      	b.n	8008880 <HAL_I2C_Mem_Write+0x21c>
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2201      	movs	r2, #1
 80086b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80086ba:	f7fc fb21 	bl	8004d00 <HAL_GetTick>
 80086be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	9300      	str	r3, [sp, #0]
 80086c4:	2319      	movs	r3, #25
 80086c6:	2201      	movs	r2, #1
 80086c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80086cc:	68f8      	ldr	r0, [r7, #12]
 80086ce:	f000 fad1 	bl	8008c74 <I2C_WaitOnFlagUntilTimeout>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d001      	beq.n	80086dc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80086d8:	2301      	movs	r3, #1
 80086da:	e0d1      	b.n	8008880 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2221      	movs	r2, #33	; 0x21
 80086e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2240      	movs	r2, #64	; 0x40
 80086e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2200      	movs	r2, #0
 80086f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	6a3a      	ldr	r2, [r7, #32]
 80086f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80086fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2200      	movs	r2, #0
 8008702:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008704:	88f8      	ldrh	r0, [r7, #6]
 8008706:	893a      	ldrh	r2, [r7, #8]
 8008708:	8979      	ldrh	r1, [r7, #10]
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	9301      	str	r3, [sp, #4]
 800870e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008710:	9300      	str	r3, [sp, #0]
 8008712:	4603      	mov	r3, r0
 8008714:	68f8      	ldr	r0, [r7, #12]
 8008716:	f000 f9e1 	bl	8008adc <I2C_RequestMemoryWrite>
 800871a:	4603      	mov	r3, r0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d005      	beq.n	800872c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2200      	movs	r2, #0
 8008724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008728:	2301      	movs	r3, #1
 800872a:	e0a9      	b.n	8008880 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008730:	b29b      	uxth	r3, r3
 8008732:	2bff      	cmp	r3, #255	; 0xff
 8008734:	d90e      	bls.n	8008754 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	22ff      	movs	r2, #255	; 0xff
 800873a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008740:	b2da      	uxtb	r2, r3
 8008742:	8979      	ldrh	r1, [r7, #10]
 8008744:	2300      	movs	r3, #0
 8008746:	9300      	str	r3, [sp, #0]
 8008748:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800874c:	68f8      	ldr	r0, [r7, #12]
 800874e:	f000 fc2d 	bl	8008fac <I2C_TransferConfig>
 8008752:	e00f      	b.n	8008774 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008758:	b29a      	uxth	r2, r3
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008762:	b2da      	uxtb	r2, r3
 8008764:	8979      	ldrh	r1, [r7, #10]
 8008766:	2300      	movs	r3, #0
 8008768:	9300      	str	r3, [sp, #0]
 800876a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	f000 fc1c 	bl	8008fac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008774:	697a      	ldr	r2, [r7, #20]
 8008776:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008778:	68f8      	ldr	r0, [r7, #12]
 800877a:	f000 fabb 	bl	8008cf4 <I2C_WaitOnTXISFlagUntilTimeout>
 800877e:	4603      	mov	r3, r0
 8008780:	2b00      	cmp	r3, #0
 8008782:	d001      	beq.n	8008788 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008784:	2301      	movs	r3, #1
 8008786:	e07b      	b.n	8008880 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878c:	781a      	ldrb	r2, [r3, #0]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008798:	1c5a      	adds	r2, r3, #1
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	3b01      	subs	r3, #1
 80087a6:	b29a      	uxth	r2, r3
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087b0:	3b01      	subs	r3, #1
 80087b2:	b29a      	uxth	r2, r3
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087bc:	b29b      	uxth	r3, r3
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d034      	beq.n	800882c <HAL_I2C_Mem_Write+0x1c8>
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d130      	bne.n	800882c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	9300      	str	r3, [sp, #0]
 80087ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d0:	2200      	movs	r2, #0
 80087d2:	2180      	movs	r1, #128	; 0x80
 80087d4:	68f8      	ldr	r0, [r7, #12]
 80087d6:	f000 fa4d 	bl	8008c74 <I2C_WaitOnFlagUntilTimeout>
 80087da:	4603      	mov	r3, r0
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d001      	beq.n	80087e4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	e04d      	b.n	8008880 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	2bff      	cmp	r3, #255	; 0xff
 80087ec:	d90e      	bls.n	800880c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	22ff      	movs	r2, #255	; 0xff
 80087f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087f8:	b2da      	uxtb	r2, r3
 80087fa:	8979      	ldrh	r1, [r7, #10]
 80087fc:	2300      	movs	r3, #0
 80087fe:	9300      	str	r3, [sp, #0]
 8008800:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008804:	68f8      	ldr	r0, [r7, #12]
 8008806:	f000 fbd1 	bl	8008fac <I2C_TransferConfig>
 800880a:	e00f      	b.n	800882c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008810:	b29a      	uxth	r2, r3
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800881a:	b2da      	uxtb	r2, r3
 800881c:	8979      	ldrh	r1, [r7, #10]
 800881e:	2300      	movs	r3, #0
 8008820:	9300      	str	r3, [sp, #0]
 8008822:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008826:	68f8      	ldr	r0, [r7, #12]
 8008828:	f000 fbc0 	bl	8008fac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008830:	b29b      	uxth	r3, r3
 8008832:	2b00      	cmp	r3, #0
 8008834:	d19e      	bne.n	8008774 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008836:	697a      	ldr	r2, [r7, #20]
 8008838:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800883a:	68f8      	ldr	r0, [r7, #12]
 800883c:	f000 fa9a 	bl	8008d74 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008840:	4603      	mov	r3, r0
 8008842:	2b00      	cmp	r3, #0
 8008844:	d001      	beq.n	800884a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008846:	2301      	movs	r3, #1
 8008848:	e01a      	b.n	8008880 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	2220      	movs	r2, #32
 8008850:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	6859      	ldr	r1, [r3, #4]
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	4b0a      	ldr	r3, [pc, #40]	; (8008888 <HAL_I2C_Mem_Write+0x224>)
 800885e:	400b      	ands	r3, r1
 8008860:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2220      	movs	r2, #32
 8008866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2200      	movs	r2, #0
 800886e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2200      	movs	r2, #0
 8008876:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800887a:	2300      	movs	r3, #0
 800887c:	e000      	b.n	8008880 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800887e:	2302      	movs	r3, #2
  }
}
 8008880:	4618      	mov	r0, r3
 8008882:	3718      	adds	r7, #24
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}
 8008888:	fe00e800 	.word	0xfe00e800

0800888c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b088      	sub	sp, #32
 8008890:	af02      	add	r7, sp, #8
 8008892:	60f8      	str	r0, [r7, #12]
 8008894:	4608      	mov	r0, r1
 8008896:	4611      	mov	r1, r2
 8008898:	461a      	mov	r2, r3
 800889a:	4603      	mov	r3, r0
 800889c:	817b      	strh	r3, [r7, #10]
 800889e:	460b      	mov	r3, r1
 80088a0:	813b      	strh	r3, [r7, #8]
 80088a2:	4613      	mov	r3, r2
 80088a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	2b20      	cmp	r3, #32
 80088b0:	f040 80fd 	bne.w	8008aae <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80088b4:	6a3b      	ldr	r3, [r7, #32]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d002      	beq.n	80088c0 <HAL_I2C_Mem_Read+0x34>
 80088ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d105      	bne.n	80088cc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80088c6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	e0f1      	b.n	8008ab0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d101      	bne.n	80088da <HAL_I2C_Mem_Read+0x4e>
 80088d6:	2302      	movs	r3, #2
 80088d8:	e0ea      	b.n	8008ab0 <HAL_I2C_Mem_Read+0x224>
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2201      	movs	r2, #1
 80088de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80088e2:	f7fc fa0d 	bl	8004d00 <HAL_GetTick>
 80088e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	9300      	str	r3, [sp, #0]
 80088ec:	2319      	movs	r3, #25
 80088ee:	2201      	movs	r2, #1
 80088f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80088f4:	68f8      	ldr	r0, [r7, #12]
 80088f6:	f000 f9bd 	bl	8008c74 <I2C_WaitOnFlagUntilTimeout>
 80088fa:	4603      	mov	r3, r0
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d001      	beq.n	8008904 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008900:	2301      	movs	r3, #1
 8008902:	e0d5      	b.n	8008ab0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2222      	movs	r2, #34	; 0x22
 8008908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2240      	movs	r2, #64	; 0x40
 8008910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2200      	movs	r2, #0
 8008918:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	6a3a      	ldr	r2, [r7, #32]
 800891e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008924:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2200      	movs	r2, #0
 800892a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800892c:	88f8      	ldrh	r0, [r7, #6]
 800892e:	893a      	ldrh	r2, [r7, #8]
 8008930:	8979      	ldrh	r1, [r7, #10]
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	9301      	str	r3, [sp, #4]
 8008936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008938:	9300      	str	r3, [sp, #0]
 800893a:	4603      	mov	r3, r0
 800893c:	68f8      	ldr	r0, [r7, #12]
 800893e:	f000 f921 	bl	8008b84 <I2C_RequestMemoryRead>
 8008942:	4603      	mov	r3, r0
 8008944:	2b00      	cmp	r3, #0
 8008946:	d005      	beq.n	8008954 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2200      	movs	r2, #0
 800894c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008950:	2301      	movs	r3, #1
 8008952:	e0ad      	b.n	8008ab0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008958:	b29b      	uxth	r3, r3
 800895a:	2bff      	cmp	r3, #255	; 0xff
 800895c:	d90e      	bls.n	800897c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	22ff      	movs	r2, #255	; 0xff
 8008962:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008968:	b2da      	uxtb	r2, r3
 800896a:	8979      	ldrh	r1, [r7, #10]
 800896c:	4b52      	ldr	r3, [pc, #328]	; (8008ab8 <HAL_I2C_Mem_Read+0x22c>)
 800896e:	9300      	str	r3, [sp, #0]
 8008970:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008974:	68f8      	ldr	r0, [r7, #12]
 8008976:	f000 fb19 	bl	8008fac <I2C_TransferConfig>
 800897a:	e00f      	b.n	800899c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008980:	b29a      	uxth	r2, r3
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800898a:	b2da      	uxtb	r2, r3
 800898c:	8979      	ldrh	r1, [r7, #10]
 800898e:	4b4a      	ldr	r3, [pc, #296]	; (8008ab8 <HAL_I2C_Mem_Read+0x22c>)
 8008990:	9300      	str	r3, [sp, #0]
 8008992:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008996:	68f8      	ldr	r0, [r7, #12]
 8008998:	f000 fb08 	bl	8008fac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	9300      	str	r3, [sp, #0]
 80089a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a2:	2200      	movs	r2, #0
 80089a4:	2104      	movs	r1, #4
 80089a6:	68f8      	ldr	r0, [r7, #12]
 80089a8:	f000 f964 	bl	8008c74 <I2C_WaitOnFlagUntilTimeout>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d001      	beq.n	80089b6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	e07c      	b.n	8008ab0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c0:	b2d2      	uxtb	r2, r2
 80089c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c8:	1c5a      	adds	r2, r3, #1
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089d2:	3b01      	subs	r3, #1
 80089d4:	b29a      	uxth	r2, r3
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089de:	b29b      	uxth	r3, r3
 80089e0:	3b01      	subs	r3, #1
 80089e2:	b29a      	uxth	r2, r3
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d034      	beq.n	8008a5c <HAL_I2C_Mem_Read+0x1d0>
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d130      	bne.n	8008a5c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	9300      	str	r3, [sp, #0]
 80089fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a00:	2200      	movs	r2, #0
 8008a02:	2180      	movs	r1, #128	; 0x80
 8008a04:	68f8      	ldr	r0, [r7, #12]
 8008a06:	f000 f935 	bl	8008c74 <I2C_WaitOnFlagUntilTimeout>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d001      	beq.n	8008a14 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008a10:	2301      	movs	r3, #1
 8008a12:	e04d      	b.n	8008ab0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	2bff      	cmp	r3, #255	; 0xff
 8008a1c:	d90e      	bls.n	8008a3c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	22ff      	movs	r2, #255	; 0xff
 8008a22:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a28:	b2da      	uxtb	r2, r3
 8008a2a:	8979      	ldrh	r1, [r7, #10]
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	9300      	str	r3, [sp, #0]
 8008a30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a34:	68f8      	ldr	r0, [r7, #12]
 8008a36:	f000 fab9 	bl	8008fac <I2C_TransferConfig>
 8008a3a:	e00f      	b.n	8008a5c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a40:	b29a      	uxth	r2, r3
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a4a:	b2da      	uxtb	r2, r3
 8008a4c:	8979      	ldrh	r1, [r7, #10]
 8008a4e:	2300      	movs	r3, #0
 8008a50:	9300      	str	r3, [sp, #0]
 8008a52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a56:	68f8      	ldr	r0, [r7, #12]
 8008a58:	f000 faa8 	bl	8008fac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d19a      	bne.n	800899c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a66:	697a      	ldr	r2, [r7, #20]
 8008a68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a6a:	68f8      	ldr	r0, [r7, #12]
 8008a6c:	f000 f982 	bl	8008d74 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008a70:	4603      	mov	r3, r0
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d001      	beq.n	8008a7a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	e01a      	b.n	8008ab0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	2220      	movs	r2, #32
 8008a80:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	6859      	ldr	r1, [r3, #4]
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	4b0b      	ldr	r3, [pc, #44]	; (8008abc <HAL_I2C_Mem_Read+0x230>)
 8008a8e:	400b      	ands	r3, r1
 8008a90:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2220      	movs	r2, #32
 8008a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	e000      	b.n	8008ab0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008aae:	2302      	movs	r3, #2
  }
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3718      	adds	r7, #24
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	80002400 	.word	0x80002400
 8008abc:	fe00e800 	.word	0xfe00e800

08008ac0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b083      	sub	sp, #12
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ace:	b2db      	uxtb	r3, r3
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	370c      	adds	r7, #12
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr

08008adc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b086      	sub	sp, #24
 8008ae0:	af02      	add	r7, sp, #8
 8008ae2:	60f8      	str	r0, [r7, #12]
 8008ae4:	4608      	mov	r0, r1
 8008ae6:	4611      	mov	r1, r2
 8008ae8:	461a      	mov	r2, r3
 8008aea:	4603      	mov	r3, r0
 8008aec:	817b      	strh	r3, [r7, #10]
 8008aee:	460b      	mov	r3, r1
 8008af0:	813b      	strh	r3, [r7, #8]
 8008af2:	4613      	mov	r3, r2
 8008af4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008af6:	88fb      	ldrh	r3, [r7, #6]
 8008af8:	b2da      	uxtb	r2, r3
 8008afa:	8979      	ldrh	r1, [r7, #10]
 8008afc:	4b20      	ldr	r3, [pc, #128]	; (8008b80 <I2C_RequestMemoryWrite+0xa4>)
 8008afe:	9300      	str	r3, [sp, #0]
 8008b00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008b04:	68f8      	ldr	r0, [r7, #12]
 8008b06:	f000 fa51 	bl	8008fac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b0a:	69fa      	ldr	r2, [r7, #28]
 8008b0c:	69b9      	ldr	r1, [r7, #24]
 8008b0e:	68f8      	ldr	r0, [r7, #12]
 8008b10:	f000 f8f0 	bl	8008cf4 <I2C_WaitOnTXISFlagUntilTimeout>
 8008b14:	4603      	mov	r3, r0
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d001      	beq.n	8008b1e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	e02c      	b.n	8008b78 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008b1e:	88fb      	ldrh	r3, [r7, #6]
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d105      	bne.n	8008b30 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008b24:	893b      	ldrh	r3, [r7, #8]
 8008b26:	b2da      	uxtb	r2, r3
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	629a      	str	r2, [r3, #40]	; 0x28
 8008b2e:	e015      	b.n	8008b5c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008b30:	893b      	ldrh	r3, [r7, #8]
 8008b32:	0a1b      	lsrs	r3, r3, #8
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	b2da      	uxtb	r2, r3
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b3e:	69fa      	ldr	r2, [r7, #28]
 8008b40:	69b9      	ldr	r1, [r7, #24]
 8008b42:	68f8      	ldr	r0, [r7, #12]
 8008b44:	f000 f8d6 	bl	8008cf4 <I2C_WaitOnTXISFlagUntilTimeout>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d001      	beq.n	8008b52 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e012      	b.n	8008b78 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008b52:	893b      	ldrh	r3, [r7, #8]
 8008b54:	b2da      	uxtb	r2, r3
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008b5c:	69fb      	ldr	r3, [r7, #28]
 8008b5e:	9300      	str	r3, [sp, #0]
 8008b60:	69bb      	ldr	r3, [r7, #24]
 8008b62:	2200      	movs	r2, #0
 8008b64:	2180      	movs	r1, #128	; 0x80
 8008b66:	68f8      	ldr	r0, [r7, #12]
 8008b68:	f000 f884 	bl	8008c74 <I2C_WaitOnFlagUntilTimeout>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d001      	beq.n	8008b76 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008b72:	2301      	movs	r3, #1
 8008b74:	e000      	b.n	8008b78 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008b76:	2300      	movs	r3, #0
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3710      	adds	r7, #16
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}
 8008b80:	80002000 	.word	0x80002000

08008b84 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b086      	sub	sp, #24
 8008b88:	af02      	add	r7, sp, #8
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	4608      	mov	r0, r1
 8008b8e:	4611      	mov	r1, r2
 8008b90:	461a      	mov	r2, r3
 8008b92:	4603      	mov	r3, r0
 8008b94:	817b      	strh	r3, [r7, #10]
 8008b96:	460b      	mov	r3, r1
 8008b98:	813b      	strh	r3, [r7, #8]
 8008b9a:	4613      	mov	r3, r2
 8008b9c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008b9e:	88fb      	ldrh	r3, [r7, #6]
 8008ba0:	b2da      	uxtb	r2, r3
 8008ba2:	8979      	ldrh	r1, [r7, #10]
 8008ba4:	4b20      	ldr	r3, [pc, #128]	; (8008c28 <I2C_RequestMemoryRead+0xa4>)
 8008ba6:	9300      	str	r3, [sp, #0]
 8008ba8:	2300      	movs	r3, #0
 8008baa:	68f8      	ldr	r0, [r7, #12]
 8008bac:	f000 f9fe 	bl	8008fac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008bb0:	69fa      	ldr	r2, [r7, #28]
 8008bb2:	69b9      	ldr	r1, [r7, #24]
 8008bb4:	68f8      	ldr	r0, [r7, #12]
 8008bb6:	f000 f89d 	bl	8008cf4 <I2C_WaitOnTXISFlagUntilTimeout>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d001      	beq.n	8008bc4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e02c      	b.n	8008c1e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008bc4:	88fb      	ldrh	r3, [r7, #6]
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d105      	bne.n	8008bd6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008bca:	893b      	ldrh	r3, [r7, #8]
 8008bcc:	b2da      	uxtb	r2, r3
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	629a      	str	r2, [r3, #40]	; 0x28
 8008bd4:	e015      	b.n	8008c02 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008bd6:	893b      	ldrh	r3, [r7, #8]
 8008bd8:	0a1b      	lsrs	r3, r3, #8
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	b2da      	uxtb	r2, r3
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008be4:	69fa      	ldr	r2, [r7, #28]
 8008be6:	69b9      	ldr	r1, [r7, #24]
 8008be8:	68f8      	ldr	r0, [r7, #12]
 8008bea:	f000 f883 	bl	8008cf4 <I2C_WaitOnTXISFlagUntilTimeout>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d001      	beq.n	8008bf8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	e012      	b.n	8008c1e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008bf8:	893b      	ldrh	r3, [r7, #8]
 8008bfa:	b2da      	uxtb	r2, r3
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008c02:	69fb      	ldr	r3, [r7, #28]
 8008c04:	9300      	str	r3, [sp, #0]
 8008c06:	69bb      	ldr	r3, [r7, #24]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	2140      	movs	r1, #64	; 0x40
 8008c0c:	68f8      	ldr	r0, [r7, #12]
 8008c0e:	f000 f831 	bl	8008c74 <I2C_WaitOnFlagUntilTimeout>
 8008c12:	4603      	mov	r3, r0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d001      	beq.n	8008c1c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	e000      	b.n	8008c1e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008c1c:	2300      	movs	r3, #0
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3710      	adds	r7, #16
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	80002000 	.word	0x80002000

08008c2c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b083      	sub	sp, #12
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	699b      	ldr	r3, [r3, #24]
 8008c3a:	f003 0302 	and.w	r3, r3, #2
 8008c3e:	2b02      	cmp	r3, #2
 8008c40:	d103      	bne.n	8008c4a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	2200      	movs	r2, #0
 8008c48:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	699b      	ldr	r3, [r3, #24]
 8008c50:	f003 0301 	and.w	r3, r3, #1
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d007      	beq.n	8008c68 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	699a      	ldr	r2, [r3, #24]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f042 0201 	orr.w	r2, r2, #1
 8008c66:	619a      	str	r2, [r3, #24]
  }
}
 8008c68:	bf00      	nop
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b084      	sub	sp, #16
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	60f8      	str	r0, [r7, #12]
 8008c7c:	60b9      	str	r1, [r7, #8]
 8008c7e:	603b      	str	r3, [r7, #0]
 8008c80:	4613      	mov	r3, r2
 8008c82:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008c84:	e022      	b.n	8008ccc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c8c:	d01e      	beq.n	8008ccc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c8e:	f7fc f837 	bl	8004d00 <HAL_GetTick>
 8008c92:	4602      	mov	r2, r0
 8008c94:	69bb      	ldr	r3, [r7, #24]
 8008c96:	1ad3      	subs	r3, r2, r3
 8008c98:	683a      	ldr	r2, [r7, #0]
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	d302      	bcc.n	8008ca4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d113      	bne.n	8008ccc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ca8:	f043 0220 	orr.w	r2, r3, #32
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2220      	movs	r2, #32
 8008cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	e00f      	b.n	8008cec <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	699a      	ldr	r2, [r3, #24]
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	4013      	ands	r3, r2
 8008cd6:	68ba      	ldr	r2, [r7, #8]
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	bf0c      	ite	eq
 8008cdc:	2301      	moveq	r3, #1
 8008cde:	2300      	movne	r3, #0
 8008ce0:	b2db      	uxtb	r3, r3
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	79fb      	ldrb	r3, [r7, #7]
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d0cd      	beq.n	8008c86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008cea:	2300      	movs	r3, #0
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3710      	adds	r7, #16
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	60f8      	str	r0, [r7, #12]
 8008cfc:	60b9      	str	r1, [r7, #8]
 8008cfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008d00:	e02c      	b.n	8008d5c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	68b9      	ldr	r1, [r7, #8]
 8008d06:	68f8      	ldr	r0, [r7, #12]
 8008d08:	f000 f870 	bl	8008dec <I2C_IsErrorOccurred>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d001      	beq.n	8008d16 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008d12:	2301      	movs	r3, #1
 8008d14:	e02a      	b.n	8008d6c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d1c:	d01e      	beq.n	8008d5c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d1e:	f7fb ffef 	bl	8004d00 <HAL_GetTick>
 8008d22:	4602      	mov	r2, r0
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	1ad3      	subs	r3, r2, r3
 8008d28:	68ba      	ldr	r2, [r7, #8]
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d302      	bcc.n	8008d34 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d113      	bne.n	8008d5c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d38:	f043 0220 	orr.w	r2, r3, #32
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2220      	movs	r2, #32
 8008d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2200      	movs	r2, #0
 8008d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	e007      	b.n	8008d6c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	699b      	ldr	r3, [r3, #24]
 8008d62:	f003 0302 	and.w	r3, r3, #2
 8008d66:	2b02      	cmp	r3, #2
 8008d68:	d1cb      	bne.n	8008d02 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008d6a:	2300      	movs	r3, #0
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3710      	adds	r7, #16
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	60b9      	str	r1, [r7, #8]
 8008d7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008d80:	e028      	b.n	8008dd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	68b9      	ldr	r1, [r7, #8]
 8008d86:	68f8      	ldr	r0, [r7, #12]
 8008d88:	f000 f830 	bl	8008dec <I2C_IsErrorOccurred>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d001      	beq.n	8008d96 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008d92:	2301      	movs	r3, #1
 8008d94:	e026      	b.n	8008de4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d96:	f7fb ffb3 	bl	8004d00 <HAL_GetTick>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	1ad3      	subs	r3, r2, r3
 8008da0:	68ba      	ldr	r2, [r7, #8]
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d302      	bcc.n	8008dac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d113      	bne.n	8008dd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008db0:	f043 0220 	orr.w	r2, r3, #32
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2220      	movs	r2, #32
 8008dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e007      	b.n	8008de4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	699b      	ldr	r3, [r3, #24]
 8008dda:	f003 0320 	and.w	r3, r3, #32
 8008dde:	2b20      	cmp	r3, #32
 8008de0:	d1cf      	bne.n	8008d82 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008de2:	2300      	movs	r3, #0
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3710      	adds	r7, #16
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b08a      	sub	sp, #40	; 0x28
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	60f8      	str	r0, [r7, #12]
 8008df4:	60b9      	str	r1, [r7, #8]
 8008df6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	699b      	ldr	r3, [r3, #24]
 8008e04:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008e06:	2300      	movs	r3, #0
 8008e08:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008e0e:	69bb      	ldr	r3, [r7, #24]
 8008e10:	f003 0310 	and.w	r3, r3, #16
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d068      	beq.n	8008eea <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2210      	movs	r2, #16
 8008e1e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008e20:	e049      	b.n	8008eb6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e28:	d045      	beq.n	8008eb6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008e2a:	f7fb ff69 	bl	8004d00 <HAL_GetTick>
 8008e2e:	4602      	mov	r2, r0
 8008e30:	69fb      	ldr	r3, [r7, #28]
 8008e32:	1ad3      	subs	r3, r2, r3
 8008e34:	68ba      	ldr	r2, [r7, #8]
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d302      	bcc.n	8008e40 <I2C_IsErrorOccurred+0x54>
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d13a      	bne.n	8008eb6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e4a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008e52:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	699b      	ldr	r3, [r3, #24]
 8008e5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e62:	d121      	bne.n	8008ea8 <I2C_IsErrorOccurred+0xbc>
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e6a:	d01d      	beq.n	8008ea8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008e6c:	7cfb      	ldrb	r3, [r7, #19]
 8008e6e:	2b20      	cmp	r3, #32
 8008e70:	d01a      	beq.n	8008ea8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	685a      	ldr	r2, [r3, #4]
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008e80:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008e82:	f7fb ff3d 	bl	8004d00 <HAL_GetTick>
 8008e86:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008e88:	e00e      	b.n	8008ea8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008e8a:	f7fb ff39 	bl	8004d00 <HAL_GetTick>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	69fb      	ldr	r3, [r7, #28]
 8008e92:	1ad3      	subs	r3, r2, r3
 8008e94:	2b19      	cmp	r3, #25
 8008e96:	d907      	bls.n	8008ea8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8008e98:	6a3b      	ldr	r3, [r7, #32]
 8008e9a:	f043 0320 	orr.w	r3, r3, #32
 8008e9e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8008ea6:	e006      	b.n	8008eb6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	699b      	ldr	r3, [r3, #24]
 8008eae:	f003 0320 	and.w	r3, r3, #32
 8008eb2:	2b20      	cmp	r3, #32
 8008eb4:	d1e9      	bne.n	8008e8a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	699b      	ldr	r3, [r3, #24]
 8008ebc:	f003 0320 	and.w	r3, r3, #32
 8008ec0:	2b20      	cmp	r3, #32
 8008ec2:	d003      	beq.n	8008ecc <I2C_IsErrorOccurred+0xe0>
 8008ec4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d0aa      	beq.n	8008e22 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008ecc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d103      	bne.n	8008edc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	2220      	movs	r2, #32
 8008eda:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008edc:	6a3b      	ldr	r3, [r7, #32]
 8008ede:	f043 0304 	orr.w	r3, r3, #4
 8008ee2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	699b      	ldr	r3, [r3, #24]
 8008ef0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d00b      	beq.n	8008f14 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008efc:	6a3b      	ldr	r3, [r7, #32]
 8008efe:	f043 0301 	orr.w	r3, r3, #1
 8008f02:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008f0c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008f14:	69bb      	ldr	r3, [r7, #24]
 8008f16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d00b      	beq.n	8008f36 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008f1e:	6a3b      	ldr	r3, [r7, #32]
 8008f20:	f043 0308 	orr.w	r3, r3, #8
 8008f24:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008f2e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008f30:	2301      	movs	r3, #1
 8008f32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d00b      	beq.n	8008f58 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008f40:	6a3b      	ldr	r3, [r7, #32]
 8008f42:	f043 0302 	orr.w	r3, r3, #2
 8008f46:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008f52:	2301      	movs	r3, #1
 8008f54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008f58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d01c      	beq.n	8008f9a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008f60:	68f8      	ldr	r0, [r7, #12]
 8008f62:	f7ff fe63 	bl	8008c2c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	6859      	ldr	r1, [r3, #4]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681a      	ldr	r2, [r3, #0]
 8008f70:	4b0d      	ldr	r3, [pc, #52]	; (8008fa8 <I2C_IsErrorOccurred+0x1bc>)
 8008f72:	400b      	ands	r3, r1
 8008f74:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f7a:	6a3b      	ldr	r3, [r7, #32]
 8008f7c:	431a      	orrs	r2, r3
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2220      	movs	r2, #32
 8008f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2200      	movs	r2, #0
 8008f96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008f9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3728      	adds	r7, #40	; 0x28
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	fe00e800 	.word	0xfe00e800

08008fac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b087      	sub	sp, #28
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	60f8      	str	r0, [r7, #12]
 8008fb4:	607b      	str	r3, [r7, #4]
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	817b      	strh	r3, [r7, #10]
 8008fba:	4613      	mov	r3, r2
 8008fbc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008fbe:	897b      	ldrh	r3, [r7, #10]
 8008fc0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008fc4:	7a7b      	ldrb	r3, [r7, #9]
 8008fc6:	041b      	lsls	r3, r3, #16
 8008fc8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008fcc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008fd2:	6a3b      	ldr	r3, [r7, #32]
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008fda:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	685a      	ldr	r2, [r3, #4]
 8008fe2:	6a3b      	ldr	r3, [r7, #32]
 8008fe4:	0d5b      	lsrs	r3, r3, #21
 8008fe6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008fea:	4b08      	ldr	r3, [pc, #32]	; (800900c <I2C_TransferConfig+0x60>)
 8008fec:	430b      	orrs	r3, r1
 8008fee:	43db      	mvns	r3, r3
 8008ff0:	ea02 0103 	and.w	r1, r2, r3
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	697a      	ldr	r2, [r7, #20]
 8008ffa:	430a      	orrs	r2, r1
 8008ffc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008ffe:	bf00      	nop
 8009000:	371c      	adds	r7, #28
 8009002:	46bd      	mov	sp, r7
 8009004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009008:	4770      	bx	lr
 800900a:	bf00      	nop
 800900c:	03ff63ff 	.word	0x03ff63ff

08009010 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009010:	b480      	push	{r7}
 8009012:	b083      	sub	sp, #12
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009020:	b2db      	uxtb	r3, r3
 8009022:	2b20      	cmp	r3, #32
 8009024:	d138      	bne.n	8009098 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800902c:	2b01      	cmp	r3, #1
 800902e:	d101      	bne.n	8009034 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009030:	2302      	movs	r3, #2
 8009032:	e032      	b.n	800909a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2201      	movs	r2, #1
 8009038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2224      	movs	r2, #36	; 0x24
 8009040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f022 0201 	bic.w	r2, r2, #1
 8009052:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009062:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	6819      	ldr	r1, [r3, #0]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	683a      	ldr	r2, [r7, #0]
 8009070:	430a      	orrs	r2, r1
 8009072:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f042 0201 	orr.w	r2, r2, #1
 8009082:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2220      	movs	r2, #32
 8009088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009094:	2300      	movs	r3, #0
 8009096:	e000      	b.n	800909a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009098:	2302      	movs	r3, #2
  }
}
 800909a:	4618      	mov	r0, r3
 800909c:	370c      	adds	r7, #12
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr

080090a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80090a6:	b480      	push	{r7}
 80090a8:	b085      	sub	sp, #20
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
 80090ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090b6:	b2db      	uxtb	r3, r3
 80090b8:	2b20      	cmp	r3, #32
 80090ba:	d139      	bne.n	8009130 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d101      	bne.n	80090ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80090c6:	2302      	movs	r3, #2
 80090c8:	e033      	b.n	8009132 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2201      	movs	r2, #1
 80090ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2224      	movs	r2, #36	; 0x24
 80090d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	681a      	ldr	r2, [r3, #0]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f022 0201 	bic.w	r2, r2, #1
 80090e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80090f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	021b      	lsls	r3, r3, #8
 80090fe:	68fa      	ldr	r2, [r7, #12]
 8009100:	4313      	orrs	r3, r2
 8009102:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	68fa      	ldr	r2, [r7, #12]
 800910a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	681a      	ldr	r2, [r3, #0]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f042 0201 	orr.w	r2, r2, #1
 800911a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2220      	movs	r2, #32
 8009120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2200      	movs	r2, #0
 8009128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800912c:	2300      	movs	r3, #0
 800912e:	e000      	b.n	8009132 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009130:	2302      	movs	r3, #2
  }
}
 8009132:	4618      	mov	r0, r3
 8009134:	3714      	adds	r7, #20
 8009136:	46bd      	mov	sp, r7
 8009138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913c:	4770      	bx	lr
	...

08009140 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d101      	bne.n	8009152 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800914e:	2301      	movs	r3, #1
 8009150:	e0bf      	b.n	80092d2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8009158:	b2db      	uxtb	r3, r3
 800915a:	2b00      	cmp	r3, #0
 800915c:	d106      	bne.n	800916c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2200      	movs	r2, #0
 8009162:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f7f9 f972 	bl	8002450 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2202      	movs	r2, #2
 8009170:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	699a      	ldr	r2, [r3, #24]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8009182:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	6999      	ldr	r1, [r3, #24]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	685a      	ldr	r2, [r3, #4]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	689b      	ldr	r3, [r3, #8]
 8009192:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009198:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	691b      	ldr	r3, [r3, #16]
 800919e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	430a      	orrs	r2, r1
 80091a6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	6899      	ldr	r1, [r3, #8]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	4b4a      	ldr	r3, [pc, #296]	; (80092dc <HAL_LTDC_Init+0x19c>)
 80091b4:	400b      	ands	r3, r1
 80091b6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	695b      	ldr	r3, [r3, #20]
 80091bc:	041b      	lsls	r3, r3, #16
 80091be:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	6899      	ldr	r1, [r3, #8]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	699a      	ldr	r2, [r3, #24]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	431a      	orrs	r2, r3
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	430a      	orrs	r2, r1
 80091d4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	68d9      	ldr	r1, [r3, #12]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681a      	ldr	r2, [r3, #0]
 80091e0:	4b3e      	ldr	r3, [pc, #248]	; (80092dc <HAL_LTDC_Init+0x19c>)
 80091e2:	400b      	ands	r3, r1
 80091e4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	69db      	ldr	r3, [r3, #28]
 80091ea:	041b      	lsls	r3, r3, #16
 80091ec:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	68d9      	ldr	r1, [r3, #12]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6a1a      	ldr	r2, [r3, #32]
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	431a      	orrs	r2, r3
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	430a      	orrs	r2, r1
 8009202:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	6919      	ldr	r1, [r3, #16]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	4b33      	ldr	r3, [pc, #204]	; (80092dc <HAL_LTDC_Init+0x19c>)
 8009210:	400b      	ands	r3, r1
 8009212:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009218:	041b      	lsls	r3, r3, #16
 800921a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	6919      	ldr	r1, [r3, #16]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	431a      	orrs	r2, r3
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	430a      	orrs	r2, r1
 8009230:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	6959      	ldr	r1, [r3, #20]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	4b27      	ldr	r3, [pc, #156]	; (80092dc <HAL_LTDC_Init+0x19c>)
 800923e:	400b      	ands	r3, r1
 8009240:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009246:	041b      	lsls	r3, r3, #16
 8009248:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	6959      	ldr	r1, [r3, #20]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	431a      	orrs	r2, r3
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	430a      	orrs	r2, r1
 800925e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009266:	021b      	lsls	r3, r3, #8
 8009268:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009270:	041b      	lsls	r3, r3, #16
 8009272:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8009282:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800928a:	68ba      	ldr	r2, [r7, #8]
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	4313      	orrs	r3, r2
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8009296:	431a      	orrs	r2, r3
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	430a      	orrs	r2, r1
 800929e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f042 0206 	orr.w	r2, r2, #6
 80092ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	699a      	ldr	r2, [r3, #24]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f042 0201 	orr.w	r2, r2, #1
 80092be:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2200      	movs	r2, #0
 80092c4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2201      	movs	r2, #1
 80092cc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80092d0:	2300      	movs	r3, #0
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3710      	adds	r7, #16
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}
 80092da:	bf00      	nop
 80092dc:	f000f800 	.word	0xf000f800

080092e0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b084      	sub	sp, #16
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ee:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092f6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f003 0304 	and.w	r3, r3, #4
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d023      	beq.n	800934a <HAL_LTDC_IRQHandler+0x6a>
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	f003 0304 	and.w	r3, r3, #4
 8009308:	2b00      	cmp	r3, #0
 800930a:	d01e      	beq.n	800934a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f022 0204 	bic.w	r2, r2, #4
 800931a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	2204      	movs	r2, #4
 8009322:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800932a:	f043 0201 	orr.w	r2, r3, #1
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2204      	movs	r2, #4
 8009338:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2200      	movs	r2, #0
 8009340:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f000 f86f 	bl	8009428 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f003 0302 	and.w	r3, r3, #2
 8009350:	2b00      	cmp	r3, #0
 8009352:	d023      	beq.n	800939c <HAL_LTDC_IRQHandler+0xbc>
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	f003 0302 	and.w	r3, r3, #2
 800935a:	2b00      	cmp	r3, #0
 800935c:	d01e      	beq.n	800939c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f022 0202 	bic.w	r2, r2, #2
 800936c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	2202      	movs	r2, #2
 8009374:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800937c:	f043 0202 	orr.w	r2, r3, #2
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2204      	movs	r2, #4
 800938a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2200      	movs	r2, #0
 8009392:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 f846 	bl	8009428 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f003 0301 	and.w	r3, r3, #1
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d01b      	beq.n	80093de <HAL_LTDC_IRQHandler+0xfe>
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	f003 0301 	and.w	r3, r3, #1
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d016      	beq.n	80093de <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f022 0201 	bic.w	r2, r2, #1
 80093be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2201      	movs	r2, #1
 80093c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2201      	movs	r2, #1
 80093cc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2200      	movs	r2, #0
 80093d4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f000 f82f 	bl	800943c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f003 0308 	and.w	r3, r3, #8
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d01b      	beq.n	8009420 <HAL_LTDC_IRQHandler+0x140>
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	f003 0308 	and.w	r3, r3, #8
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d016      	beq.n	8009420 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f022 0208 	bic.w	r2, r2, #8
 8009400:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	2208      	movs	r2, #8
 8009408:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2201      	movs	r2, #1
 800940e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 f818 	bl	8009450 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8009420:	bf00      	nop
 8009422:	3710      	adds	r7, #16
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8009428:	b480      	push	{r7}
 800942a:	b083      	sub	sp, #12
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8009430:	bf00      	nop
 8009432:	370c      	adds	r7, #12
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8009444:	bf00      	nop
 8009446:	370c      	adds	r7, #12
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009450:	b480      	push	{r7}
 8009452:	b083      	sub	sp, #12
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8009458:	bf00      	nop
 800945a:	370c      	adds	r7, #12
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009464:	b5b0      	push	{r4, r5, r7, lr}
 8009466:	b084      	sub	sp, #16
 8009468:	af00      	add	r7, sp, #0
 800946a:	60f8      	str	r0, [r7, #12]
 800946c:	60b9      	str	r1, [r7, #8]
 800946e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8009476:	2b01      	cmp	r3, #1
 8009478:	d101      	bne.n	800947e <HAL_LTDC_ConfigLayer+0x1a>
 800947a:	2302      	movs	r3, #2
 800947c:	e02c      	b.n	80094d8 <HAL_LTDC_ConfigLayer+0x74>
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2201      	movs	r2, #1
 8009482:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2202      	movs	r2, #2
 800948a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800948e:	68fa      	ldr	r2, [r7, #12]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2134      	movs	r1, #52	; 0x34
 8009494:	fb01 f303 	mul.w	r3, r1, r3
 8009498:	4413      	add	r3, r2
 800949a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	4614      	mov	r4, r2
 80094a2:	461d      	mov	r5, r3
 80094a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80094a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80094a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80094aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80094ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80094ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80094b0:	682b      	ldr	r3, [r5, #0]
 80094b2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80094b4:	687a      	ldr	r2, [r7, #4]
 80094b6:	68b9      	ldr	r1, [r7, #8]
 80094b8:	68f8      	ldr	r0, [r7, #12]
 80094ba:	f000 f811 	bl	80094e0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	2201      	movs	r2, #1
 80094c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2201      	movs	r2, #1
 80094ca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2200      	movs	r2, #0
 80094d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80094d6:	2300      	movs	r3, #0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3710      	adds	r7, #16
 80094dc:	46bd      	mov	sp, r7
 80094de:	bdb0      	pop	{r4, r5, r7, pc}

080094e0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b089      	sub	sp, #36	; 0x24
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	60f8      	str	r0, [r7, #12]
 80094e8:	60b9      	str	r1, [r7, #8]
 80094ea:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	685a      	ldr	r2, [r3, #4]
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	68db      	ldr	r3, [r3, #12]
 80094f6:	0c1b      	lsrs	r3, r3, #16
 80094f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094fc:	4413      	add	r3, r2
 80094fe:	041b      	lsls	r3, r3, #16
 8009500:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	461a      	mov	r2, r3
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	01db      	lsls	r3, r3, #7
 800950c:	4413      	add	r3, r2
 800950e:	3384      	adds	r3, #132	; 0x84
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	68fa      	ldr	r2, [r7, #12]
 8009514:	6812      	ldr	r2, [r2, #0]
 8009516:	4611      	mov	r1, r2
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	01d2      	lsls	r2, r2, #7
 800951c:	440a      	add	r2, r1
 800951e:	3284      	adds	r2, #132	; 0x84
 8009520:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8009524:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	68db      	ldr	r3, [r3, #12]
 8009530:	0c1b      	lsrs	r3, r3, #16
 8009532:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009536:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009538:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4619      	mov	r1, r3
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	01db      	lsls	r3, r3, #7
 8009544:	440b      	add	r3, r1
 8009546:	3384      	adds	r3, #132	; 0x84
 8009548:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800954a:	69fb      	ldr	r3, [r7, #28]
 800954c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800954e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	68da      	ldr	r2, [r3, #12]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	68db      	ldr	r3, [r3, #12]
 800955a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800955e:	4413      	add	r3, r2
 8009560:	041b      	lsls	r3, r3, #16
 8009562:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	461a      	mov	r2, r3
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	01db      	lsls	r3, r3, #7
 800956e:	4413      	add	r3, r2
 8009570:	3384      	adds	r3, #132	; 0x84
 8009572:	689b      	ldr	r3, [r3, #8]
 8009574:	68fa      	ldr	r2, [r7, #12]
 8009576:	6812      	ldr	r2, [r2, #0]
 8009578:	4611      	mov	r1, r2
 800957a:	687a      	ldr	r2, [r7, #4]
 800957c:	01d2      	lsls	r2, r2, #7
 800957e:	440a      	add	r2, r1
 8009580:	3284      	adds	r2, #132	; 0x84
 8009582:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8009586:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	689a      	ldr	r2, [r3, #8]
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	68db      	ldr	r3, [r3, #12]
 8009592:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009596:	4413      	add	r3, r2
 8009598:	1c5a      	adds	r2, r3, #1
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4619      	mov	r1, r3
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	01db      	lsls	r3, r3, #7
 80095a4:	440b      	add	r3, r1
 80095a6:	3384      	adds	r3, #132	; 0x84
 80095a8:	4619      	mov	r1, r3
 80095aa:	69fb      	ldr	r3, [r7, #28]
 80095ac:	4313      	orrs	r3, r2
 80095ae:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	461a      	mov	r2, r3
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	01db      	lsls	r3, r3, #7
 80095ba:	4413      	add	r3, r2
 80095bc:	3384      	adds	r3, #132	; 0x84
 80095be:	691b      	ldr	r3, [r3, #16]
 80095c0:	68fa      	ldr	r2, [r7, #12]
 80095c2:	6812      	ldr	r2, [r2, #0]
 80095c4:	4611      	mov	r1, r2
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	01d2      	lsls	r2, r2, #7
 80095ca:	440a      	add	r2, r1
 80095cc:	3284      	adds	r2, #132	; 0x84
 80095ce:	f023 0307 	bic.w	r3, r3, #7
 80095d2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	461a      	mov	r2, r3
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	01db      	lsls	r3, r3, #7
 80095de:	4413      	add	r3, r2
 80095e0:	3384      	adds	r3, #132	; 0x84
 80095e2:	461a      	mov	r2, r3
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	691b      	ldr	r3, [r3, #16]
 80095e8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80095f0:	021b      	lsls	r3, r3, #8
 80095f2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80095fa:	041b      	lsls	r3, r3, #16
 80095fc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	699b      	ldr	r3, [r3, #24]
 8009602:	061b      	lsls	r3, r3, #24
 8009604:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	461a      	mov	r2, r3
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	01db      	lsls	r3, r3, #7
 8009610:	4413      	add	r3, r2
 8009612:	3384      	adds	r3, #132	; 0x84
 8009614:	699b      	ldr	r3, [r3, #24]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	461a      	mov	r2, r3
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	01db      	lsls	r3, r3, #7
 8009620:	4413      	add	r3, r2
 8009622:	3384      	adds	r3, #132	; 0x84
 8009624:	461a      	mov	r2, r3
 8009626:	2300      	movs	r3, #0
 8009628:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009630:	461a      	mov	r2, r3
 8009632:	69fb      	ldr	r3, [r7, #28]
 8009634:	431a      	orrs	r2, r3
 8009636:	69bb      	ldr	r3, [r7, #24]
 8009638:	431a      	orrs	r2, r3
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4619      	mov	r1, r3
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	01db      	lsls	r3, r3, #7
 8009644:	440b      	add	r3, r1
 8009646:	3384      	adds	r3, #132	; 0x84
 8009648:	4619      	mov	r1, r3
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	4313      	orrs	r3, r2
 800964e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	461a      	mov	r2, r3
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	01db      	lsls	r3, r3, #7
 800965a:	4413      	add	r3, r2
 800965c:	3384      	adds	r3, #132	; 0x84
 800965e:	695b      	ldr	r3, [r3, #20]
 8009660:	68fa      	ldr	r2, [r7, #12]
 8009662:	6812      	ldr	r2, [r2, #0]
 8009664:	4611      	mov	r1, r2
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	01d2      	lsls	r2, r2, #7
 800966a:	440a      	add	r2, r1
 800966c:	3284      	adds	r2, #132	; 0x84
 800966e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009672:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	461a      	mov	r2, r3
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	01db      	lsls	r3, r3, #7
 800967e:	4413      	add	r3, r2
 8009680:	3384      	adds	r3, #132	; 0x84
 8009682:	461a      	mov	r2, r3
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	695b      	ldr	r3, [r3, #20]
 8009688:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	461a      	mov	r2, r3
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	01db      	lsls	r3, r3, #7
 8009694:	4413      	add	r3, r2
 8009696:	3384      	adds	r3, #132	; 0x84
 8009698:	69da      	ldr	r2, [r3, #28]
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4619      	mov	r1, r3
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	01db      	lsls	r3, r3, #7
 80096a4:	440b      	add	r3, r1
 80096a6:	3384      	adds	r3, #132	; 0x84
 80096a8:	4619      	mov	r1, r3
 80096aa:	4b58      	ldr	r3, [pc, #352]	; (800980c <LTDC_SetConfig+0x32c>)
 80096ac:	4013      	ands	r3, r2
 80096ae:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	69da      	ldr	r2, [r3, #28]
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	6a1b      	ldr	r3, [r3, #32]
 80096b8:	68f9      	ldr	r1, [r7, #12]
 80096ba:	6809      	ldr	r1, [r1, #0]
 80096bc:	4608      	mov	r0, r1
 80096be:	6879      	ldr	r1, [r7, #4]
 80096c0:	01c9      	lsls	r1, r1, #7
 80096c2:	4401      	add	r1, r0
 80096c4:	3184      	adds	r1, #132	; 0x84
 80096c6:	4313      	orrs	r3, r2
 80096c8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	461a      	mov	r2, r3
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	01db      	lsls	r3, r3, #7
 80096d4:	4413      	add	r3, r2
 80096d6:	3384      	adds	r3, #132	; 0x84
 80096d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	461a      	mov	r2, r3
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	01db      	lsls	r3, r3, #7
 80096e4:	4413      	add	r3, r2
 80096e6:	3384      	adds	r3, #132	; 0x84
 80096e8:	461a      	mov	r2, r3
 80096ea:	2300      	movs	r3, #0
 80096ec:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	461a      	mov	r2, r3
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	01db      	lsls	r3, r3, #7
 80096f8:	4413      	add	r3, r2
 80096fa:	3384      	adds	r3, #132	; 0x84
 80096fc:	461a      	mov	r2, r3
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009702:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	691b      	ldr	r3, [r3, #16]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d102      	bne.n	8009712 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800970c:	2304      	movs	r3, #4
 800970e:	61fb      	str	r3, [r7, #28]
 8009710:	e01b      	b.n	800974a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	691b      	ldr	r3, [r3, #16]
 8009716:	2b01      	cmp	r3, #1
 8009718:	d102      	bne.n	8009720 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800971a:	2303      	movs	r3, #3
 800971c:	61fb      	str	r3, [r7, #28]
 800971e:	e014      	b.n	800974a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	691b      	ldr	r3, [r3, #16]
 8009724:	2b04      	cmp	r3, #4
 8009726:	d00b      	beq.n	8009740 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800972c:	2b02      	cmp	r3, #2
 800972e:	d007      	beq.n	8009740 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009734:	2b03      	cmp	r3, #3
 8009736:	d003      	beq.n	8009740 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800973c:	2b07      	cmp	r3, #7
 800973e:	d102      	bne.n	8009746 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8009740:	2302      	movs	r3, #2
 8009742:	61fb      	str	r3, [r7, #28]
 8009744:	e001      	b.n	800974a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8009746:	2301      	movs	r3, #1
 8009748:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	461a      	mov	r2, r3
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	01db      	lsls	r3, r3, #7
 8009754:	4413      	add	r3, r2
 8009756:	3384      	adds	r3, #132	; 0x84
 8009758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800975a:	68fa      	ldr	r2, [r7, #12]
 800975c:	6812      	ldr	r2, [r2, #0]
 800975e:	4611      	mov	r1, r2
 8009760:	687a      	ldr	r2, [r7, #4]
 8009762:	01d2      	lsls	r2, r2, #7
 8009764:	440a      	add	r2, r1
 8009766:	3284      	adds	r2, #132	; 0x84
 8009768:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800976c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009772:	69fa      	ldr	r2, [r7, #28]
 8009774:	fb02 f303 	mul.w	r3, r2, r3
 8009778:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	6859      	ldr	r1, [r3, #4]
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	1acb      	subs	r3, r1, r3
 8009784:	69f9      	ldr	r1, [r7, #28]
 8009786:	fb01 f303 	mul.w	r3, r1, r3
 800978a:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800978c:	68f9      	ldr	r1, [r7, #12]
 800978e:	6809      	ldr	r1, [r1, #0]
 8009790:	4608      	mov	r0, r1
 8009792:	6879      	ldr	r1, [r7, #4]
 8009794:	01c9      	lsls	r1, r1, #7
 8009796:	4401      	add	r1, r0
 8009798:	3184      	adds	r1, #132	; 0x84
 800979a:	4313      	orrs	r3, r2
 800979c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	461a      	mov	r2, r3
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	01db      	lsls	r3, r3, #7
 80097a8:	4413      	add	r3, r2
 80097aa:	3384      	adds	r3, #132	; 0x84
 80097ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4619      	mov	r1, r3
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	01db      	lsls	r3, r3, #7
 80097b8:	440b      	add	r3, r1
 80097ba:	3384      	adds	r3, #132	; 0x84
 80097bc:	4619      	mov	r1, r3
 80097be:	4b14      	ldr	r3, [pc, #80]	; (8009810 <LTDC_SetConfig+0x330>)
 80097c0:	4013      	ands	r3, r2
 80097c2:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	461a      	mov	r2, r3
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	01db      	lsls	r3, r3, #7
 80097ce:	4413      	add	r3, r2
 80097d0:	3384      	adds	r3, #132	; 0x84
 80097d2:	461a      	mov	r2, r3
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	461a      	mov	r2, r3
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	01db      	lsls	r3, r3, #7
 80097e4:	4413      	add	r3, r2
 80097e6:	3384      	adds	r3, #132	; 0x84
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	68fa      	ldr	r2, [r7, #12]
 80097ec:	6812      	ldr	r2, [r2, #0]
 80097ee:	4611      	mov	r1, r2
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	01d2      	lsls	r2, r2, #7
 80097f4:	440a      	add	r2, r1
 80097f6:	3284      	adds	r2, #132	; 0x84
 80097f8:	f043 0301 	orr.w	r3, r3, #1
 80097fc:	6013      	str	r3, [r2, #0]
}
 80097fe:	bf00      	nop
 8009800:	3724      	adds	r7, #36	; 0x24
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr
 800980a:	bf00      	nop
 800980c:	fffff8f8 	.word	0xfffff8f8
 8009810:	fffff800 	.word	0xfffff800

08009814 <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 8009814:	b480      	push	{r7}
 8009816:	b083      	sub	sp, #12
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                            DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 8009822:	2b00      	cmp	r3, #0
 8009824:	d101      	bne.n	800982a <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 8009826:	2200      	movs	r2, #0
 8009828:	e001      	b.n	800982e <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 800982a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	6a1b      	ldr	r3, [r3, #32]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d102      	bne.n	8009840 <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 800983a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800983e:	e000      	b.n	8009842 <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 8009840:	2200      	movs	r2, #0
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	69db      	ldr	r3, [r3, #28]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d102      	bne.n	8009854 <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 800984e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009852:	e000      	b.n	8009856 <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 8009854:	2200      	movs	r2, #0
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800985e:	1e5a      	subs	r2, r3, #1
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800986c:	4413      	add	r3, r2
 800986e:	1e5a      	subs	r2, r3, #1
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800987c:	441a      	add	r2, r3
                                   VidCfg->VerticalActive - 1U;
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8009882:	4413      	add	r3, r2
                                   VidCfg->VerticalActive - 1U;
 8009884:	1e5a      	subs	r2, r3, #1
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009892:	441a      	add	r2, r3
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8009898:	441a      	add	r2, r3
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800989e:	4413      	add	r3, r2
 80098a0:	1e5a      	subs	r2, r3, #1
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80098a6:	2300      	movs	r3, #0
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	370c      	adds	r7, #12
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr

080098b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80098b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098b6:	b08f      	sub	sp, #60	; 0x3c
 80098b8:	af0a      	add	r7, sp, #40	; 0x28
 80098ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d101      	bne.n	80098c6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80098c2:	2301      	movs	r3, #1
 80098c4:	e116      	b.n	8009af4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d106      	bne.n	80098e6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2200      	movs	r2, #0
 80098dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f7f9 fa01 	bl	8002ce8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2203      	movs	r2, #3
 80098ea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d102      	bne.n	8009900 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2200      	movs	r2, #0
 80098fe:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4618      	mov	r0, r3
 8009906:	f005 fa6d 	bl	800ede4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	603b      	str	r3, [r7, #0]
 8009910:	687e      	ldr	r6, [r7, #4]
 8009912:	466d      	mov	r5, sp
 8009914:	f106 0410 	add.w	r4, r6, #16
 8009918:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800991a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800991c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800991e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009920:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009924:	e885 0003 	stmia.w	r5, {r0, r1}
 8009928:	1d33      	adds	r3, r6, #4
 800992a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800992c:	6838      	ldr	r0, [r7, #0]
 800992e:	f005 f95f 	bl	800ebf0 <USB_CoreInit>
 8009932:	4603      	mov	r3, r0
 8009934:	2b00      	cmp	r3, #0
 8009936:	d005      	beq.n	8009944 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2202      	movs	r2, #2
 800993c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8009940:	2301      	movs	r3, #1
 8009942:	e0d7      	b.n	8009af4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	2100      	movs	r1, #0
 800994a:	4618      	mov	r0, r3
 800994c:	f005 fa5b 	bl	800ee06 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009950:	2300      	movs	r3, #0
 8009952:	73fb      	strb	r3, [r7, #15]
 8009954:	e04a      	b.n	80099ec <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009956:	7bfa      	ldrb	r2, [r7, #15]
 8009958:	6879      	ldr	r1, [r7, #4]
 800995a:	4613      	mov	r3, r2
 800995c:	00db      	lsls	r3, r3, #3
 800995e:	4413      	add	r3, r2
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	440b      	add	r3, r1
 8009964:	333d      	adds	r3, #61	; 0x3d
 8009966:	2201      	movs	r2, #1
 8009968:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800996a:	7bfa      	ldrb	r2, [r7, #15]
 800996c:	6879      	ldr	r1, [r7, #4]
 800996e:	4613      	mov	r3, r2
 8009970:	00db      	lsls	r3, r3, #3
 8009972:	4413      	add	r3, r2
 8009974:	009b      	lsls	r3, r3, #2
 8009976:	440b      	add	r3, r1
 8009978:	333c      	adds	r3, #60	; 0x3c
 800997a:	7bfa      	ldrb	r2, [r7, #15]
 800997c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800997e:	7bfa      	ldrb	r2, [r7, #15]
 8009980:	7bfb      	ldrb	r3, [r7, #15]
 8009982:	b298      	uxth	r0, r3
 8009984:	6879      	ldr	r1, [r7, #4]
 8009986:	4613      	mov	r3, r2
 8009988:	00db      	lsls	r3, r3, #3
 800998a:	4413      	add	r3, r2
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	440b      	add	r3, r1
 8009990:	3344      	adds	r3, #68	; 0x44
 8009992:	4602      	mov	r2, r0
 8009994:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009996:	7bfa      	ldrb	r2, [r7, #15]
 8009998:	6879      	ldr	r1, [r7, #4]
 800999a:	4613      	mov	r3, r2
 800999c:	00db      	lsls	r3, r3, #3
 800999e:	4413      	add	r3, r2
 80099a0:	009b      	lsls	r3, r3, #2
 80099a2:	440b      	add	r3, r1
 80099a4:	3340      	adds	r3, #64	; 0x40
 80099a6:	2200      	movs	r2, #0
 80099a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80099aa:	7bfa      	ldrb	r2, [r7, #15]
 80099ac:	6879      	ldr	r1, [r7, #4]
 80099ae:	4613      	mov	r3, r2
 80099b0:	00db      	lsls	r3, r3, #3
 80099b2:	4413      	add	r3, r2
 80099b4:	009b      	lsls	r3, r3, #2
 80099b6:	440b      	add	r3, r1
 80099b8:	3348      	adds	r3, #72	; 0x48
 80099ba:	2200      	movs	r2, #0
 80099bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80099be:	7bfa      	ldrb	r2, [r7, #15]
 80099c0:	6879      	ldr	r1, [r7, #4]
 80099c2:	4613      	mov	r3, r2
 80099c4:	00db      	lsls	r3, r3, #3
 80099c6:	4413      	add	r3, r2
 80099c8:	009b      	lsls	r3, r3, #2
 80099ca:	440b      	add	r3, r1
 80099cc:	334c      	adds	r3, #76	; 0x4c
 80099ce:	2200      	movs	r2, #0
 80099d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80099d2:	7bfa      	ldrb	r2, [r7, #15]
 80099d4:	6879      	ldr	r1, [r7, #4]
 80099d6:	4613      	mov	r3, r2
 80099d8:	00db      	lsls	r3, r3, #3
 80099da:	4413      	add	r3, r2
 80099dc:	009b      	lsls	r3, r3, #2
 80099de:	440b      	add	r3, r1
 80099e0:	3354      	adds	r3, #84	; 0x54
 80099e2:	2200      	movs	r2, #0
 80099e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80099e6:	7bfb      	ldrb	r3, [r7, #15]
 80099e8:	3301      	adds	r3, #1
 80099ea:	73fb      	strb	r3, [r7, #15]
 80099ec:	7bfa      	ldrb	r2, [r7, #15]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d3af      	bcc.n	8009956 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80099f6:	2300      	movs	r3, #0
 80099f8:	73fb      	strb	r3, [r7, #15]
 80099fa:	e044      	b.n	8009a86 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80099fc:	7bfa      	ldrb	r2, [r7, #15]
 80099fe:	6879      	ldr	r1, [r7, #4]
 8009a00:	4613      	mov	r3, r2
 8009a02:	00db      	lsls	r3, r3, #3
 8009a04:	4413      	add	r3, r2
 8009a06:	009b      	lsls	r3, r3, #2
 8009a08:	440b      	add	r3, r1
 8009a0a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8009a0e:	2200      	movs	r2, #0
 8009a10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009a12:	7bfa      	ldrb	r2, [r7, #15]
 8009a14:	6879      	ldr	r1, [r7, #4]
 8009a16:	4613      	mov	r3, r2
 8009a18:	00db      	lsls	r3, r3, #3
 8009a1a:	4413      	add	r3, r2
 8009a1c:	009b      	lsls	r3, r3, #2
 8009a1e:	440b      	add	r3, r1
 8009a20:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8009a24:	7bfa      	ldrb	r2, [r7, #15]
 8009a26:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009a28:	7bfa      	ldrb	r2, [r7, #15]
 8009a2a:	6879      	ldr	r1, [r7, #4]
 8009a2c:	4613      	mov	r3, r2
 8009a2e:	00db      	lsls	r3, r3, #3
 8009a30:	4413      	add	r3, r2
 8009a32:	009b      	lsls	r3, r3, #2
 8009a34:	440b      	add	r3, r1
 8009a36:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009a3e:	7bfa      	ldrb	r2, [r7, #15]
 8009a40:	6879      	ldr	r1, [r7, #4]
 8009a42:	4613      	mov	r3, r2
 8009a44:	00db      	lsls	r3, r3, #3
 8009a46:	4413      	add	r3, r2
 8009a48:	009b      	lsls	r3, r3, #2
 8009a4a:	440b      	add	r3, r1
 8009a4c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8009a50:	2200      	movs	r2, #0
 8009a52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009a54:	7bfa      	ldrb	r2, [r7, #15]
 8009a56:	6879      	ldr	r1, [r7, #4]
 8009a58:	4613      	mov	r3, r2
 8009a5a:	00db      	lsls	r3, r3, #3
 8009a5c:	4413      	add	r3, r2
 8009a5e:	009b      	lsls	r3, r3, #2
 8009a60:	440b      	add	r3, r1
 8009a62:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009a66:	2200      	movs	r2, #0
 8009a68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009a6a:	7bfa      	ldrb	r2, [r7, #15]
 8009a6c:	6879      	ldr	r1, [r7, #4]
 8009a6e:	4613      	mov	r3, r2
 8009a70:	00db      	lsls	r3, r3, #3
 8009a72:	4413      	add	r3, r2
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	440b      	add	r3, r1
 8009a78:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009a80:	7bfb      	ldrb	r3, [r7, #15]
 8009a82:	3301      	adds	r3, #1
 8009a84:	73fb      	strb	r3, [r7, #15]
 8009a86:	7bfa      	ldrb	r2, [r7, #15]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	685b      	ldr	r3, [r3, #4]
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d3b5      	bcc.n	80099fc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	603b      	str	r3, [r7, #0]
 8009a96:	687e      	ldr	r6, [r7, #4]
 8009a98:	466d      	mov	r5, sp
 8009a9a:	f106 0410 	add.w	r4, r6, #16
 8009a9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009aa0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009aa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009aa4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009aa6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009aaa:	e885 0003 	stmia.w	r5, {r0, r1}
 8009aae:	1d33      	adds	r3, r6, #4
 8009ab0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009ab2:	6838      	ldr	r0, [r7, #0]
 8009ab4:	f005 f9f4 	bl	800eea0 <USB_DevInit>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d005      	beq.n	8009aca <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2202      	movs	r2, #2
 8009ac2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	e014      	b.n	8009af4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2200      	movs	r2, #0
 8009ace:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2201      	movs	r2, #1
 8009ad6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ade:	2b01      	cmp	r3, #1
 8009ae0:	d102      	bne.n	8009ae8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 ff38 	bl	800a958 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4618      	mov	r0, r3
 8009aee:	f005 fd17 	bl	800f520 <USB_DevDisconnect>

  return HAL_OK;
 8009af2:	2300      	movs	r3, #0
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3714      	adds	r7, #20
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009afc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009afc:	b590      	push	{r4, r7, lr}
 8009afe:	b08d      	sub	sp, #52	; 0x34
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b0a:	6a3b      	ldr	r3, [r7, #32]
 8009b0c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4618      	mov	r0, r3
 8009b14:	f005 fdb8 	bl	800f688 <USB_GetMode>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	f040 84b7 	bne.w	800a48e <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4618      	mov	r0, r3
 8009b26:	f005 fd1c 	bl	800f562 <USB_ReadInterrupts>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	f000 84ad 	beq.w	800a48c <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8009b32:	69fb      	ldr	r3, [r7, #28]
 8009b34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b38:	689b      	ldr	r3, [r3, #8]
 8009b3a:	0a1b      	lsrs	r3, r3, #8
 8009b3c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f005 fd09 	bl	800f562 <USB_ReadInterrupts>
 8009b50:	4603      	mov	r3, r0
 8009b52:	f003 0302 	and.w	r3, r3, #2
 8009b56:	2b02      	cmp	r3, #2
 8009b58:	d107      	bne.n	8009b6a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	695a      	ldr	r2, [r3, #20]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f002 0202 	and.w	r2, r2, #2
 8009b68:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f005 fcf7 	bl	800f562 <USB_ReadInterrupts>
 8009b74:	4603      	mov	r3, r0
 8009b76:	f003 0310 	and.w	r3, r3, #16
 8009b7a:	2b10      	cmp	r3, #16
 8009b7c:	d161      	bne.n	8009c42 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	699a      	ldr	r2, [r3, #24]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f022 0210 	bic.w	r2, r2, #16
 8009b8c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8009b8e:	6a3b      	ldr	r3, [r7, #32]
 8009b90:	6a1b      	ldr	r3, [r3, #32]
 8009b92:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8009b94:	69bb      	ldr	r3, [r7, #24]
 8009b96:	f003 020f 	and.w	r2, r3, #15
 8009b9a:	4613      	mov	r3, r2
 8009b9c:	00db      	lsls	r3, r3, #3
 8009b9e:	4413      	add	r3, r2
 8009ba0:	009b      	lsls	r3, r3, #2
 8009ba2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	4413      	add	r3, r2
 8009baa:	3304      	adds	r3, #4
 8009bac:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009bae:	69bb      	ldr	r3, [r7, #24]
 8009bb0:	0c5b      	lsrs	r3, r3, #17
 8009bb2:	f003 030f 	and.w	r3, r3, #15
 8009bb6:	2b02      	cmp	r3, #2
 8009bb8:	d124      	bne.n	8009c04 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009bba:	69ba      	ldr	r2, [r7, #24]
 8009bbc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8009bc0:	4013      	ands	r3, r2
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d035      	beq.n	8009c32 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8009bca:	69bb      	ldr	r3, [r7, #24]
 8009bcc:	091b      	lsrs	r3, r3, #4
 8009bce:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009bd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009bd4:	b29b      	uxth	r3, r3
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	6a38      	ldr	r0, [r7, #32]
 8009bda:	f005 fc49 	bl	800f470 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	691a      	ldr	r2, [r3, #16]
 8009be2:	69bb      	ldr	r3, [r7, #24]
 8009be4:	091b      	lsrs	r3, r3, #4
 8009be6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009bea:	441a      	add	r2, r3
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	6a1a      	ldr	r2, [r3, #32]
 8009bf4:	69bb      	ldr	r3, [r7, #24]
 8009bf6:	091b      	lsrs	r3, r3, #4
 8009bf8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009bfc:	441a      	add	r2, r3
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	621a      	str	r2, [r3, #32]
 8009c02:	e016      	b.n	8009c32 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8009c04:	69bb      	ldr	r3, [r7, #24]
 8009c06:	0c5b      	lsrs	r3, r3, #17
 8009c08:	f003 030f 	and.w	r3, r3, #15
 8009c0c:	2b06      	cmp	r3, #6
 8009c0e:	d110      	bne.n	8009c32 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009c16:	2208      	movs	r2, #8
 8009c18:	4619      	mov	r1, r3
 8009c1a:	6a38      	ldr	r0, [r7, #32]
 8009c1c:	f005 fc28 	bl	800f470 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	6a1a      	ldr	r2, [r3, #32]
 8009c24:	69bb      	ldr	r3, [r7, #24]
 8009c26:	091b      	lsrs	r3, r3, #4
 8009c28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009c2c:	441a      	add	r2, r3
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	699a      	ldr	r2, [r3, #24]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f042 0210 	orr.w	r2, r2, #16
 8009c40:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4618      	mov	r0, r3
 8009c48:	f005 fc8b 	bl	800f562 <USB_ReadInterrupts>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009c52:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009c56:	f040 80a7 	bne.w	8009da8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	4618      	mov	r0, r3
 8009c64:	f005 fc90 	bl	800f588 <USB_ReadDevAllOutEpInterrupt>
 8009c68:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8009c6a:	e099      	b.n	8009da0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8009c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c6e:	f003 0301 	and.w	r3, r3, #1
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	f000 808e 	beq.w	8009d94 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c7e:	b2d2      	uxtb	r2, r2
 8009c80:	4611      	mov	r1, r2
 8009c82:	4618      	mov	r0, r3
 8009c84:	f005 fcb4 	bl	800f5f0 <USB_ReadDevOutEPInterrupt>
 8009c88:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	f003 0301 	and.w	r3, r3, #1
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d00c      	beq.n	8009cae <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c96:	015a      	lsls	r2, r3, #5
 8009c98:	69fb      	ldr	r3, [r7, #28]
 8009c9a:	4413      	add	r3, r2
 8009c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009ca6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f000 fd27 	bl	800a6fc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	f003 0308 	and.w	r3, r3, #8
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d00c      	beq.n	8009cd2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cba:	015a      	lsls	r2, r3, #5
 8009cbc:	69fb      	ldr	r3, [r7, #28]
 8009cbe:	4413      	add	r3, r2
 8009cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cc4:	461a      	mov	r2, r3
 8009cc6:	2308      	movs	r3, #8
 8009cc8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009cca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f000 fdfd 	bl	800a8cc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	f003 0310 	and.w	r3, r3, #16
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d008      	beq.n	8009cee <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cde:	015a      	lsls	r2, r3, #5
 8009ce0:	69fb      	ldr	r3, [r7, #28]
 8009ce2:	4413      	add	r3, r2
 8009ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ce8:	461a      	mov	r2, r3
 8009cea:	2310      	movs	r3, #16
 8009cec:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	f003 0302 	and.w	r3, r3, #2
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d030      	beq.n	8009d5a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8009cf8:	6a3b      	ldr	r3, [r7, #32]
 8009cfa:	695b      	ldr	r3, [r3, #20]
 8009cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d00:	2b80      	cmp	r3, #128	; 0x80
 8009d02:	d109      	bne.n	8009d18 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8009d04:	69fb      	ldr	r3, [r7, #28]
 8009d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d0a:	685b      	ldr	r3, [r3, #4]
 8009d0c:	69fa      	ldr	r2, [r7, #28]
 8009d0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009d16:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8009d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d1a:	4613      	mov	r3, r2
 8009d1c:	00db      	lsls	r3, r3, #3
 8009d1e:	4413      	add	r3, r2
 8009d20:	009b      	lsls	r3, r3, #2
 8009d22:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009d26:	687a      	ldr	r2, [r7, #4]
 8009d28:	4413      	add	r3, r2
 8009d2a:	3304      	adds	r3, #4
 8009d2c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	78db      	ldrb	r3, [r3, #3]
 8009d32:	2b01      	cmp	r3, #1
 8009d34:	d108      	bne.n	8009d48 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d3e:	b2db      	uxtb	r3, r3
 8009d40:	4619      	mov	r1, r3
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f000 fbf0 	bl	800a528 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8009d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4a:	015a      	lsls	r2, r3, #5
 8009d4c:	69fb      	ldr	r3, [r7, #28]
 8009d4e:	4413      	add	r3, r2
 8009d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d54:	461a      	mov	r2, r3
 8009d56:	2302      	movs	r3, #2
 8009d58:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	f003 0320 	and.w	r3, r3, #32
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d008      	beq.n	8009d76 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d66:	015a      	lsls	r2, r3, #5
 8009d68:	69fb      	ldr	r3, [r7, #28]
 8009d6a:	4413      	add	r3, r2
 8009d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d70:	461a      	mov	r2, r3
 8009d72:	2320      	movs	r3, #32
 8009d74:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d009      	beq.n	8009d94 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d82:	015a      	lsls	r2, r3, #5
 8009d84:	69fb      	ldr	r3, [r7, #28]
 8009d86:	4413      	add	r3, r2
 8009d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d8c:	461a      	mov	r2, r3
 8009d8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009d92:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d96:	3301      	adds	r3, #1
 8009d98:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d9c:	085b      	lsrs	r3, r3, #1
 8009d9e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	f47f af62 	bne.w	8009c6c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4618      	mov	r0, r3
 8009dae:	f005 fbd8 	bl	800f562 <USB_ReadInterrupts>
 8009db2:	4603      	mov	r3, r0
 8009db4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009db8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009dbc:	f040 80db 	bne.w	8009f76 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f005 fbf9 	bl	800f5bc <USB_ReadDevAllInEpInterrupt>
 8009dca:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8009dd0:	e0cd      	b.n	8009f6e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd4:	f003 0301 	and.w	r3, r3, #1
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	f000 80c2 	beq.w	8009f62 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009de4:	b2d2      	uxtb	r2, r2
 8009de6:	4611      	mov	r1, r2
 8009de8:	4618      	mov	r0, r3
 8009dea:	f005 fc1f 	bl	800f62c <USB_ReadDevInEPInterrupt>
 8009dee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	f003 0301 	and.w	r3, r3, #1
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d057      	beq.n	8009eaa <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfc:	f003 030f 	and.w	r3, r3, #15
 8009e00:	2201      	movs	r2, #1
 8009e02:	fa02 f303 	lsl.w	r3, r2, r3
 8009e06:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009e08:	69fb      	ldr	r3, [r7, #28]
 8009e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	43db      	mvns	r3, r3
 8009e14:	69f9      	ldr	r1, [r7, #28]
 8009e16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e1a:	4013      	ands	r3, r2
 8009e1c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e20:	015a      	lsls	r2, r3, #5
 8009e22:	69fb      	ldr	r3, [r7, #28]
 8009e24:	4413      	add	r3, r2
 8009e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e2a:	461a      	mov	r2, r3
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	691b      	ldr	r3, [r3, #16]
 8009e34:	2b01      	cmp	r3, #1
 8009e36:	d132      	bne.n	8009e9e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8009e38:	6879      	ldr	r1, [r7, #4]
 8009e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e3c:	4613      	mov	r3, r2
 8009e3e:	00db      	lsls	r3, r3, #3
 8009e40:	4413      	add	r3, r2
 8009e42:	009b      	lsls	r3, r3, #2
 8009e44:	440b      	add	r3, r1
 8009e46:	334c      	adds	r3, #76	; 0x4c
 8009e48:	6819      	ldr	r1, [r3, #0]
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e4e:	4613      	mov	r3, r2
 8009e50:	00db      	lsls	r3, r3, #3
 8009e52:	4413      	add	r3, r2
 8009e54:	009b      	lsls	r3, r3, #2
 8009e56:	4403      	add	r3, r0
 8009e58:	3348      	adds	r3, #72	; 0x48
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4419      	add	r1, r3
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e62:	4613      	mov	r3, r2
 8009e64:	00db      	lsls	r3, r3, #3
 8009e66:	4413      	add	r3, r2
 8009e68:	009b      	lsls	r3, r3, #2
 8009e6a:	4403      	add	r3, r0
 8009e6c:	334c      	adds	r3, #76	; 0x4c
 8009e6e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8009e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d113      	bne.n	8009e9e <HAL_PCD_IRQHandler+0x3a2>
 8009e76:	6879      	ldr	r1, [r7, #4]
 8009e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e7a:	4613      	mov	r3, r2
 8009e7c:	00db      	lsls	r3, r3, #3
 8009e7e:	4413      	add	r3, r2
 8009e80:	009b      	lsls	r3, r3, #2
 8009e82:	440b      	add	r3, r1
 8009e84:	3354      	adds	r3, #84	; 0x54
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d108      	bne.n	8009e9e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6818      	ldr	r0, [r3, #0]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009e96:	461a      	mov	r2, r3
 8009e98:	2101      	movs	r1, #1
 8009e9a:	f005 fc27 	bl	800f6ec <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea0:	b2db      	uxtb	r3, r3
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f000 fb01 	bl	800a4ac <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	f003 0308 	and.w	r3, r3, #8
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d008      	beq.n	8009ec6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb6:	015a      	lsls	r2, r3, #5
 8009eb8:	69fb      	ldr	r3, [r7, #28]
 8009eba:	4413      	add	r3, r2
 8009ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ec0:	461a      	mov	r2, r3
 8009ec2:	2308      	movs	r3, #8
 8009ec4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	f003 0310 	and.w	r3, r3, #16
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d008      	beq.n	8009ee2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed2:	015a      	lsls	r2, r3, #5
 8009ed4:	69fb      	ldr	r3, [r7, #28]
 8009ed6:	4413      	add	r3, r2
 8009ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009edc:	461a      	mov	r2, r3
 8009ede:	2310      	movs	r3, #16
 8009ee0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d008      	beq.n	8009efe <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eee:	015a      	lsls	r2, r3, #5
 8009ef0:	69fb      	ldr	r3, [r7, #28]
 8009ef2:	4413      	add	r3, r2
 8009ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ef8:	461a      	mov	r2, r3
 8009efa:	2340      	movs	r3, #64	; 0x40
 8009efc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	f003 0302 	and.w	r3, r3, #2
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d023      	beq.n	8009f50 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8009f08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009f0a:	6a38      	ldr	r0, [r7, #32]
 8009f0c:	f005 f926 	bl	800f15c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8009f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f12:	4613      	mov	r3, r2
 8009f14:	00db      	lsls	r3, r3, #3
 8009f16:	4413      	add	r3, r2
 8009f18:	009b      	lsls	r3, r3, #2
 8009f1a:	3338      	adds	r3, #56	; 0x38
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	4413      	add	r3, r2
 8009f20:	3304      	adds	r3, #4
 8009f22:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	78db      	ldrb	r3, [r3, #3]
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	d108      	bne.n	8009f3e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f34:	b2db      	uxtb	r3, r3
 8009f36:	4619      	mov	r1, r3
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 fb01 	bl	800a540 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f40:	015a      	lsls	r2, r3, #5
 8009f42:	69fb      	ldr	r3, [r7, #28]
 8009f44:	4413      	add	r3, r2
 8009f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f4a:	461a      	mov	r2, r3
 8009f4c:	2302      	movs	r3, #2
 8009f4e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d003      	beq.n	8009f62 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009f5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 fb40 	bl	800a5e2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f64:	3301      	adds	r3, #1
 8009f66:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f6a:	085b      	lsrs	r3, r3, #1
 8009f6c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	f47f af2e 	bne.w	8009dd2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f005 faf1 	bl	800f562 <USB_ReadInterrupts>
 8009f80:	4603      	mov	r3, r0
 8009f82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f8a:	d122      	bne.n	8009fd2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009f8c:	69fb      	ldr	r3, [r7, #28]
 8009f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	69fa      	ldr	r2, [r7, #28]
 8009f96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f9a:	f023 0301 	bic.w	r3, r3, #1
 8009f9e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8009fa6:	2b01      	cmp	r3, #1
 8009fa8:	d108      	bne.n	8009fbc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2200      	movs	r2, #0
 8009fae:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009fb2:	2100      	movs	r1, #0
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f000 fcf3 	bl	800a9a0 <HAL_PCDEx_LPM_Callback>
 8009fba:	e002      	b.n	8009fc2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f000 faa9 	bl	800a514 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	695a      	ldr	r2, [r3, #20]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009fd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f005 fac3 	bl	800f562 <USB_ReadInterrupts>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009fe2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009fe6:	d112      	bne.n	800a00e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009fe8:	69fb      	ldr	r3, [r7, #28]
 8009fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fee:	689b      	ldr	r3, [r3, #8]
 8009ff0:	f003 0301 	and.w	r3, r3, #1
 8009ff4:	2b01      	cmp	r3, #1
 8009ff6:	d102      	bne.n	8009ffe <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f000 fa81 	bl	800a500 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	695a      	ldr	r2, [r3, #20]
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800a00c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	4618      	mov	r0, r3
 800a014:	f005 faa5 	bl	800f562 <USB_ReadInterrupts>
 800a018:	4603      	mov	r3, r0
 800a01a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a01e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a022:	d121      	bne.n	800a068 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	695a      	ldr	r2, [r3, #20]
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800a032:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d111      	bne.n	800a062 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2201      	movs	r2, #1
 800a042:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a04c:	089b      	lsrs	r3, r3, #2
 800a04e:	f003 020f 	and.w	r2, r3, #15
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800a058:	2101      	movs	r1, #1
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f000 fca0 	bl	800a9a0 <HAL_PCDEx_LPM_Callback>
 800a060:	e002      	b.n	800a068 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 fa4c 	bl	800a500 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4618      	mov	r0, r3
 800a06e:	f005 fa78 	bl	800f562 <USB_ReadInterrupts>
 800a072:	4603      	mov	r3, r0
 800a074:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a078:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a07c:	f040 80b7 	bne.w	800a1ee <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a080:	69fb      	ldr	r3, [r7, #28]
 800a082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	69fa      	ldr	r2, [r7, #28]
 800a08a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a08e:	f023 0301 	bic.w	r3, r3, #1
 800a092:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	2110      	movs	r1, #16
 800a09a:	4618      	mov	r0, r3
 800a09c:	f005 f85e 	bl	800f15c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a0a4:	e046      	b.n	800a134 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800a0a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0a8:	015a      	lsls	r2, r3, #5
 800a0aa:	69fb      	ldr	r3, [r7, #28]
 800a0ac:	4413      	add	r3, r2
 800a0ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a0b8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0bc:	015a      	lsls	r2, r3, #5
 800a0be:	69fb      	ldr	r3, [r7, #28]
 800a0c0:	4413      	add	r3, r2
 800a0c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0ca:	0151      	lsls	r1, r2, #5
 800a0cc:	69fa      	ldr	r2, [r7, #28]
 800a0ce:	440a      	add	r2, r1
 800a0d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a0d8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800a0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0dc:	015a      	lsls	r2, r3, #5
 800a0de:	69fb      	ldr	r3, [r7, #28]
 800a0e0:	4413      	add	r3, r2
 800a0e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a0ec:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a0ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f0:	015a      	lsls	r2, r3, #5
 800a0f2:	69fb      	ldr	r3, [r7, #28]
 800a0f4:	4413      	add	r3, r2
 800a0f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0fe:	0151      	lsls	r1, r2, #5
 800a100:	69fa      	ldr	r2, [r7, #28]
 800a102:	440a      	add	r2, r1
 800a104:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a108:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a10c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a110:	015a      	lsls	r2, r3, #5
 800a112:	69fb      	ldr	r3, [r7, #28]
 800a114:	4413      	add	r3, r2
 800a116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a11e:	0151      	lsls	r1, r2, #5
 800a120:	69fa      	ldr	r2, [r7, #28]
 800a122:	440a      	add	r2, r1
 800a124:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a128:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a12c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a130:	3301      	adds	r3, #1
 800a132:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	685b      	ldr	r3, [r3, #4]
 800a138:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d3b3      	bcc.n	800a0a6 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a13e:	69fb      	ldr	r3, [r7, #28]
 800a140:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a144:	69db      	ldr	r3, [r3, #28]
 800a146:	69fa      	ldr	r2, [r7, #28]
 800a148:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a14c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800a150:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a156:	2b00      	cmp	r3, #0
 800a158:	d016      	beq.n	800a188 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800a15a:	69fb      	ldr	r3, [r7, #28]
 800a15c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a160:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a164:	69fa      	ldr	r2, [r7, #28]
 800a166:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a16a:	f043 030b 	orr.w	r3, r3, #11
 800a16e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800a172:	69fb      	ldr	r3, [r7, #28]
 800a174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a17a:	69fa      	ldr	r2, [r7, #28]
 800a17c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a180:	f043 030b 	orr.w	r3, r3, #11
 800a184:	6453      	str	r3, [r2, #68]	; 0x44
 800a186:	e015      	b.n	800a1b4 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800a188:	69fb      	ldr	r3, [r7, #28]
 800a18a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a18e:	695a      	ldr	r2, [r3, #20]
 800a190:	69fb      	ldr	r3, [r7, #28]
 800a192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a196:	4619      	mov	r1, r3
 800a198:	f242 032b 	movw	r3, #8235	; 0x202b
 800a19c:	4313      	orrs	r3, r2
 800a19e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800a1a0:	69fb      	ldr	r3, [r7, #28]
 800a1a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1a6:	691b      	ldr	r3, [r3, #16]
 800a1a8:	69fa      	ldr	r2, [r7, #28]
 800a1aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a1ae:	f043 030b 	orr.w	r3, r3, #11
 800a1b2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a1b4:	69fb      	ldr	r3, [r7, #28]
 800a1b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	69fa      	ldr	r2, [r7, #28]
 800a1be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a1c2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a1c6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6818      	ldr	r0, [r3, #0]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	691b      	ldr	r3, [r3, #16]
 800a1d0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a1d8:	461a      	mov	r2, r3
 800a1da:	f005 fa87 	bl	800f6ec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	695a      	ldr	r2, [r3, #20]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800a1ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f005 f9b5 	bl	800f562 <USB_ReadInterrupts>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a1fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a202:	d124      	bne.n	800a24e <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	4618      	mov	r0, r3
 800a20a:	f005 fa4b 	bl	800f6a4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	4618      	mov	r0, r3
 800a214:	f005 f81f 	bl	800f256 <USB_GetDevSpeed>
 800a218:	4603      	mov	r3, r0
 800a21a:	461a      	mov	r2, r3
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681c      	ldr	r4, [r3, #0]
 800a224:	f001 f9ae 	bl	800b584 <HAL_RCC_GetHCLKFreq>
 800a228:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a22e:	b2db      	uxtb	r3, r3
 800a230:	461a      	mov	r2, r3
 800a232:	4620      	mov	r0, r4
 800a234:	f004 fd34 	bl	800eca0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f000 f957 	bl	800a4ec <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	695a      	ldr	r2, [r3, #20]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800a24c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	4618      	mov	r0, r3
 800a254:	f005 f985 	bl	800f562 <USB_ReadInterrupts>
 800a258:	4603      	mov	r3, r0
 800a25a:	f003 0308 	and.w	r3, r3, #8
 800a25e:	2b08      	cmp	r3, #8
 800a260:	d10a      	bne.n	800a278 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f000 f938 	bl	800a4d8 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	695a      	ldr	r2, [r3, #20]
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f002 0208 	and.w	r2, r2, #8
 800a276:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	4618      	mov	r0, r3
 800a27e:	f005 f970 	bl	800f562 <USB_ReadInterrupts>
 800a282:	4603      	mov	r3, r0
 800a284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a288:	2b80      	cmp	r3, #128	; 0x80
 800a28a:	d122      	bne.n	800a2d2 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800a28c:	6a3b      	ldr	r3, [r7, #32]
 800a28e:	699b      	ldr	r3, [r3, #24]
 800a290:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a294:	6a3b      	ldr	r3, [r7, #32]
 800a296:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a298:	2301      	movs	r3, #1
 800a29a:	627b      	str	r3, [r7, #36]	; 0x24
 800a29c:	e014      	b.n	800a2c8 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800a29e:	6879      	ldr	r1, [r7, #4]
 800a2a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2a2:	4613      	mov	r3, r2
 800a2a4:	00db      	lsls	r3, r3, #3
 800a2a6:	4413      	add	r3, r2
 800a2a8:	009b      	lsls	r3, r3, #2
 800a2aa:	440b      	add	r3, r1
 800a2ac:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800a2b0:	781b      	ldrb	r3, [r3, #0]
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d105      	bne.n	800a2c2 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800a2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b8:	b2db      	uxtb	r3, r3
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f000 f95f 	bl	800a580 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c4:	3301      	adds	r3, #1
 800a2c6:	627b      	str	r3, [r7, #36]	; 0x24
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	685b      	ldr	r3, [r3, #4]
 800a2cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	d3e5      	bcc.n	800a29e <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f005 f943 	bl	800f562 <USB_ReadInterrupts>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a2e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2e6:	d13b      	bne.n	800a360 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	627b      	str	r3, [r7, #36]	; 0x24
 800a2ec:	e02b      	b.n	800a346 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f0:	015a      	lsls	r2, r3, #5
 800a2f2:	69fb      	ldr	r3, [r7, #28]
 800a2f4:	4413      	add	r3, r2
 800a2f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a2fe:	6879      	ldr	r1, [r7, #4]
 800a300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a302:	4613      	mov	r3, r2
 800a304:	00db      	lsls	r3, r3, #3
 800a306:	4413      	add	r3, r2
 800a308:	009b      	lsls	r3, r3, #2
 800a30a:	440b      	add	r3, r1
 800a30c:	3340      	adds	r3, #64	; 0x40
 800a30e:	781b      	ldrb	r3, [r3, #0]
 800a310:	2b01      	cmp	r3, #1
 800a312:	d115      	bne.n	800a340 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800a314:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a316:	2b00      	cmp	r3, #0
 800a318:	da12      	bge.n	800a340 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800a31a:	6879      	ldr	r1, [r7, #4]
 800a31c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a31e:	4613      	mov	r3, r2
 800a320:	00db      	lsls	r3, r3, #3
 800a322:	4413      	add	r3, r2
 800a324:	009b      	lsls	r3, r3, #2
 800a326:	440b      	add	r3, r1
 800a328:	333f      	adds	r3, #63	; 0x3f
 800a32a:	2201      	movs	r2, #1
 800a32c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800a32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a330:	b2db      	uxtb	r3, r3
 800a332:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a336:	b2db      	uxtb	r3, r3
 800a338:	4619      	mov	r1, r3
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f000 f920 	bl	800a580 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a342:	3301      	adds	r3, #1
 800a344:	627b      	str	r3, [r7, #36]	; 0x24
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	685b      	ldr	r3, [r3, #4]
 800a34a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d3ce      	bcc.n	800a2ee <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	695a      	ldr	r2, [r3, #20]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800a35e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	4618      	mov	r0, r3
 800a366:	f005 f8fc 	bl	800f562 <USB_ReadInterrupts>
 800a36a:	4603      	mov	r3, r0
 800a36c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a370:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a374:	d155      	bne.n	800a422 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a376:	2301      	movs	r3, #1
 800a378:	627b      	str	r3, [r7, #36]	; 0x24
 800a37a:	e045      	b.n	800a408 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800a37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a37e:	015a      	lsls	r2, r3, #5
 800a380:	69fb      	ldr	r3, [r7, #28]
 800a382:	4413      	add	r3, r2
 800a384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a38c:	6879      	ldr	r1, [r7, #4]
 800a38e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a390:	4613      	mov	r3, r2
 800a392:	00db      	lsls	r3, r3, #3
 800a394:	4413      	add	r3, r2
 800a396:	009b      	lsls	r3, r3, #2
 800a398:	440b      	add	r3, r1
 800a39a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a39e:	781b      	ldrb	r3, [r3, #0]
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d12e      	bne.n	800a402 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a3a4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	da2b      	bge.n	800a402 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800a3aa:	69bb      	ldr	r3, [r7, #24]
 800a3ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800a3b6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d121      	bne.n	800a402 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800a3be:	6879      	ldr	r1, [r7, #4]
 800a3c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3c2:	4613      	mov	r3, r2
 800a3c4:	00db      	lsls	r3, r3, #3
 800a3c6:	4413      	add	r3, r2
 800a3c8:	009b      	lsls	r3, r3, #2
 800a3ca:	440b      	add	r3, r1
 800a3cc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800a3d4:	6a3b      	ldr	r3, [r7, #32]
 800a3d6:	699b      	ldr	r3, [r3, #24]
 800a3d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a3dc:	6a3b      	ldr	r3, [r7, #32]
 800a3de:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800a3e0:	6a3b      	ldr	r3, [r7, #32]
 800a3e2:	695b      	ldr	r3, [r3, #20]
 800a3e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d10a      	bne.n	800a402 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800a3ec:	69fb      	ldr	r3, [r7, #28]
 800a3ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	69fa      	ldr	r2, [r7, #28]
 800a3f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a3fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a3fe:	6053      	str	r3, [r2, #4]
            break;
 800a400:	e007      	b.n	800a412 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a404:	3301      	adds	r3, #1
 800a406:	627b      	str	r3, [r7, #36]	; 0x24
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a40e:	429a      	cmp	r2, r3
 800a410:	d3b4      	bcc.n	800a37c <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	695a      	ldr	r2, [r3, #20]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800a420:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	4618      	mov	r0, r3
 800a428:	f005 f89b 	bl	800f562 <USB_ReadInterrupts>
 800a42c:	4603      	mov	r3, r0
 800a42e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a436:	d10a      	bne.n	800a44e <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f000 f88d 	bl	800a558 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	695a      	ldr	r2, [r3, #20]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800a44c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	4618      	mov	r0, r3
 800a454:	f005 f885 	bl	800f562 <USB_ReadInterrupts>
 800a458:	4603      	mov	r3, r0
 800a45a:	f003 0304 	and.w	r3, r3, #4
 800a45e:	2b04      	cmp	r3, #4
 800a460:	d115      	bne.n	800a48e <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800a46a:	69bb      	ldr	r3, [r7, #24]
 800a46c:	f003 0304 	and.w	r3, r3, #4
 800a470:	2b00      	cmp	r3, #0
 800a472:	d002      	beq.n	800a47a <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f000 f879 	bl	800a56c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	6859      	ldr	r1, [r3, #4]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	69ba      	ldr	r2, [r7, #24]
 800a486:	430a      	orrs	r2, r1
 800a488:	605a      	str	r2, [r3, #4]
 800a48a:	e000      	b.n	800a48e <HAL_PCD_IRQHandler+0x992>
      return;
 800a48c:	bf00      	nop
    }
  }
}
 800a48e:	3734      	adds	r7, #52	; 0x34
 800a490:	46bd      	mov	sp, r7
 800a492:	bd90      	pop	{r4, r7, pc}

0800a494 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800a494:	b480      	push	{r7}
 800a496:	b083      	sub	sp, #12
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
 800a49c:	460b      	mov	r3, r1
 800a49e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 800a4a0:	bf00      	nop
 800a4a2:	370c      	adds	r7, #12
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr

0800a4ac <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b083      	sub	sp, #12
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	460b      	mov	r3, r1
 800a4b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 800a4b8:	bf00      	nop
 800a4ba:	370c      	adds	r7, #12
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr

0800a4c4 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b083      	sub	sp, #12
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 800a4cc:	bf00      	nop
 800a4ce:	370c      	adds	r7, #12
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr

0800a4d8 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b083      	sub	sp, #12
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 800a4e0:	bf00      	nop
 800a4e2:	370c      	adds	r7, #12
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr

0800a4ec <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b083      	sub	sp, #12
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 800a4f4:	bf00      	nop
 800a4f6:	370c      	adds	r7, #12
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr

0800a500 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800a500:	b480      	push	{r7}
 800a502:	b083      	sub	sp, #12
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 800a508:	bf00      	nop
 800a50a:	370c      	adds	r7, #12
 800a50c:	46bd      	mov	sp, r7
 800a50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a512:	4770      	bx	lr

0800a514 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800a514:	b480      	push	{r7}
 800a516:	b083      	sub	sp, #12
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 800a51c:	bf00      	nop
 800a51e:	370c      	adds	r7, #12
 800a520:	46bd      	mov	sp, r7
 800a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a526:	4770      	bx	lr

0800a528 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800a528:	b480      	push	{r7}
 800a52a:	b083      	sub	sp, #12
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	460b      	mov	r3, r1
 800a532:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 800a534:	bf00      	nop
 800a536:	370c      	adds	r7, #12
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr

0800a540 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800a540:	b480      	push	{r7}
 800a542:	b083      	sub	sp, #12
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	460b      	mov	r3, r1
 800a54a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 800a54c:	bf00      	nop
 800a54e:	370c      	adds	r7, #12
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	4770      	bx	lr

0800a558 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 800a558:	b480      	push	{r7}
 800a55a:	b083      	sub	sp, #12
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 800a560:	bf00      	nop
 800a562:	370c      	adds	r7, #12
 800a564:	46bd      	mov	sp, r7
 800a566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56a:	4770      	bx	lr

0800a56c <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 800a56c:	b480      	push	{r7}
 800a56e:	b083      	sub	sp, #12
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 800a574:	bf00      	nop
 800a576:	370c      	adds	r7, #12
 800a578:	46bd      	mov	sp, r7
 800a57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57e:	4770      	bx	lr

0800a580 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b084      	sub	sp, #16
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
 800a588:	460b      	mov	r3, r1
 800a58a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800a58c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a590:	2b00      	cmp	r3, #0
 800a592:	da0c      	bge.n	800a5ae <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a594:	78fb      	ldrb	r3, [r7, #3]
 800a596:	f003 020f 	and.w	r2, r3, #15
 800a59a:	4613      	mov	r3, r2
 800a59c:	00db      	lsls	r3, r3, #3
 800a59e:	4413      	add	r3, r2
 800a5a0:	009b      	lsls	r3, r3, #2
 800a5a2:	3338      	adds	r3, #56	; 0x38
 800a5a4:	687a      	ldr	r2, [r7, #4]
 800a5a6:	4413      	add	r3, r2
 800a5a8:	3304      	adds	r3, #4
 800a5aa:	60fb      	str	r3, [r7, #12]
 800a5ac:	e00c      	b.n	800a5c8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a5ae:	78fb      	ldrb	r3, [r7, #3]
 800a5b0:	f003 020f 	and.w	r2, r3, #15
 800a5b4:	4613      	mov	r3, r2
 800a5b6:	00db      	lsls	r3, r3, #3
 800a5b8:	4413      	add	r3, r2
 800a5ba:	009b      	lsls	r3, r3, #2
 800a5bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a5c0:	687a      	ldr	r2, [r7, #4]
 800a5c2:	4413      	add	r3, r2
 800a5c4:	3304      	adds	r3, #4
 800a5c6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	68f9      	ldr	r1, [r7, #12]
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f004 fe66 	bl	800f2a0 <USB_EPStopXfer>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	72fb      	strb	r3, [r7, #11]

  return ret;
 800a5d8:	7afb      	ldrb	r3, [r7, #11]
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3710      	adds	r7, #16
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}

0800a5e2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a5e2:	b580      	push	{r7, lr}
 800a5e4:	b08a      	sub	sp, #40	; 0x28
 800a5e6:	af02      	add	r7, sp, #8
 800a5e8:	6078      	str	r0, [r7, #4]
 800a5ea:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a5f6:	683a      	ldr	r2, [r7, #0]
 800a5f8:	4613      	mov	r3, r2
 800a5fa:	00db      	lsls	r3, r3, #3
 800a5fc:	4413      	add	r3, r2
 800a5fe:	009b      	lsls	r3, r3, #2
 800a600:	3338      	adds	r3, #56	; 0x38
 800a602:	687a      	ldr	r2, [r7, #4]
 800a604:	4413      	add	r3, r2
 800a606:	3304      	adds	r3, #4
 800a608:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	6a1a      	ldr	r2, [r3, #32]
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	699b      	ldr	r3, [r3, #24]
 800a612:	429a      	cmp	r2, r3
 800a614:	d901      	bls.n	800a61a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a616:	2301      	movs	r3, #1
 800a618:	e06c      	b.n	800a6f4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	699a      	ldr	r2, [r3, #24]
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	6a1b      	ldr	r3, [r3, #32]
 800a622:	1ad3      	subs	r3, r2, r3
 800a624:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	68db      	ldr	r3, [r3, #12]
 800a62a:	69fa      	ldr	r2, [r7, #28]
 800a62c:	429a      	cmp	r2, r3
 800a62e:	d902      	bls.n	800a636 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	68db      	ldr	r3, [r3, #12]
 800a634:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a636:	69fb      	ldr	r3, [r7, #28]
 800a638:	3303      	adds	r3, #3
 800a63a:	089b      	lsrs	r3, r3, #2
 800a63c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a63e:	e02b      	b.n	800a698 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	699a      	ldr	r2, [r3, #24]
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	6a1b      	ldr	r3, [r3, #32]
 800a648:	1ad3      	subs	r3, r2, r3
 800a64a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	68db      	ldr	r3, [r3, #12]
 800a650:	69fa      	ldr	r2, [r7, #28]
 800a652:	429a      	cmp	r2, r3
 800a654:	d902      	bls.n	800a65c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	68db      	ldr	r3, [r3, #12]
 800a65a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a65c:	69fb      	ldr	r3, [r7, #28]
 800a65e:	3303      	adds	r3, #3
 800a660:	089b      	lsrs	r3, r3, #2
 800a662:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	6919      	ldr	r1, [r3, #16]
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	b2da      	uxtb	r2, r3
 800a66c:	69fb      	ldr	r3, [r7, #28]
 800a66e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a674:	b2db      	uxtb	r3, r3
 800a676:	9300      	str	r3, [sp, #0]
 800a678:	4603      	mov	r3, r0
 800a67a:	6978      	ldr	r0, [r7, #20]
 800a67c:	f004 feba 	bl	800f3f4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	691a      	ldr	r2, [r3, #16]
 800a684:	69fb      	ldr	r3, [r7, #28]
 800a686:	441a      	add	r2, r3
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	6a1a      	ldr	r2, [r3, #32]
 800a690:	69fb      	ldr	r3, [r7, #28]
 800a692:	441a      	add	r2, r3
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	015a      	lsls	r2, r3, #5
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	4413      	add	r3, r2
 800a6a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6a4:	699b      	ldr	r3, [r3, #24]
 800a6a6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a6a8:	69ba      	ldr	r2, [r7, #24]
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d809      	bhi.n	800a6c2 <PCD_WriteEmptyTxFifo+0xe0>
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	6a1a      	ldr	r2, [r3, #32]
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a6b6:	429a      	cmp	r2, r3
 800a6b8:	d203      	bcs.n	800a6c2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	699b      	ldr	r3, [r3, #24]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d1be      	bne.n	800a640 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	699a      	ldr	r2, [r3, #24]
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	6a1b      	ldr	r3, [r3, #32]
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	d811      	bhi.n	800a6f2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	f003 030f 	and.w	r3, r3, #15
 800a6d4:	2201      	movs	r2, #1
 800a6d6:	fa02 f303 	lsl.w	r3, r2, r3
 800a6da:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	43db      	mvns	r3, r3
 800a6e8:	6939      	ldr	r1, [r7, #16]
 800a6ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a6ee:	4013      	ands	r3, r2
 800a6f0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800a6f2:	2300      	movs	r3, #0
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3720      	adds	r7, #32
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}

0800a6fc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b088      	sub	sp, #32
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a70c:	69fb      	ldr	r3, [r7, #28]
 800a70e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a710:	69fb      	ldr	r3, [r7, #28]
 800a712:	333c      	adds	r3, #60	; 0x3c
 800a714:	3304      	adds	r3, #4
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	015a      	lsls	r2, r3, #5
 800a71e:	69bb      	ldr	r3, [r7, #24]
 800a720:	4413      	add	r3, r2
 800a722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a726:	689b      	ldr	r3, [r3, #8]
 800a728:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	691b      	ldr	r3, [r3, #16]
 800a72e:	2b01      	cmp	r3, #1
 800a730:	d17b      	bne.n	800a82a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	f003 0308 	and.w	r3, r3, #8
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d015      	beq.n	800a768 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	4a61      	ldr	r2, [pc, #388]	; (800a8c4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a740:	4293      	cmp	r3, r2
 800a742:	f240 80b9 	bls.w	800a8b8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	f000 80b3 	beq.w	800a8b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	015a      	lsls	r2, r3, #5
 800a756:	69bb      	ldr	r3, [r7, #24]
 800a758:	4413      	add	r3, r2
 800a75a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a75e:	461a      	mov	r2, r3
 800a760:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a764:	6093      	str	r3, [r2, #8]
 800a766:	e0a7      	b.n	800a8b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	f003 0320 	and.w	r3, r3, #32
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d009      	beq.n	800a786 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	015a      	lsls	r2, r3, #5
 800a776:	69bb      	ldr	r3, [r7, #24]
 800a778:	4413      	add	r3, r2
 800a77a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a77e:	461a      	mov	r2, r3
 800a780:	2320      	movs	r3, #32
 800a782:	6093      	str	r3, [r2, #8]
 800a784:	e098      	b.n	800a8b8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	f040 8093 	bne.w	800a8b8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	4a4b      	ldr	r2, [pc, #300]	; (800a8c4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d90f      	bls.n	800a7ba <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d00a      	beq.n	800a7ba <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	015a      	lsls	r2, r3, #5
 800a7a8:	69bb      	ldr	r3, [r7, #24]
 800a7aa:	4413      	add	r3, r2
 800a7ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7b0:	461a      	mov	r2, r3
 800a7b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7b6:	6093      	str	r3, [r2, #8]
 800a7b8:	e07e      	b.n	800a8b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800a7ba:	683a      	ldr	r2, [r7, #0]
 800a7bc:	4613      	mov	r3, r2
 800a7be:	00db      	lsls	r3, r3, #3
 800a7c0:	4413      	add	r3, r2
 800a7c2:	009b      	lsls	r3, r3, #2
 800a7c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a7c8:	687a      	ldr	r2, [r7, #4]
 800a7ca:	4413      	add	r3, r2
 800a7cc:	3304      	adds	r3, #4
 800a7ce:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	69da      	ldr	r2, [r3, #28]
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	0159      	lsls	r1, r3, #5
 800a7d8:	69bb      	ldr	r3, [r7, #24]
 800a7da:	440b      	add	r3, r1
 800a7dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7e0:	691b      	ldr	r3, [r3, #16]
 800a7e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a7e6:	1ad2      	subs	r2, r2, r3
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d114      	bne.n	800a81c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	699b      	ldr	r3, [r3, #24]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d109      	bne.n	800a80e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6818      	ldr	r0, [r3, #0]
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a804:	461a      	mov	r2, r3
 800a806:	2101      	movs	r1, #1
 800a808:	f004 ff70 	bl	800f6ec <USB_EP0_OutStart>
 800a80c:	e006      	b.n	800a81c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	691a      	ldr	r2, [r3, #16]
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	6a1b      	ldr	r3, [r3, #32]
 800a816:	441a      	add	r2, r3
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	b2db      	uxtb	r3, r3
 800a820:	4619      	mov	r1, r3
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f7ff fe36 	bl	800a494 <HAL_PCD_DataOutStageCallback>
 800a828:	e046      	b.n	800a8b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	4a26      	ldr	r2, [pc, #152]	; (800a8c8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d124      	bne.n	800a87c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d00a      	beq.n	800a852 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	015a      	lsls	r2, r3, #5
 800a840:	69bb      	ldr	r3, [r7, #24]
 800a842:	4413      	add	r3, r2
 800a844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a848:	461a      	mov	r2, r3
 800a84a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a84e:	6093      	str	r3, [r2, #8]
 800a850:	e032      	b.n	800a8b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	f003 0320 	and.w	r3, r3, #32
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d008      	beq.n	800a86e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	015a      	lsls	r2, r3, #5
 800a860:	69bb      	ldr	r3, [r7, #24]
 800a862:	4413      	add	r3, r2
 800a864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a868:	461a      	mov	r2, r3
 800a86a:	2320      	movs	r3, #32
 800a86c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	b2db      	uxtb	r3, r3
 800a872:	4619      	mov	r1, r3
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f7ff fe0d 	bl	800a494 <HAL_PCD_DataOutStageCallback>
 800a87a:	e01d      	b.n	800a8b8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d114      	bne.n	800a8ac <PCD_EP_OutXfrComplete_int+0x1b0>
 800a882:	6879      	ldr	r1, [r7, #4]
 800a884:	683a      	ldr	r2, [r7, #0]
 800a886:	4613      	mov	r3, r2
 800a888:	00db      	lsls	r3, r3, #3
 800a88a:	4413      	add	r3, r2
 800a88c:	009b      	lsls	r3, r3, #2
 800a88e:	440b      	add	r3, r1
 800a890:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d108      	bne.n	800a8ac <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6818      	ldr	r0, [r3, #0]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	2100      	movs	r1, #0
 800a8a8:	f004 ff20 	bl	800f6ec <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	b2db      	uxtb	r3, r3
 800a8b0:	4619      	mov	r1, r3
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f7ff fdee 	bl	800a494 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800a8b8:	2300      	movs	r3, #0
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3720      	adds	r7, #32
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
 800a8c2:	bf00      	nop
 800a8c4:	4f54300a 	.word	0x4f54300a
 800a8c8:	4f54310a 	.word	0x4f54310a

0800a8cc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b086      	sub	sp, #24
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	333c      	adds	r3, #60	; 0x3c
 800a8e4:	3304      	adds	r3, #4
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	015a      	lsls	r2, r3, #5
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	4413      	add	r3, r2
 800a8f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8f6:	689b      	ldr	r3, [r3, #8]
 800a8f8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	4a15      	ldr	r2, [pc, #84]	; (800a954 <PCD_EP_OutSetupPacket_int+0x88>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d90e      	bls.n	800a920 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d009      	beq.n	800a920 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	015a      	lsls	r2, r3, #5
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	4413      	add	r3, r2
 800a914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a918:	461a      	mov	r2, r3
 800a91a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a91e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f7ff fdcf 	bl	800a4c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	4a0a      	ldr	r2, [pc, #40]	; (800a954 <PCD_EP_OutSetupPacket_int+0x88>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d90c      	bls.n	800a948 <PCD_EP_OutSetupPacket_int+0x7c>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	691b      	ldr	r3, [r3, #16]
 800a932:	2b01      	cmp	r3, #1
 800a934:	d108      	bne.n	800a948 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6818      	ldr	r0, [r3, #0]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a940:	461a      	mov	r2, r3
 800a942:	2101      	movs	r1, #1
 800a944:	f004 fed2 	bl	800f6ec <USB_EP0_OutStart>
  }

  return HAL_OK;
 800a948:	2300      	movs	r3, #0
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3718      	adds	r7, #24
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}
 800a952:	bf00      	nop
 800a954:	4f54300a 	.word	0x4f54300a

0800a958 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a958:	b480      	push	{r7}
 800a95a:	b085      	sub	sp, #20
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2201      	movs	r2, #1
 800a96a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2200      	movs	r2, #0
 800a972:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	699b      	ldr	r3, [r3, #24]
 800a97a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a986:	4b05      	ldr	r3, [pc, #20]	; (800a99c <HAL_PCDEx_ActivateLPM+0x44>)
 800a988:	4313      	orrs	r3, r2
 800a98a:	68fa      	ldr	r2, [r7, #12]
 800a98c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800a98e:	2300      	movs	r3, #0
}
 800a990:	4618      	mov	r0, r3
 800a992:	3714      	adds	r7, #20
 800a994:	46bd      	mov	sp, r7
 800a996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99a:	4770      	bx	lr
 800a99c:	10000003 	.word	0x10000003

0800a9a0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b083      	sub	sp, #12
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
 800a9a8:	460b      	mov	r3, r1
 800a9aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800a9ac:	bf00      	nop
 800a9ae:	370c      	adds	r7, #12
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr

0800a9b8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a9bc:	4b05      	ldr	r3, [pc, #20]	; (800a9d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	4a04      	ldr	r2, [pc, #16]	; (800a9d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a9c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9c6:	6013      	str	r3, [r2, #0]
}
 800a9c8:	bf00      	nop
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d0:	4770      	bx	lr
 800a9d2:	bf00      	nop
 800a9d4:	40007000 	.word	0x40007000

0800a9d8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b082      	sub	sp, #8
 800a9dc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800a9e2:	4b23      	ldr	r3, [pc, #140]	; (800aa70 <HAL_PWREx_EnableOverDrive+0x98>)
 800a9e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9e6:	4a22      	ldr	r2, [pc, #136]	; (800aa70 <HAL_PWREx_EnableOverDrive+0x98>)
 800a9e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a9ec:	6413      	str	r3, [r2, #64]	; 0x40
 800a9ee:	4b20      	ldr	r3, [pc, #128]	; (800aa70 <HAL_PWREx_EnableOverDrive+0x98>)
 800a9f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9f6:	603b      	str	r3, [r7, #0]
 800a9f8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800a9fa:	4b1e      	ldr	r3, [pc, #120]	; (800aa74 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	4a1d      	ldr	r2, [pc, #116]	; (800aa74 <HAL_PWREx_EnableOverDrive+0x9c>)
 800aa00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa04:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800aa06:	f7fa f97b 	bl	8004d00 <HAL_GetTick>
 800aa0a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800aa0c:	e009      	b.n	800aa22 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800aa0e:	f7fa f977 	bl	8004d00 <HAL_GetTick>
 800aa12:	4602      	mov	r2, r0
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	1ad3      	subs	r3, r2, r3
 800aa18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aa1c:	d901      	bls.n	800aa22 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800aa1e:	2303      	movs	r3, #3
 800aa20:	e022      	b.n	800aa68 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800aa22:	4b14      	ldr	r3, [pc, #80]	; (800aa74 <HAL_PWREx_EnableOverDrive+0x9c>)
 800aa24:	685b      	ldr	r3, [r3, #4]
 800aa26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa2e:	d1ee      	bne.n	800aa0e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800aa30:	4b10      	ldr	r3, [pc, #64]	; (800aa74 <HAL_PWREx_EnableOverDrive+0x9c>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4a0f      	ldr	r2, [pc, #60]	; (800aa74 <HAL_PWREx_EnableOverDrive+0x9c>)
 800aa36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa3a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800aa3c:	f7fa f960 	bl	8004d00 <HAL_GetTick>
 800aa40:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800aa42:	e009      	b.n	800aa58 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800aa44:	f7fa f95c 	bl	8004d00 <HAL_GetTick>
 800aa48:	4602      	mov	r2, r0
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	1ad3      	subs	r3, r2, r3
 800aa4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aa52:	d901      	bls.n	800aa58 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800aa54:	2303      	movs	r3, #3
 800aa56:	e007      	b.n	800aa68 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800aa58:	4b06      	ldr	r3, [pc, #24]	; (800aa74 <HAL_PWREx_EnableOverDrive+0x9c>)
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa64:	d1ee      	bne.n	800aa44 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800aa66:	2300      	movs	r3, #0
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	3708      	adds	r7, #8
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}
 800aa70:	40023800 	.word	0x40023800
 800aa74:	40007000 	.word	0x40007000

0800aa78 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b086      	sub	sp, #24
 800aa7c:	af02      	add	r7, sp, #8
 800aa7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800aa80:	f7fa f93e 	bl	8004d00 <HAL_GetTick>
 800aa84:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d101      	bne.n	800aa90 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	e067      	b.n	800ab60 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa96:	b2db      	uxtb	r3, r3
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d10b      	bne.n	800aab4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f7f7 fcf9 	bl	800249c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800aaaa:	f241 3188 	movw	r1, #5000	; 0x1388
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f000 f85e 	bl	800ab70 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	689b      	ldr	r3, [r3, #8]
 800aac2:	3b01      	subs	r3, #1
 800aac4:	021a      	lsls	r2, r3, #8
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	430a      	orrs	r2, r1
 800aacc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aad2:	9300      	str	r3, [sp, #0]
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	2200      	movs	r2, #0
 800aad8:	2120      	movs	r1, #32
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f000 f856 	bl	800ab8c <QSPI_WaitFlagStateUntilTimeout>
 800aae0:	4603      	mov	r3, r0
 800aae2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800aae4:	7afb      	ldrb	r3, [r7, #11]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d135      	bne.n	800ab56 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	681a      	ldr	r2, [r3, #0]
 800aaf0:	4b1d      	ldr	r3, [pc, #116]	; (800ab68 <HAL_QSPI_Init+0xf0>)
 800aaf2:	4013      	ands	r3, r2
 800aaf4:	687a      	ldr	r2, [r7, #4]
 800aaf6:	6852      	ldr	r2, [r2, #4]
 800aaf8:	0611      	lsls	r1, r2, #24
 800aafa:	687a      	ldr	r2, [r7, #4]
 800aafc:	68d2      	ldr	r2, [r2, #12]
 800aafe:	4311      	orrs	r1, r2
 800ab00:	687a      	ldr	r2, [r7, #4]
 800ab02:	69d2      	ldr	r2, [r2, #28]
 800ab04:	4311      	orrs	r1, r2
 800ab06:	687a      	ldr	r2, [r7, #4]
 800ab08:	6a12      	ldr	r2, [r2, #32]
 800ab0a:	4311      	orrs	r1, r2
 800ab0c:	687a      	ldr	r2, [r7, #4]
 800ab0e:	6812      	ldr	r2, [r2, #0]
 800ab10:	430b      	orrs	r3, r1
 800ab12:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	685a      	ldr	r2, [r3, #4]
 800ab1a:	4b14      	ldr	r3, [pc, #80]	; (800ab6c <HAL_QSPI_Init+0xf4>)
 800ab1c:	4013      	ands	r3, r2
 800ab1e:	687a      	ldr	r2, [r7, #4]
 800ab20:	6912      	ldr	r2, [r2, #16]
 800ab22:	0411      	lsls	r1, r2, #16
 800ab24:	687a      	ldr	r2, [r7, #4]
 800ab26:	6952      	ldr	r2, [r2, #20]
 800ab28:	4311      	orrs	r1, r2
 800ab2a:	687a      	ldr	r2, [r7, #4]
 800ab2c:	6992      	ldr	r2, [r2, #24]
 800ab2e:	4311      	orrs	r1, r2
 800ab30:	687a      	ldr	r2, [r7, #4]
 800ab32:	6812      	ldr	r2, [r2, #0]
 800ab34:	430b      	orrs	r3, r1
 800ab36:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	681a      	ldr	r2, [r3, #0]
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f042 0201 	orr.w	r2, r2, #1
 800ab46:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2201      	movs	r2, #1
 800ab52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800ab5e:	7afb      	ldrb	r3, [r7, #11]
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3710      	adds	r7, #16
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}
 800ab68:	00ffff2f 	.word	0x00ffff2f
 800ab6c:	ffe0f8fe 	.word	0xffe0f8fe

0800ab70 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b083      	sub	sp, #12
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	683a      	ldr	r2, [r7, #0]
 800ab7e:	649a      	str	r2, [r3, #72]	; 0x48
}
 800ab80:	bf00      	nop
 800ab82:	370c      	adds	r7, #12
 800ab84:	46bd      	mov	sp, r7
 800ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8a:	4770      	bx	lr

0800ab8c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b084      	sub	sp, #16
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	60f8      	str	r0, [r7, #12]
 800ab94:	60b9      	str	r1, [r7, #8]
 800ab96:	603b      	str	r3, [r7, #0]
 800ab98:	4613      	mov	r3, r2
 800ab9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800ab9c:	e01a      	b.n	800abd4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab9e:	69bb      	ldr	r3, [r7, #24]
 800aba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aba4:	d016      	beq.n	800abd4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aba6:	f7fa f8ab 	bl	8004d00 <HAL_GetTick>
 800abaa:	4602      	mov	r2, r0
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	1ad3      	subs	r3, r2, r3
 800abb0:	69ba      	ldr	r2, [r7, #24]
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d302      	bcc.n	800abbc <QSPI_WaitFlagStateUntilTimeout+0x30>
 800abb6:	69bb      	ldr	r3, [r7, #24]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d10b      	bne.n	800abd4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2204      	movs	r2, #4
 800abc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abc8:	f043 0201 	orr.w	r2, r3, #1
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800abd0:	2301      	movs	r3, #1
 800abd2:	e00e      	b.n	800abf2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	689a      	ldr	r2, [r3, #8]
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	4013      	ands	r3, r2
 800abde:	2b00      	cmp	r3, #0
 800abe0:	bf14      	ite	ne
 800abe2:	2301      	movne	r3, #1
 800abe4:	2300      	moveq	r3, #0
 800abe6:	b2db      	uxtb	r3, r3
 800abe8:	461a      	mov	r2, r3
 800abea:	79fb      	ldrb	r3, [r7, #7]
 800abec:	429a      	cmp	r2, r3
 800abee:	d1d6      	bne.n	800ab9e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800abf0:	2300      	movs	r3, #0
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3710      	adds	r7, #16
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}
	...

0800abfc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b086      	sub	sp, #24
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800ac04:	2300      	movs	r3, #0
 800ac06:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d101      	bne.n	800ac12 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800ac0e:	2301      	movs	r3, #1
 800ac10:	e29b      	b.n	800b14a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f003 0301 	and.w	r3, r3, #1
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	f000 8087 	beq.w	800ad2e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ac20:	4b96      	ldr	r3, [pc, #600]	; (800ae7c <HAL_RCC_OscConfig+0x280>)
 800ac22:	689b      	ldr	r3, [r3, #8]
 800ac24:	f003 030c 	and.w	r3, r3, #12
 800ac28:	2b04      	cmp	r3, #4
 800ac2a:	d00c      	beq.n	800ac46 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ac2c:	4b93      	ldr	r3, [pc, #588]	; (800ae7c <HAL_RCC_OscConfig+0x280>)
 800ac2e:	689b      	ldr	r3, [r3, #8]
 800ac30:	f003 030c 	and.w	r3, r3, #12
 800ac34:	2b08      	cmp	r3, #8
 800ac36:	d112      	bne.n	800ac5e <HAL_RCC_OscConfig+0x62>
 800ac38:	4b90      	ldr	r3, [pc, #576]	; (800ae7c <HAL_RCC_OscConfig+0x280>)
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ac40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac44:	d10b      	bne.n	800ac5e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ac46:	4b8d      	ldr	r3, [pc, #564]	; (800ae7c <HAL_RCC_OscConfig+0x280>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d06c      	beq.n	800ad2c <HAL_RCC_OscConfig+0x130>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	685b      	ldr	r3, [r3, #4]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d168      	bne.n	800ad2c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	e275      	b.n	800b14a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac66:	d106      	bne.n	800ac76 <HAL_RCC_OscConfig+0x7a>
 800ac68:	4b84      	ldr	r3, [pc, #528]	; (800ae7c <HAL_RCC_OscConfig+0x280>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	4a83      	ldr	r2, [pc, #524]	; (800ae7c <HAL_RCC_OscConfig+0x280>)
 800ac6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac72:	6013      	str	r3, [r2, #0]
 800ac74:	e02e      	b.n	800acd4 <HAL_RCC_OscConfig+0xd8>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	685b      	ldr	r3, [r3, #4]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d10c      	bne.n	800ac98 <HAL_RCC_OscConfig+0x9c>
 800ac7e:	4b7f      	ldr	r3, [pc, #508]	; (800ae7c <HAL_RCC_OscConfig+0x280>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	4a7e      	ldr	r2, [pc, #504]	; (800ae7c <HAL_RCC_OscConfig+0x280>)
 800ac84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ac88:	6013      	str	r3, [r2, #0]
 800ac8a:	4b7c      	ldr	r3, [pc, #496]	; (800ae7c <HAL_RCC_OscConfig+0x280>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	4a7b      	ldr	r2, [pc, #492]	; (800ae7c <HAL_RCC_OscConfig+0x280>)
 800ac90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ac94:	6013      	str	r3, [r2, #0]
 800ac96:	e01d      	b.n	800acd4 <HAL_RCC_OscConfig+0xd8>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	685b      	ldr	r3, [r3, #4]
 800ac9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aca0:	d10c      	bne.n	800acbc <HAL_RCC_OscConfig+0xc0>
 800aca2:	4b76      	ldr	r3, [pc, #472]	; (800ae7c <HAL_RCC_OscConfig+0x280>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	4a75      	ldr	r2, [pc, #468]	; (800ae7c <HAL_RCC_OscConfig+0x280>)
 800aca8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800acac:	6013      	str	r3, [r2, #0]
 800acae:	4b73      	ldr	r3, [pc, #460]	; (800ae7c <HAL_RCC_OscConfig+0x280>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	4a72      	ldr	r2, [pc, #456]	; (800ae7c <HAL_RCC_OscConfig+0x280>)
 800acb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800acb8:	6013      	str	r3, [r2, #0]
 800acba:	e00b      	b.n	800acd4 <HAL_RCC_OscConfig+0xd8>
 800acbc:	4b6f      	ldr	r3, [pc, #444]	; (800ae7c <HAL_RCC_OscConfig+0x280>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4a6e      	ldr	r2, [pc, #440]	; (800ae7c <HAL_RCC_OscConfig+0x280>)
 800acc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800acc6:	6013      	str	r3, [r2, #0]
 800acc8:	4b6c      	ldr	r3, [pc, #432]	; (800ae7c <HAL_RCC_OscConfig+0x280>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4a6b      	ldr	r2, [pc, #428]	; (800ae7c <HAL_RCC_OscConfig+0x280>)
 800acce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800acd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	685b      	ldr	r3, [r3, #4]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d013      	beq.n	800ad04 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acdc:	f7fa f810 	bl	8004d00 <HAL_GetTick>
 800ace0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ace2:	e008      	b.n	800acf6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ace4:	f7fa f80c 	bl	8004d00 <HAL_GetTick>
 800ace8:	4602      	mov	r2, r0
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	1ad3      	subs	r3, r2, r3
 800acee:	2b64      	cmp	r3, #100	; 0x64
 800acf0:	d901      	bls.n	800acf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800acf2:	2303      	movs	r3, #3
 800acf4:	e229      	b.n	800b14a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800acf6:	4b61      	ldr	r3, [pc, #388]	; (800ae7c <HAL_RCC_OscConfig+0x280>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d0f0      	beq.n	800ace4 <HAL_RCC_OscConfig+0xe8>
 800ad02:	e014      	b.n	800ad2e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad04:	f7f9 fffc 	bl	8004d00 <HAL_GetTick>
 800ad08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ad0a:	e008      	b.n	800ad1e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ad0c:	f7f9 fff8 	bl	8004d00 <HAL_GetTick>
 800ad10:	4602      	mov	r2, r0
 800ad12:	693b      	ldr	r3, [r7, #16]
 800ad14:	1ad3      	subs	r3, r2, r3
 800ad16:	2b64      	cmp	r3, #100	; 0x64
 800ad18:	d901      	bls.n	800ad1e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800ad1a:	2303      	movs	r3, #3
 800ad1c:	e215      	b.n	800b14a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ad1e:	4b57      	ldr	r3, [pc, #348]	; (800ae7c <HAL_RCC_OscConfig+0x280>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d1f0      	bne.n	800ad0c <HAL_RCC_OscConfig+0x110>
 800ad2a:	e000      	b.n	800ad2e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ad2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f003 0302 	and.w	r3, r3, #2
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d069      	beq.n	800ae0e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ad3a:	4b50      	ldr	r3, [pc, #320]	; (800ae7c <HAL_RCC_OscConfig+0x280>)
 800ad3c:	689b      	ldr	r3, [r3, #8]
 800ad3e:	f003 030c 	and.w	r3, r3, #12
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d00b      	beq.n	800ad5e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ad46:	4b4d      	ldr	r3, [pc, #308]	; (800ae7c <HAL_RCC_OscConfig+0x280>)
 800ad48:	689b      	ldr	r3, [r3, #8]
 800ad4a:	f003 030c 	and.w	r3, r3, #12
 800ad4e:	2b08      	cmp	r3, #8
 800ad50:	d11c      	bne.n	800ad8c <HAL_RCC_OscConfig+0x190>
 800ad52:	4b4a      	ldr	r3, [pc, #296]	; (800ae7c <HAL_RCC_OscConfig+0x280>)
 800ad54:	685b      	ldr	r3, [r3, #4]
 800ad56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d116      	bne.n	800ad8c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ad5e:	4b47      	ldr	r3, [pc, #284]	; (800ae7c <HAL_RCC_OscConfig+0x280>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f003 0302 	and.w	r3, r3, #2
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d005      	beq.n	800ad76 <HAL_RCC_OscConfig+0x17a>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	68db      	ldr	r3, [r3, #12]
 800ad6e:	2b01      	cmp	r3, #1
 800ad70:	d001      	beq.n	800ad76 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800ad72:	2301      	movs	r3, #1
 800ad74:	e1e9      	b.n	800b14a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ad76:	4b41      	ldr	r3, [pc, #260]	; (800ae7c <HAL_RCC_OscConfig+0x280>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	691b      	ldr	r3, [r3, #16]
 800ad82:	00db      	lsls	r3, r3, #3
 800ad84:	493d      	ldr	r1, [pc, #244]	; (800ae7c <HAL_RCC_OscConfig+0x280>)
 800ad86:	4313      	orrs	r3, r2
 800ad88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ad8a:	e040      	b.n	800ae0e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	68db      	ldr	r3, [r3, #12]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d023      	beq.n	800addc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ad94:	4b39      	ldr	r3, [pc, #228]	; (800ae7c <HAL_RCC_OscConfig+0x280>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	4a38      	ldr	r2, [pc, #224]	; (800ae7c <HAL_RCC_OscConfig+0x280>)
 800ad9a:	f043 0301 	orr.w	r3, r3, #1
 800ad9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ada0:	f7f9 ffae 	bl	8004d00 <HAL_GetTick>
 800ada4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ada6:	e008      	b.n	800adba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ada8:	f7f9 ffaa 	bl	8004d00 <HAL_GetTick>
 800adac:	4602      	mov	r2, r0
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	1ad3      	subs	r3, r2, r3
 800adb2:	2b02      	cmp	r3, #2
 800adb4:	d901      	bls.n	800adba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800adb6:	2303      	movs	r3, #3
 800adb8:	e1c7      	b.n	800b14a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800adba:	4b30      	ldr	r3, [pc, #192]	; (800ae7c <HAL_RCC_OscConfig+0x280>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f003 0302 	and.w	r3, r3, #2
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d0f0      	beq.n	800ada8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800adc6:	4b2d      	ldr	r3, [pc, #180]	; (800ae7c <HAL_RCC_OscConfig+0x280>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	691b      	ldr	r3, [r3, #16]
 800add2:	00db      	lsls	r3, r3, #3
 800add4:	4929      	ldr	r1, [pc, #164]	; (800ae7c <HAL_RCC_OscConfig+0x280>)
 800add6:	4313      	orrs	r3, r2
 800add8:	600b      	str	r3, [r1, #0]
 800adda:	e018      	b.n	800ae0e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800addc:	4b27      	ldr	r3, [pc, #156]	; (800ae7c <HAL_RCC_OscConfig+0x280>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4a26      	ldr	r2, [pc, #152]	; (800ae7c <HAL_RCC_OscConfig+0x280>)
 800ade2:	f023 0301 	bic.w	r3, r3, #1
 800ade6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ade8:	f7f9 ff8a 	bl	8004d00 <HAL_GetTick>
 800adec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800adee:	e008      	b.n	800ae02 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800adf0:	f7f9 ff86 	bl	8004d00 <HAL_GetTick>
 800adf4:	4602      	mov	r2, r0
 800adf6:	693b      	ldr	r3, [r7, #16]
 800adf8:	1ad3      	subs	r3, r2, r3
 800adfa:	2b02      	cmp	r3, #2
 800adfc:	d901      	bls.n	800ae02 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800adfe:	2303      	movs	r3, #3
 800ae00:	e1a3      	b.n	800b14a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ae02:	4b1e      	ldr	r3, [pc, #120]	; (800ae7c <HAL_RCC_OscConfig+0x280>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f003 0302 	and.w	r3, r3, #2
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d1f0      	bne.n	800adf0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	f003 0308 	and.w	r3, r3, #8
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d038      	beq.n	800ae8c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	695b      	ldr	r3, [r3, #20]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d019      	beq.n	800ae56 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ae22:	4b16      	ldr	r3, [pc, #88]	; (800ae7c <HAL_RCC_OscConfig+0x280>)
 800ae24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae26:	4a15      	ldr	r2, [pc, #84]	; (800ae7c <HAL_RCC_OscConfig+0x280>)
 800ae28:	f043 0301 	orr.w	r3, r3, #1
 800ae2c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae2e:	f7f9 ff67 	bl	8004d00 <HAL_GetTick>
 800ae32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ae34:	e008      	b.n	800ae48 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ae36:	f7f9 ff63 	bl	8004d00 <HAL_GetTick>
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	1ad3      	subs	r3, r2, r3
 800ae40:	2b02      	cmp	r3, #2
 800ae42:	d901      	bls.n	800ae48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800ae44:	2303      	movs	r3, #3
 800ae46:	e180      	b.n	800b14a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ae48:	4b0c      	ldr	r3, [pc, #48]	; (800ae7c <HAL_RCC_OscConfig+0x280>)
 800ae4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae4c:	f003 0302 	and.w	r3, r3, #2
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d0f0      	beq.n	800ae36 <HAL_RCC_OscConfig+0x23a>
 800ae54:	e01a      	b.n	800ae8c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ae56:	4b09      	ldr	r3, [pc, #36]	; (800ae7c <HAL_RCC_OscConfig+0x280>)
 800ae58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae5a:	4a08      	ldr	r2, [pc, #32]	; (800ae7c <HAL_RCC_OscConfig+0x280>)
 800ae5c:	f023 0301 	bic.w	r3, r3, #1
 800ae60:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae62:	f7f9 ff4d 	bl	8004d00 <HAL_GetTick>
 800ae66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ae68:	e00a      	b.n	800ae80 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ae6a:	f7f9 ff49 	bl	8004d00 <HAL_GetTick>
 800ae6e:	4602      	mov	r2, r0
 800ae70:	693b      	ldr	r3, [r7, #16]
 800ae72:	1ad3      	subs	r3, r2, r3
 800ae74:	2b02      	cmp	r3, #2
 800ae76:	d903      	bls.n	800ae80 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800ae78:	2303      	movs	r3, #3
 800ae7a:	e166      	b.n	800b14a <HAL_RCC_OscConfig+0x54e>
 800ae7c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ae80:	4b92      	ldr	r3, [pc, #584]	; (800b0cc <HAL_RCC_OscConfig+0x4d0>)
 800ae82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae84:	f003 0302 	and.w	r3, r3, #2
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d1ee      	bne.n	800ae6a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f003 0304 	and.w	r3, r3, #4
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	f000 80a4 	beq.w	800afe2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ae9a:	4b8c      	ldr	r3, [pc, #560]	; (800b0cc <HAL_RCC_OscConfig+0x4d0>)
 800ae9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d10d      	bne.n	800aec2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800aea6:	4b89      	ldr	r3, [pc, #548]	; (800b0cc <HAL_RCC_OscConfig+0x4d0>)
 800aea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeaa:	4a88      	ldr	r2, [pc, #544]	; (800b0cc <HAL_RCC_OscConfig+0x4d0>)
 800aeac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aeb0:	6413      	str	r3, [r2, #64]	; 0x40
 800aeb2:	4b86      	ldr	r3, [pc, #536]	; (800b0cc <HAL_RCC_OscConfig+0x4d0>)
 800aeb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aeba:	60bb      	str	r3, [r7, #8]
 800aebc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aebe:	2301      	movs	r3, #1
 800aec0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800aec2:	4b83      	ldr	r3, [pc, #524]	; (800b0d0 <HAL_RCC_OscConfig+0x4d4>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d118      	bne.n	800af00 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800aece:	4b80      	ldr	r3, [pc, #512]	; (800b0d0 <HAL_RCC_OscConfig+0x4d4>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	4a7f      	ldr	r2, [pc, #508]	; (800b0d0 <HAL_RCC_OscConfig+0x4d4>)
 800aed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aed8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aeda:	f7f9 ff11 	bl	8004d00 <HAL_GetTick>
 800aede:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800aee0:	e008      	b.n	800aef4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aee2:	f7f9 ff0d 	bl	8004d00 <HAL_GetTick>
 800aee6:	4602      	mov	r2, r0
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	1ad3      	subs	r3, r2, r3
 800aeec:	2b64      	cmp	r3, #100	; 0x64
 800aeee:	d901      	bls.n	800aef4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800aef0:	2303      	movs	r3, #3
 800aef2:	e12a      	b.n	800b14a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800aef4:	4b76      	ldr	r3, [pc, #472]	; (800b0d0 <HAL_RCC_OscConfig+0x4d4>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d0f0      	beq.n	800aee2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	689b      	ldr	r3, [r3, #8]
 800af04:	2b01      	cmp	r3, #1
 800af06:	d106      	bne.n	800af16 <HAL_RCC_OscConfig+0x31a>
 800af08:	4b70      	ldr	r3, [pc, #448]	; (800b0cc <HAL_RCC_OscConfig+0x4d0>)
 800af0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af0c:	4a6f      	ldr	r2, [pc, #444]	; (800b0cc <HAL_RCC_OscConfig+0x4d0>)
 800af0e:	f043 0301 	orr.w	r3, r3, #1
 800af12:	6713      	str	r3, [r2, #112]	; 0x70
 800af14:	e02d      	b.n	800af72 <HAL_RCC_OscConfig+0x376>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	689b      	ldr	r3, [r3, #8]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d10c      	bne.n	800af38 <HAL_RCC_OscConfig+0x33c>
 800af1e:	4b6b      	ldr	r3, [pc, #428]	; (800b0cc <HAL_RCC_OscConfig+0x4d0>)
 800af20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af22:	4a6a      	ldr	r2, [pc, #424]	; (800b0cc <HAL_RCC_OscConfig+0x4d0>)
 800af24:	f023 0301 	bic.w	r3, r3, #1
 800af28:	6713      	str	r3, [r2, #112]	; 0x70
 800af2a:	4b68      	ldr	r3, [pc, #416]	; (800b0cc <HAL_RCC_OscConfig+0x4d0>)
 800af2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af2e:	4a67      	ldr	r2, [pc, #412]	; (800b0cc <HAL_RCC_OscConfig+0x4d0>)
 800af30:	f023 0304 	bic.w	r3, r3, #4
 800af34:	6713      	str	r3, [r2, #112]	; 0x70
 800af36:	e01c      	b.n	800af72 <HAL_RCC_OscConfig+0x376>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	689b      	ldr	r3, [r3, #8]
 800af3c:	2b05      	cmp	r3, #5
 800af3e:	d10c      	bne.n	800af5a <HAL_RCC_OscConfig+0x35e>
 800af40:	4b62      	ldr	r3, [pc, #392]	; (800b0cc <HAL_RCC_OscConfig+0x4d0>)
 800af42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af44:	4a61      	ldr	r2, [pc, #388]	; (800b0cc <HAL_RCC_OscConfig+0x4d0>)
 800af46:	f043 0304 	orr.w	r3, r3, #4
 800af4a:	6713      	str	r3, [r2, #112]	; 0x70
 800af4c:	4b5f      	ldr	r3, [pc, #380]	; (800b0cc <HAL_RCC_OscConfig+0x4d0>)
 800af4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af50:	4a5e      	ldr	r2, [pc, #376]	; (800b0cc <HAL_RCC_OscConfig+0x4d0>)
 800af52:	f043 0301 	orr.w	r3, r3, #1
 800af56:	6713      	str	r3, [r2, #112]	; 0x70
 800af58:	e00b      	b.n	800af72 <HAL_RCC_OscConfig+0x376>
 800af5a:	4b5c      	ldr	r3, [pc, #368]	; (800b0cc <HAL_RCC_OscConfig+0x4d0>)
 800af5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af5e:	4a5b      	ldr	r2, [pc, #364]	; (800b0cc <HAL_RCC_OscConfig+0x4d0>)
 800af60:	f023 0301 	bic.w	r3, r3, #1
 800af64:	6713      	str	r3, [r2, #112]	; 0x70
 800af66:	4b59      	ldr	r3, [pc, #356]	; (800b0cc <HAL_RCC_OscConfig+0x4d0>)
 800af68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af6a:	4a58      	ldr	r2, [pc, #352]	; (800b0cc <HAL_RCC_OscConfig+0x4d0>)
 800af6c:	f023 0304 	bic.w	r3, r3, #4
 800af70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	689b      	ldr	r3, [r3, #8]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d015      	beq.n	800afa6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af7a:	f7f9 fec1 	bl	8004d00 <HAL_GetTick>
 800af7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800af80:	e00a      	b.n	800af98 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af82:	f7f9 febd 	bl	8004d00 <HAL_GetTick>
 800af86:	4602      	mov	r2, r0
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	1ad3      	subs	r3, r2, r3
 800af8c:	f241 3288 	movw	r2, #5000	; 0x1388
 800af90:	4293      	cmp	r3, r2
 800af92:	d901      	bls.n	800af98 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800af94:	2303      	movs	r3, #3
 800af96:	e0d8      	b.n	800b14a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800af98:	4b4c      	ldr	r3, [pc, #304]	; (800b0cc <HAL_RCC_OscConfig+0x4d0>)
 800af9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af9c:	f003 0302 	and.w	r3, r3, #2
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d0ee      	beq.n	800af82 <HAL_RCC_OscConfig+0x386>
 800afa4:	e014      	b.n	800afd0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800afa6:	f7f9 feab 	bl	8004d00 <HAL_GetTick>
 800afaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800afac:	e00a      	b.n	800afc4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800afae:	f7f9 fea7 	bl	8004d00 <HAL_GetTick>
 800afb2:	4602      	mov	r2, r0
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	1ad3      	subs	r3, r2, r3
 800afb8:	f241 3288 	movw	r2, #5000	; 0x1388
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d901      	bls.n	800afc4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800afc0:	2303      	movs	r3, #3
 800afc2:	e0c2      	b.n	800b14a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800afc4:	4b41      	ldr	r3, [pc, #260]	; (800b0cc <HAL_RCC_OscConfig+0x4d0>)
 800afc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afc8:	f003 0302 	and.w	r3, r3, #2
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d1ee      	bne.n	800afae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800afd0:	7dfb      	ldrb	r3, [r7, #23]
 800afd2:	2b01      	cmp	r3, #1
 800afd4:	d105      	bne.n	800afe2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800afd6:	4b3d      	ldr	r3, [pc, #244]	; (800b0cc <HAL_RCC_OscConfig+0x4d0>)
 800afd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afda:	4a3c      	ldr	r2, [pc, #240]	; (800b0cc <HAL_RCC_OscConfig+0x4d0>)
 800afdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800afe0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	699b      	ldr	r3, [r3, #24]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	f000 80ae 	beq.w	800b148 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800afec:	4b37      	ldr	r3, [pc, #220]	; (800b0cc <HAL_RCC_OscConfig+0x4d0>)
 800afee:	689b      	ldr	r3, [r3, #8]
 800aff0:	f003 030c 	and.w	r3, r3, #12
 800aff4:	2b08      	cmp	r3, #8
 800aff6:	d06d      	beq.n	800b0d4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	699b      	ldr	r3, [r3, #24]
 800affc:	2b02      	cmp	r3, #2
 800affe:	d14b      	bne.n	800b098 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b000:	4b32      	ldr	r3, [pc, #200]	; (800b0cc <HAL_RCC_OscConfig+0x4d0>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	4a31      	ldr	r2, [pc, #196]	; (800b0cc <HAL_RCC_OscConfig+0x4d0>)
 800b006:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b00a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b00c:	f7f9 fe78 	bl	8004d00 <HAL_GetTick>
 800b010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b012:	e008      	b.n	800b026 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b014:	f7f9 fe74 	bl	8004d00 <HAL_GetTick>
 800b018:	4602      	mov	r2, r0
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	1ad3      	subs	r3, r2, r3
 800b01e:	2b02      	cmp	r3, #2
 800b020:	d901      	bls.n	800b026 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800b022:	2303      	movs	r3, #3
 800b024:	e091      	b.n	800b14a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b026:	4b29      	ldr	r3, [pc, #164]	; (800b0cc <HAL_RCC_OscConfig+0x4d0>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d1f0      	bne.n	800b014 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	69da      	ldr	r2, [r3, #28]
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6a1b      	ldr	r3, [r3, #32]
 800b03a:	431a      	orrs	r2, r3
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b040:	019b      	lsls	r3, r3, #6
 800b042:	431a      	orrs	r2, r3
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b048:	085b      	lsrs	r3, r3, #1
 800b04a:	3b01      	subs	r3, #1
 800b04c:	041b      	lsls	r3, r3, #16
 800b04e:	431a      	orrs	r2, r3
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b054:	061b      	lsls	r3, r3, #24
 800b056:	431a      	orrs	r2, r3
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b05c:	071b      	lsls	r3, r3, #28
 800b05e:	491b      	ldr	r1, [pc, #108]	; (800b0cc <HAL_RCC_OscConfig+0x4d0>)
 800b060:	4313      	orrs	r3, r2
 800b062:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b064:	4b19      	ldr	r3, [pc, #100]	; (800b0cc <HAL_RCC_OscConfig+0x4d0>)
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	4a18      	ldr	r2, [pc, #96]	; (800b0cc <HAL_RCC_OscConfig+0x4d0>)
 800b06a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b06e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b070:	f7f9 fe46 	bl	8004d00 <HAL_GetTick>
 800b074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b076:	e008      	b.n	800b08a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b078:	f7f9 fe42 	bl	8004d00 <HAL_GetTick>
 800b07c:	4602      	mov	r2, r0
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	1ad3      	subs	r3, r2, r3
 800b082:	2b02      	cmp	r3, #2
 800b084:	d901      	bls.n	800b08a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800b086:	2303      	movs	r3, #3
 800b088:	e05f      	b.n	800b14a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b08a:	4b10      	ldr	r3, [pc, #64]	; (800b0cc <HAL_RCC_OscConfig+0x4d0>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b092:	2b00      	cmp	r3, #0
 800b094:	d0f0      	beq.n	800b078 <HAL_RCC_OscConfig+0x47c>
 800b096:	e057      	b.n	800b148 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b098:	4b0c      	ldr	r3, [pc, #48]	; (800b0cc <HAL_RCC_OscConfig+0x4d0>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	4a0b      	ldr	r2, [pc, #44]	; (800b0cc <HAL_RCC_OscConfig+0x4d0>)
 800b09e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b0a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0a4:	f7f9 fe2c 	bl	8004d00 <HAL_GetTick>
 800b0a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b0aa:	e008      	b.n	800b0be <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b0ac:	f7f9 fe28 	bl	8004d00 <HAL_GetTick>
 800b0b0:	4602      	mov	r2, r0
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	1ad3      	subs	r3, r2, r3
 800b0b6:	2b02      	cmp	r3, #2
 800b0b8:	d901      	bls.n	800b0be <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800b0ba:	2303      	movs	r3, #3
 800b0bc:	e045      	b.n	800b14a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b0be:	4b03      	ldr	r3, [pc, #12]	; (800b0cc <HAL_RCC_OscConfig+0x4d0>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d1f0      	bne.n	800b0ac <HAL_RCC_OscConfig+0x4b0>
 800b0ca:	e03d      	b.n	800b148 <HAL_RCC_OscConfig+0x54c>
 800b0cc:	40023800 	.word	0x40023800
 800b0d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800b0d4:	4b1f      	ldr	r3, [pc, #124]	; (800b154 <HAL_RCC_OscConfig+0x558>)
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	699b      	ldr	r3, [r3, #24]
 800b0de:	2b01      	cmp	r3, #1
 800b0e0:	d030      	beq.n	800b144 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	d129      	bne.n	800b144 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d122      	bne.n	800b144 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b0fe:	68fa      	ldr	r2, [r7, #12]
 800b100:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b104:	4013      	ands	r3, r2
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b10a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b10c:	4293      	cmp	r3, r2
 800b10e:	d119      	bne.n	800b144 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b11a:	085b      	lsrs	r3, r3, #1
 800b11c:	3b01      	subs	r3, #1
 800b11e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b120:	429a      	cmp	r2, r3
 800b122:	d10f      	bne.n	800b144 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b12e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b130:	429a      	cmp	r2, r3
 800b132:	d107      	bne.n	800b144 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b13e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b140:	429a      	cmp	r2, r3
 800b142:	d001      	beq.n	800b148 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800b144:	2301      	movs	r3, #1
 800b146:	e000      	b.n	800b14a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800b148:	2300      	movs	r3, #0
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	3718      	adds	r7, #24
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}
 800b152:	bf00      	nop
 800b154:	40023800 	.word	0x40023800

0800b158 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b084      	sub	sp, #16
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
 800b160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800b162:	2300      	movs	r3, #0
 800b164:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d101      	bne.n	800b170 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b16c:	2301      	movs	r3, #1
 800b16e:	e0d0      	b.n	800b312 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b170:	4b6a      	ldr	r3, [pc, #424]	; (800b31c <HAL_RCC_ClockConfig+0x1c4>)
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f003 030f 	and.w	r3, r3, #15
 800b178:	683a      	ldr	r2, [r7, #0]
 800b17a:	429a      	cmp	r2, r3
 800b17c:	d910      	bls.n	800b1a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b17e:	4b67      	ldr	r3, [pc, #412]	; (800b31c <HAL_RCC_ClockConfig+0x1c4>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f023 020f 	bic.w	r2, r3, #15
 800b186:	4965      	ldr	r1, [pc, #404]	; (800b31c <HAL_RCC_ClockConfig+0x1c4>)
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	4313      	orrs	r3, r2
 800b18c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b18e:	4b63      	ldr	r3, [pc, #396]	; (800b31c <HAL_RCC_ClockConfig+0x1c4>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f003 030f 	and.w	r3, r3, #15
 800b196:	683a      	ldr	r2, [r7, #0]
 800b198:	429a      	cmp	r2, r3
 800b19a:	d001      	beq.n	800b1a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b19c:	2301      	movs	r3, #1
 800b19e:	e0b8      	b.n	800b312 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f003 0302 	and.w	r3, r3, #2
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d020      	beq.n	800b1ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f003 0304 	and.w	r3, r3, #4
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d005      	beq.n	800b1c4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b1b8:	4b59      	ldr	r3, [pc, #356]	; (800b320 <HAL_RCC_ClockConfig+0x1c8>)
 800b1ba:	689b      	ldr	r3, [r3, #8]
 800b1bc:	4a58      	ldr	r2, [pc, #352]	; (800b320 <HAL_RCC_ClockConfig+0x1c8>)
 800b1be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b1c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f003 0308 	and.w	r3, r3, #8
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d005      	beq.n	800b1dc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b1d0:	4b53      	ldr	r3, [pc, #332]	; (800b320 <HAL_RCC_ClockConfig+0x1c8>)
 800b1d2:	689b      	ldr	r3, [r3, #8]
 800b1d4:	4a52      	ldr	r2, [pc, #328]	; (800b320 <HAL_RCC_ClockConfig+0x1c8>)
 800b1d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b1da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b1dc:	4b50      	ldr	r3, [pc, #320]	; (800b320 <HAL_RCC_ClockConfig+0x1c8>)
 800b1de:	689b      	ldr	r3, [r3, #8]
 800b1e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	689b      	ldr	r3, [r3, #8]
 800b1e8:	494d      	ldr	r1, [pc, #308]	; (800b320 <HAL_RCC_ClockConfig+0x1c8>)
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f003 0301 	and.w	r3, r3, #1
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d040      	beq.n	800b27c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	685b      	ldr	r3, [r3, #4]
 800b1fe:	2b01      	cmp	r3, #1
 800b200:	d107      	bne.n	800b212 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b202:	4b47      	ldr	r3, [pc, #284]	; (800b320 <HAL_RCC_ClockConfig+0x1c8>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d115      	bne.n	800b23a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b20e:	2301      	movs	r3, #1
 800b210:	e07f      	b.n	800b312 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	685b      	ldr	r3, [r3, #4]
 800b216:	2b02      	cmp	r3, #2
 800b218:	d107      	bne.n	800b22a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b21a:	4b41      	ldr	r3, [pc, #260]	; (800b320 <HAL_RCC_ClockConfig+0x1c8>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b222:	2b00      	cmp	r3, #0
 800b224:	d109      	bne.n	800b23a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b226:	2301      	movs	r3, #1
 800b228:	e073      	b.n	800b312 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b22a:	4b3d      	ldr	r3, [pc, #244]	; (800b320 <HAL_RCC_ClockConfig+0x1c8>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f003 0302 	and.w	r3, r3, #2
 800b232:	2b00      	cmp	r3, #0
 800b234:	d101      	bne.n	800b23a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b236:	2301      	movs	r3, #1
 800b238:	e06b      	b.n	800b312 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b23a:	4b39      	ldr	r3, [pc, #228]	; (800b320 <HAL_RCC_ClockConfig+0x1c8>)
 800b23c:	689b      	ldr	r3, [r3, #8]
 800b23e:	f023 0203 	bic.w	r2, r3, #3
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	685b      	ldr	r3, [r3, #4]
 800b246:	4936      	ldr	r1, [pc, #216]	; (800b320 <HAL_RCC_ClockConfig+0x1c8>)
 800b248:	4313      	orrs	r3, r2
 800b24a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b24c:	f7f9 fd58 	bl	8004d00 <HAL_GetTick>
 800b250:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b252:	e00a      	b.n	800b26a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b254:	f7f9 fd54 	bl	8004d00 <HAL_GetTick>
 800b258:	4602      	mov	r2, r0
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	1ad3      	subs	r3, r2, r3
 800b25e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b262:	4293      	cmp	r3, r2
 800b264:	d901      	bls.n	800b26a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800b266:	2303      	movs	r3, #3
 800b268:	e053      	b.n	800b312 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b26a:	4b2d      	ldr	r3, [pc, #180]	; (800b320 <HAL_RCC_ClockConfig+0x1c8>)
 800b26c:	689b      	ldr	r3, [r3, #8]
 800b26e:	f003 020c 	and.w	r2, r3, #12
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	685b      	ldr	r3, [r3, #4]
 800b276:	009b      	lsls	r3, r3, #2
 800b278:	429a      	cmp	r2, r3
 800b27a:	d1eb      	bne.n	800b254 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b27c:	4b27      	ldr	r3, [pc, #156]	; (800b31c <HAL_RCC_ClockConfig+0x1c4>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f003 030f 	and.w	r3, r3, #15
 800b284:	683a      	ldr	r2, [r7, #0]
 800b286:	429a      	cmp	r2, r3
 800b288:	d210      	bcs.n	800b2ac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b28a:	4b24      	ldr	r3, [pc, #144]	; (800b31c <HAL_RCC_ClockConfig+0x1c4>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	f023 020f 	bic.w	r2, r3, #15
 800b292:	4922      	ldr	r1, [pc, #136]	; (800b31c <HAL_RCC_ClockConfig+0x1c4>)
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	4313      	orrs	r3, r2
 800b298:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b29a:	4b20      	ldr	r3, [pc, #128]	; (800b31c <HAL_RCC_ClockConfig+0x1c4>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f003 030f 	and.w	r3, r3, #15
 800b2a2:	683a      	ldr	r2, [r7, #0]
 800b2a4:	429a      	cmp	r2, r3
 800b2a6:	d001      	beq.n	800b2ac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	e032      	b.n	800b312 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f003 0304 	and.w	r3, r3, #4
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d008      	beq.n	800b2ca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b2b8:	4b19      	ldr	r3, [pc, #100]	; (800b320 <HAL_RCC_ClockConfig+0x1c8>)
 800b2ba:	689b      	ldr	r3, [r3, #8]
 800b2bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	68db      	ldr	r3, [r3, #12]
 800b2c4:	4916      	ldr	r1, [pc, #88]	; (800b320 <HAL_RCC_ClockConfig+0x1c8>)
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f003 0308 	and.w	r3, r3, #8
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d009      	beq.n	800b2ea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b2d6:	4b12      	ldr	r3, [pc, #72]	; (800b320 <HAL_RCC_ClockConfig+0x1c8>)
 800b2d8:	689b      	ldr	r3, [r3, #8]
 800b2da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	691b      	ldr	r3, [r3, #16]
 800b2e2:	00db      	lsls	r3, r3, #3
 800b2e4:	490e      	ldr	r1, [pc, #56]	; (800b320 <HAL_RCC_ClockConfig+0x1c8>)
 800b2e6:	4313      	orrs	r3, r2
 800b2e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b2ea:	f000 f885 	bl	800b3f8 <HAL_RCC_GetSysClockFreq>
 800b2ee:	4602      	mov	r2, r0
 800b2f0:	4b0b      	ldr	r3, [pc, #44]	; (800b320 <HAL_RCC_ClockConfig+0x1c8>)
 800b2f2:	689b      	ldr	r3, [r3, #8]
 800b2f4:	091b      	lsrs	r3, r3, #4
 800b2f6:	f003 030f 	and.w	r3, r3, #15
 800b2fa:	490a      	ldr	r1, [pc, #40]	; (800b324 <HAL_RCC_ClockConfig+0x1cc>)
 800b2fc:	5ccb      	ldrb	r3, [r1, r3]
 800b2fe:	fa22 f303 	lsr.w	r3, r2, r3
 800b302:	4a09      	ldr	r2, [pc, #36]	; (800b328 <HAL_RCC_ClockConfig+0x1d0>)
 800b304:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b306:	4b09      	ldr	r3, [pc, #36]	; (800b32c <HAL_RCC_ClockConfig+0x1d4>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	4618      	mov	r0, r3
 800b30c:	f7f7 ff04 	bl	8003118 <HAL_InitTick>

  return HAL_OK;
 800b310:	2300      	movs	r3, #0
}
 800b312:	4618      	mov	r0, r3
 800b314:	3710      	adds	r7, #16
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}
 800b31a:	bf00      	nop
 800b31c:	40023c00 	.word	0x40023c00
 800b320:	40023800 	.word	0x40023800
 800b324:	080107c4 	.word	0x080107c4
 800b328:	20000000 	.word	0x20000000
 800b32c:	20000040 	.word	0x20000040

0800b330 <HAL_RCC_MCOConfig>:
  *            @arg RCC_MCODIV_4: division by 4 applied to MCOx clock
  *            @arg RCC_MCODIV_5: division by 5 applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b08c      	sub	sp, #48	; 0x30
 800b334:	af00      	add	r7, sp, #0
 800b336:	60f8      	str	r0, [r7, #12]
 800b338:	60b9      	str	r1, [r7, #8]
 800b33a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d127      	bne.n	800b392 <HAL_RCC_MCOConfig+0x62>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800b342:	4b2a      	ldr	r3, [pc, #168]	; (800b3ec <HAL_RCC_MCOConfig+0xbc>)
 800b344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b346:	4a29      	ldr	r2, [pc, #164]	; (800b3ec <HAL_RCC_MCOConfig+0xbc>)
 800b348:	f043 0301 	orr.w	r3, r3, #1
 800b34c:	6313      	str	r3, [r2, #48]	; 0x30
 800b34e:	4b27      	ldr	r3, [pc, #156]	; (800b3ec <HAL_RCC_MCOConfig+0xbc>)
 800b350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b352:	f003 0301 	and.w	r3, r3, #1
 800b356:	61bb      	str	r3, [r7, #24]
 800b358:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800b35a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b35e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b360:	2302      	movs	r3, #2
 800b362:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b364:	2303      	movs	r3, #3
 800b366:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b368:	2300      	movs	r3, #0
 800b36a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b36c:	2300      	movs	r3, #0
 800b36e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800b370:	f107 031c 	add.w	r3, r7, #28
 800b374:	4619      	mov	r1, r3
 800b376:	481e      	ldr	r0, [pc, #120]	; (800b3f0 <HAL_RCC_MCOConfig+0xc0>)
 800b378:	f7fc fde2 	bl	8007f40 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800b37c:	4b1b      	ldr	r3, [pc, #108]	; (800b3ec <HAL_RCC_MCOConfig+0xbc>)
 800b37e:	689b      	ldr	r3, [r3, #8]
 800b380:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 800b384:	68b9      	ldr	r1, [r7, #8]
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	430b      	orrs	r3, r1
 800b38a:	4918      	ldr	r1, [pc, #96]	; (800b3ec <HAL_RCC_MCOConfig+0xbc>)
 800b38c:	4313      	orrs	r3, r2
 800b38e:	608b      	str	r3, [r1, #8]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
  }
}
 800b390:	e027      	b.n	800b3e2 <HAL_RCC_MCOConfig+0xb2>
    MCO2_CLK_ENABLE();
 800b392:	4b16      	ldr	r3, [pc, #88]	; (800b3ec <HAL_RCC_MCOConfig+0xbc>)
 800b394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b396:	4a15      	ldr	r2, [pc, #84]	; (800b3ec <HAL_RCC_MCOConfig+0xbc>)
 800b398:	f043 0304 	orr.w	r3, r3, #4
 800b39c:	6313      	str	r3, [r2, #48]	; 0x30
 800b39e:	4b13      	ldr	r3, [pc, #76]	; (800b3ec <HAL_RCC_MCOConfig+0xbc>)
 800b3a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3a2:	f003 0304 	and.w	r3, r3, #4
 800b3a6:	617b      	str	r3, [r7, #20]
 800b3a8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800b3aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b3ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b3b0:	2302      	movs	r3, #2
 800b3b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b3b4:	2303      	movs	r3, #3
 800b3b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b3c0:	f107 031c 	add.w	r3, r7, #28
 800b3c4:	4619      	mov	r1, r3
 800b3c6:	480b      	ldr	r0, [pc, #44]	; (800b3f4 <HAL_RCC_MCOConfig+0xc4>)
 800b3c8:	f7fc fdba 	bl	8007f40 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
 800b3cc:	4b07      	ldr	r3, [pc, #28]	; (800b3ec <HAL_RCC_MCOConfig+0xbc>)
 800b3ce:	689b      	ldr	r3, [r3, #8]
 800b3d0:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	00d9      	lsls	r1, r3, #3
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	430b      	orrs	r3, r1
 800b3dc:	4903      	ldr	r1, [pc, #12]	; (800b3ec <HAL_RCC_MCOConfig+0xbc>)
 800b3de:	4313      	orrs	r3, r2
 800b3e0:	608b      	str	r3, [r1, #8]
}
 800b3e2:	bf00      	nop
 800b3e4:	3730      	adds	r7, #48	; 0x30
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}
 800b3ea:	bf00      	nop
 800b3ec:	40023800 	.word	0x40023800
 800b3f0:	40020000 	.word	0x40020000
 800b3f4:	40020800 	.word	0x40020800

0800b3f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b3f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b3fc:	b090      	sub	sp, #64	; 0x40
 800b3fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800b400:	2300      	movs	r3, #0
 800b402:	637b      	str	r3, [r7, #52]	; 0x34
 800b404:	2300      	movs	r3, #0
 800b406:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b408:	2300      	movs	r3, #0
 800b40a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800b40c:	2300      	movs	r3, #0
 800b40e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b410:	4b59      	ldr	r3, [pc, #356]	; (800b578 <HAL_RCC_GetSysClockFreq+0x180>)
 800b412:	689b      	ldr	r3, [r3, #8]
 800b414:	f003 030c 	and.w	r3, r3, #12
 800b418:	2b08      	cmp	r3, #8
 800b41a:	d00d      	beq.n	800b438 <HAL_RCC_GetSysClockFreq+0x40>
 800b41c:	2b08      	cmp	r3, #8
 800b41e:	f200 80a1 	bhi.w	800b564 <HAL_RCC_GetSysClockFreq+0x16c>
 800b422:	2b00      	cmp	r3, #0
 800b424:	d002      	beq.n	800b42c <HAL_RCC_GetSysClockFreq+0x34>
 800b426:	2b04      	cmp	r3, #4
 800b428:	d003      	beq.n	800b432 <HAL_RCC_GetSysClockFreq+0x3a>
 800b42a:	e09b      	b.n	800b564 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b42c:	4b53      	ldr	r3, [pc, #332]	; (800b57c <HAL_RCC_GetSysClockFreq+0x184>)
 800b42e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800b430:	e09b      	b.n	800b56a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b432:	4b53      	ldr	r3, [pc, #332]	; (800b580 <HAL_RCC_GetSysClockFreq+0x188>)
 800b434:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800b436:	e098      	b.n	800b56a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b438:	4b4f      	ldr	r3, [pc, #316]	; (800b578 <HAL_RCC_GetSysClockFreq+0x180>)
 800b43a:	685b      	ldr	r3, [r3, #4]
 800b43c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b440:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800b442:	4b4d      	ldr	r3, [pc, #308]	; (800b578 <HAL_RCC_GetSysClockFreq+0x180>)
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d028      	beq.n	800b4a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b44e:	4b4a      	ldr	r3, [pc, #296]	; (800b578 <HAL_RCC_GetSysClockFreq+0x180>)
 800b450:	685b      	ldr	r3, [r3, #4]
 800b452:	099b      	lsrs	r3, r3, #6
 800b454:	2200      	movs	r2, #0
 800b456:	623b      	str	r3, [r7, #32]
 800b458:	627a      	str	r2, [r7, #36]	; 0x24
 800b45a:	6a3b      	ldr	r3, [r7, #32]
 800b45c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800b460:	2100      	movs	r1, #0
 800b462:	4b47      	ldr	r3, [pc, #284]	; (800b580 <HAL_RCC_GetSysClockFreq+0x188>)
 800b464:	fb03 f201 	mul.w	r2, r3, r1
 800b468:	2300      	movs	r3, #0
 800b46a:	fb00 f303 	mul.w	r3, r0, r3
 800b46e:	4413      	add	r3, r2
 800b470:	4a43      	ldr	r2, [pc, #268]	; (800b580 <HAL_RCC_GetSysClockFreq+0x188>)
 800b472:	fba0 1202 	umull	r1, r2, r0, r2
 800b476:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b478:	460a      	mov	r2, r1
 800b47a:	62ba      	str	r2, [r7, #40]	; 0x28
 800b47c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b47e:	4413      	add	r3, r2
 800b480:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b484:	2200      	movs	r2, #0
 800b486:	61bb      	str	r3, [r7, #24]
 800b488:	61fa      	str	r2, [r7, #28]
 800b48a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b48e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800b492:	f7f4 ff25 	bl	80002e0 <__aeabi_uldivmod>
 800b496:	4602      	mov	r2, r0
 800b498:	460b      	mov	r3, r1
 800b49a:	4613      	mov	r3, r2
 800b49c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b49e:	e053      	b.n	800b548 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b4a0:	4b35      	ldr	r3, [pc, #212]	; (800b578 <HAL_RCC_GetSysClockFreq+0x180>)
 800b4a2:	685b      	ldr	r3, [r3, #4]
 800b4a4:	099b      	lsrs	r3, r3, #6
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	613b      	str	r3, [r7, #16]
 800b4aa:	617a      	str	r2, [r7, #20]
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800b4b2:	f04f 0b00 	mov.w	fp, #0
 800b4b6:	4652      	mov	r2, sl
 800b4b8:	465b      	mov	r3, fp
 800b4ba:	f04f 0000 	mov.w	r0, #0
 800b4be:	f04f 0100 	mov.w	r1, #0
 800b4c2:	0159      	lsls	r1, r3, #5
 800b4c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b4c8:	0150      	lsls	r0, r2, #5
 800b4ca:	4602      	mov	r2, r0
 800b4cc:	460b      	mov	r3, r1
 800b4ce:	ebb2 080a 	subs.w	r8, r2, sl
 800b4d2:	eb63 090b 	sbc.w	r9, r3, fp
 800b4d6:	f04f 0200 	mov.w	r2, #0
 800b4da:	f04f 0300 	mov.w	r3, #0
 800b4de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800b4e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800b4e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800b4ea:	ebb2 0408 	subs.w	r4, r2, r8
 800b4ee:	eb63 0509 	sbc.w	r5, r3, r9
 800b4f2:	f04f 0200 	mov.w	r2, #0
 800b4f6:	f04f 0300 	mov.w	r3, #0
 800b4fa:	00eb      	lsls	r3, r5, #3
 800b4fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b500:	00e2      	lsls	r2, r4, #3
 800b502:	4614      	mov	r4, r2
 800b504:	461d      	mov	r5, r3
 800b506:	eb14 030a 	adds.w	r3, r4, sl
 800b50a:	603b      	str	r3, [r7, #0]
 800b50c:	eb45 030b 	adc.w	r3, r5, fp
 800b510:	607b      	str	r3, [r7, #4]
 800b512:	f04f 0200 	mov.w	r2, #0
 800b516:	f04f 0300 	mov.w	r3, #0
 800b51a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b51e:	4629      	mov	r1, r5
 800b520:	028b      	lsls	r3, r1, #10
 800b522:	4621      	mov	r1, r4
 800b524:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b528:	4621      	mov	r1, r4
 800b52a:	028a      	lsls	r2, r1, #10
 800b52c:	4610      	mov	r0, r2
 800b52e:	4619      	mov	r1, r3
 800b530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b532:	2200      	movs	r2, #0
 800b534:	60bb      	str	r3, [r7, #8]
 800b536:	60fa      	str	r2, [r7, #12]
 800b538:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b53c:	f7f4 fed0 	bl	80002e0 <__aeabi_uldivmod>
 800b540:	4602      	mov	r2, r0
 800b542:	460b      	mov	r3, r1
 800b544:	4613      	mov	r3, r2
 800b546:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800b548:	4b0b      	ldr	r3, [pc, #44]	; (800b578 <HAL_RCC_GetSysClockFreq+0x180>)
 800b54a:	685b      	ldr	r3, [r3, #4]
 800b54c:	0c1b      	lsrs	r3, r3, #16
 800b54e:	f003 0303 	and.w	r3, r3, #3
 800b552:	3301      	adds	r3, #1
 800b554:	005b      	lsls	r3, r3, #1
 800b556:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800b558:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b55c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b560:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800b562:	e002      	b.n	800b56a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b564:	4b05      	ldr	r3, [pc, #20]	; (800b57c <HAL_RCC_GetSysClockFreq+0x184>)
 800b566:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800b568:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b56a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3740      	adds	r7, #64	; 0x40
 800b570:	46bd      	mov	sp, r7
 800b572:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b576:	bf00      	nop
 800b578:	40023800 	.word	0x40023800
 800b57c:	00f42400 	.word	0x00f42400
 800b580:	017d7840 	.word	0x017d7840

0800b584 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b584:	b480      	push	{r7}
 800b586:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b588:	4b03      	ldr	r3, [pc, #12]	; (800b598 <HAL_RCC_GetHCLKFreq+0x14>)
 800b58a:	681b      	ldr	r3, [r3, #0]
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	46bd      	mov	sp, r7
 800b590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b594:	4770      	bx	lr
 800b596:	bf00      	nop
 800b598:	20000000 	.word	0x20000000

0800b59c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b5a0:	f7ff fff0 	bl	800b584 <HAL_RCC_GetHCLKFreq>
 800b5a4:	4602      	mov	r2, r0
 800b5a6:	4b05      	ldr	r3, [pc, #20]	; (800b5bc <HAL_RCC_GetPCLK1Freq+0x20>)
 800b5a8:	689b      	ldr	r3, [r3, #8]
 800b5aa:	0a9b      	lsrs	r3, r3, #10
 800b5ac:	f003 0307 	and.w	r3, r3, #7
 800b5b0:	4903      	ldr	r1, [pc, #12]	; (800b5c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b5b2:	5ccb      	ldrb	r3, [r1, r3]
 800b5b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	bd80      	pop	{r7, pc}
 800b5bc:	40023800 	.word	0x40023800
 800b5c0:	080107d4 	.word	0x080107d4

0800b5c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b5c8:	f7ff ffdc 	bl	800b584 <HAL_RCC_GetHCLKFreq>
 800b5cc:	4602      	mov	r2, r0
 800b5ce:	4b05      	ldr	r3, [pc, #20]	; (800b5e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b5d0:	689b      	ldr	r3, [r3, #8]
 800b5d2:	0b5b      	lsrs	r3, r3, #13
 800b5d4:	f003 0307 	and.w	r3, r3, #7
 800b5d8:	4903      	ldr	r1, [pc, #12]	; (800b5e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b5da:	5ccb      	ldrb	r3, [r1, r3]
 800b5dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	bd80      	pop	{r7, pc}
 800b5e4:	40023800 	.word	0x40023800
 800b5e8:	080107d4 	.word	0x080107d4

0800b5ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b083      	sub	sp, #12
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	220f      	movs	r2, #15
 800b5fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b5fc:	4b12      	ldr	r3, [pc, #72]	; (800b648 <HAL_RCC_GetClockConfig+0x5c>)
 800b5fe:	689b      	ldr	r3, [r3, #8]
 800b600:	f003 0203 	and.w	r2, r3, #3
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b608:	4b0f      	ldr	r3, [pc, #60]	; (800b648 <HAL_RCC_GetClockConfig+0x5c>)
 800b60a:	689b      	ldr	r3, [r3, #8]
 800b60c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b614:	4b0c      	ldr	r3, [pc, #48]	; (800b648 <HAL_RCC_GetClockConfig+0x5c>)
 800b616:	689b      	ldr	r3, [r3, #8]
 800b618:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800b620:	4b09      	ldr	r3, [pc, #36]	; (800b648 <HAL_RCC_GetClockConfig+0x5c>)
 800b622:	689b      	ldr	r3, [r3, #8]
 800b624:	08db      	lsrs	r3, r3, #3
 800b626:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b62e:	4b07      	ldr	r3, [pc, #28]	; (800b64c <HAL_RCC_GetClockConfig+0x60>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f003 020f 	and.w	r2, r3, #15
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	601a      	str	r2, [r3, #0]
}
 800b63a:	bf00      	nop
 800b63c:	370c      	adds	r7, #12
 800b63e:	46bd      	mov	sp, r7
 800b640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b644:	4770      	bx	lr
 800b646:	bf00      	nop
 800b648:	40023800 	.word	0x40023800
 800b64c:	40023c00 	.word	0x40023c00

0800b650 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b088      	sub	sp, #32
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800b658:	2300      	movs	r3, #0
 800b65a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800b65c:	2300      	movs	r3, #0
 800b65e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800b660:	2300      	movs	r3, #0
 800b662:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800b664:	2300      	movs	r3, #0
 800b666:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800b668:	2300      	movs	r3, #0
 800b66a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	f003 0301 	and.w	r3, r3, #1
 800b674:	2b00      	cmp	r3, #0
 800b676:	d012      	beq.n	800b69e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b678:	4b69      	ldr	r3, [pc, #420]	; (800b820 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b67a:	689b      	ldr	r3, [r3, #8]
 800b67c:	4a68      	ldr	r2, [pc, #416]	; (800b820 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b67e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b682:	6093      	str	r3, [r2, #8]
 800b684:	4b66      	ldr	r3, [pc, #408]	; (800b820 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b686:	689a      	ldr	r2, [r3, #8]
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b68c:	4964      	ldr	r1, [pc, #400]	; (800b820 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b68e:	4313      	orrs	r3, r2
 800b690:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b696:	2b00      	cmp	r3, #0
 800b698:	d101      	bne.n	800b69e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800b69a:	2301      	movs	r3, #1
 800b69c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d017      	beq.n	800b6da <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b6aa:	4b5d      	ldr	r3, [pc, #372]	; (800b820 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b6ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6b8:	4959      	ldr	r1, [pc, #356]	; (800b820 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b6ba:	4313      	orrs	r3, r2
 800b6bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b6c8:	d101      	bne.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d101      	bne.n	800b6da <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d017      	beq.n	800b716 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b6e6:	4b4e      	ldr	r3, [pc, #312]	; (800b820 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b6e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6f4:	494a      	ldr	r1, [pc, #296]	; (800b820 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b6f6:	4313      	orrs	r3, r2
 800b6f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b700:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b704:	d101      	bne.n	800b70a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800b706:	2301      	movs	r3, #1
 800b708:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d101      	bne.n	800b716 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800b712:	2301      	movs	r3, #1
 800b714:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d001      	beq.n	800b726 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800b722:	2301      	movs	r3, #1
 800b724:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f003 0320 	and.w	r3, r3, #32
 800b72e:	2b00      	cmp	r3, #0
 800b730:	f000 808b 	beq.w	800b84a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b734:	4b3a      	ldr	r3, [pc, #232]	; (800b820 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b738:	4a39      	ldr	r2, [pc, #228]	; (800b820 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b73a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b73e:	6413      	str	r3, [r2, #64]	; 0x40
 800b740:	4b37      	ldr	r3, [pc, #220]	; (800b820 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b748:	60bb      	str	r3, [r7, #8]
 800b74a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b74c:	4b35      	ldr	r3, [pc, #212]	; (800b824 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	4a34      	ldr	r2, [pc, #208]	; (800b824 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b752:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b756:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b758:	f7f9 fad2 	bl	8004d00 <HAL_GetTick>
 800b75c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b75e:	e008      	b.n	800b772 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b760:	f7f9 face 	bl	8004d00 <HAL_GetTick>
 800b764:	4602      	mov	r2, r0
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	1ad3      	subs	r3, r2, r3
 800b76a:	2b64      	cmp	r3, #100	; 0x64
 800b76c:	d901      	bls.n	800b772 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800b76e:	2303      	movs	r3, #3
 800b770:	e38f      	b.n	800be92 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b772:	4b2c      	ldr	r3, [pc, #176]	; (800b824 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d0f0      	beq.n	800b760 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b77e:	4b28      	ldr	r3, [pc, #160]	; (800b820 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b786:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d035      	beq.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b796:	693a      	ldr	r2, [r7, #16]
 800b798:	429a      	cmp	r2, r3
 800b79a:	d02e      	beq.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b79c:	4b20      	ldr	r3, [pc, #128]	; (800b820 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b79e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b7a4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b7a6:	4b1e      	ldr	r3, [pc, #120]	; (800b820 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b7a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7aa:	4a1d      	ldr	r2, [pc, #116]	; (800b820 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b7ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b7b0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b7b2:	4b1b      	ldr	r3, [pc, #108]	; (800b820 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b7b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7b6:	4a1a      	ldr	r2, [pc, #104]	; (800b820 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b7b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b7bc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800b7be:	4a18      	ldr	r2, [pc, #96]	; (800b820 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b7c0:	693b      	ldr	r3, [r7, #16]
 800b7c2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b7c4:	4b16      	ldr	r3, [pc, #88]	; (800b820 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b7c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7c8:	f003 0301 	and.w	r3, r3, #1
 800b7cc:	2b01      	cmp	r3, #1
 800b7ce:	d114      	bne.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7d0:	f7f9 fa96 	bl	8004d00 <HAL_GetTick>
 800b7d4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b7d6:	e00a      	b.n	800b7ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b7d8:	f7f9 fa92 	bl	8004d00 <HAL_GetTick>
 800b7dc:	4602      	mov	r2, r0
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	1ad3      	subs	r3, r2, r3
 800b7e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	d901      	bls.n	800b7ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800b7ea:	2303      	movs	r3, #3
 800b7ec:	e351      	b.n	800be92 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b7ee:	4b0c      	ldr	r3, [pc, #48]	; (800b820 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b7f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7f2:	f003 0302 	and.w	r3, r3, #2
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d0ee      	beq.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b802:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b806:	d111      	bne.n	800b82c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800b808:	4b05      	ldr	r3, [pc, #20]	; (800b820 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b80a:	689b      	ldr	r3, [r3, #8]
 800b80c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800b814:	4b04      	ldr	r3, [pc, #16]	; (800b828 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800b816:	400b      	ands	r3, r1
 800b818:	4901      	ldr	r1, [pc, #4]	; (800b820 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b81a:	4313      	orrs	r3, r2
 800b81c:	608b      	str	r3, [r1, #8]
 800b81e:	e00b      	b.n	800b838 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800b820:	40023800 	.word	0x40023800
 800b824:	40007000 	.word	0x40007000
 800b828:	0ffffcff 	.word	0x0ffffcff
 800b82c:	4bac      	ldr	r3, [pc, #688]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b82e:	689b      	ldr	r3, [r3, #8]
 800b830:	4aab      	ldr	r2, [pc, #684]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b832:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800b836:	6093      	str	r3, [r2, #8]
 800b838:	4ba9      	ldr	r3, [pc, #676]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b83a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b844:	49a6      	ldr	r1, [pc, #664]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b846:	4313      	orrs	r3, r2
 800b848:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	f003 0310 	and.w	r3, r3, #16
 800b852:	2b00      	cmp	r3, #0
 800b854:	d010      	beq.n	800b878 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b856:	4ba2      	ldr	r3, [pc, #648]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b858:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b85c:	4aa0      	ldr	r2, [pc, #640]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b85e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b862:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800b866:	4b9e      	ldr	r3, [pc, #632]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b868:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b870:	499b      	ldr	r1, [pc, #620]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b872:	4313      	orrs	r3, r2
 800b874:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b880:	2b00      	cmp	r3, #0
 800b882:	d00a      	beq.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b884:	4b96      	ldr	r3, [pc, #600]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b88a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b892:	4993      	ldr	r1, [pc, #588]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b894:	4313      	orrs	r3, r2
 800b896:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d00a      	beq.n	800b8bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b8a6:	4b8e      	ldr	r3, [pc, #568]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b8a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b8b4:	498a      	ldr	r1, [pc, #552]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b8b6:	4313      	orrs	r3, r2
 800b8b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d00a      	beq.n	800b8de <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b8c8:	4b85      	ldr	r3, [pc, #532]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b8ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8d6:	4982      	ldr	r1, [pc, #520]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b8d8:	4313      	orrs	r3, r2
 800b8da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d00a      	beq.n	800b900 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b8ea:	4b7d      	ldr	r3, [pc, #500]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b8ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8f8:	4979      	ldr	r1, [pc, #484]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b8fa:	4313      	orrs	r3, r2
 800b8fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d00a      	beq.n	800b922 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b90c:	4b74      	ldr	r3, [pc, #464]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b90e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b912:	f023 0203 	bic.w	r2, r3, #3
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b91a:	4971      	ldr	r1, [pc, #452]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b91c:	4313      	orrs	r3, r2
 800b91e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d00a      	beq.n	800b944 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b92e:	4b6c      	ldr	r3, [pc, #432]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b934:	f023 020c 	bic.w	r2, r3, #12
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b93c:	4968      	ldr	r1, [pc, #416]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b93e:	4313      	orrs	r3, r2
 800b940:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d00a      	beq.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b950:	4b63      	ldr	r3, [pc, #396]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b956:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b95e:	4960      	ldr	r1, [pc, #384]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b960:	4313      	orrs	r3, r2
 800b962:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d00a      	beq.n	800b988 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b972:	4b5b      	ldr	r3, [pc, #364]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b978:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b980:	4957      	ldr	r1, [pc, #348]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b982:	4313      	orrs	r3, r2
 800b984:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b990:	2b00      	cmp	r3, #0
 800b992:	d00a      	beq.n	800b9aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b994:	4b52      	ldr	r3, [pc, #328]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b99a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9a2:	494f      	ldr	r1, [pc, #316]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b9a4:	4313      	orrs	r3, r2
 800b9a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d00a      	beq.n	800b9cc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800b9b6:	4b4a      	ldr	r3, [pc, #296]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b9b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9bc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9c4:	4946      	ldr	r1, [pc, #280]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b9c6:	4313      	orrs	r3, r2
 800b9c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d00a      	beq.n	800b9ee <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800b9d8:	4b41      	ldr	r3, [pc, #260]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b9da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9de:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9e6:	493e      	ldr	r1, [pc, #248]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b9e8:	4313      	orrs	r3, r2
 800b9ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d00a      	beq.n	800ba10 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800b9fa:	4b39      	ldr	r3, [pc, #228]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b9fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba00:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba08:	4935      	ldr	r1, [pc, #212]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ba0a:	4313      	orrs	r3, r2
 800ba0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d00a      	beq.n	800ba32 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ba1c:	4b30      	ldr	r3, [pc, #192]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ba1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba22:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba2a:	492d      	ldr	r1, [pc, #180]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ba2c:	4313      	orrs	r3, r2
 800ba2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d011      	beq.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800ba3e:	4b28      	ldr	r3, [pc, #160]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ba40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba44:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba4c:	4924      	ldr	r1, [pc, #144]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ba4e:	4313      	orrs	r3, r2
 800ba50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ba5c:	d101      	bne.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800ba5e:	2301      	movs	r3, #1
 800ba60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	f003 0308 	and.w	r3, r3, #8
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d001      	beq.n	800ba72 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800ba6e:	2301      	movs	r3, #1
 800ba70:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d00a      	beq.n	800ba94 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ba7e:	4b18      	ldr	r3, [pc, #96]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ba80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba84:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba8c:	4914      	ldr	r1, [pc, #80]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ba8e:	4313      	orrs	r3, r2
 800ba90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d00b      	beq.n	800bab8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800baa0:	4b0f      	ldr	r3, [pc, #60]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800baa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800baa6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bab0:	490b      	ldr	r1, [pc, #44]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800bab2:	4313      	orrs	r3, r2
 800bab4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d00f      	beq.n	800bae4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800bac4:	4b06      	ldr	r3, [pc, #24]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800bac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800baca:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bad4:	4902      	ldr	r1, [pc, #8]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800bad6:	4313      	orrs	r3, r2
 800bad8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800badc:	e002      	b.n	800bae4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800bade:	bf00      	nop
 800bae0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800baec:	2b00      	cmp	r3, #0
 800baee:	d00b      	beq.n	800bb08 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800baf0:	4b8a      	ldr	r3, [pc, #552]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800baf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800baf6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb00:	4986      	ldr	r1, [pc, #536]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bb02:	4313      	orrs	r3, r2
 800bb04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d00b      	beq.n	800bb2c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800bb14:	4b81      	ldr	r3, [pc, #516]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bb16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb1a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb24:	497d      	ldr	r1, [pc, #500]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bb26:	4313      	orrs	r3, r2
 800bb28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800bb2c:	69fb      	ldr	r3, [r7, #28]
 800bb2e:	2b01      	cmp	r3, #1
 800bb30:	d006      	beq.n	800bb40 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	f000 80d6 	beq.w	800bcec <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800bb40:	4b76      	ldr	r3, [pc, #472]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	4a75      	ldr	r2, [pc, #468]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bb46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bb4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb4c:	f7f9 f8d8 	bl	8004d00 <HAL_GetTick>
 800bb50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bb52:	e008      	b.n	800bb66 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800bb54:	f7f9 f8d4 	bl	8004d00 <HAL_GetTick>
 800bb58:	4602      	mov	r2, r0
 800bb5a:	697b      	ldr	r3, [r7, #20]
 800bb5c:	1ad3      	subs	r3, r2, r3
 800bb5e:	2b64      	cmp	r3, #100	; 0x64
 800bb60:	d901      	bls.n	800bb66 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bb62:	2303      	movs	r3, #3
 800bb64:	e195      	b.n	800be92 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bb66:	4b6d      	ldr	r3, [pc, #436]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d1f0      	bne.n	800bb54 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f003 0301 	and.w	r3, r3, #1
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d021      	beq.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d11d      	bne.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800bb86:	4b65      	ldr	r3, [pc, #404]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bb88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb8c:	0c1b      	lsrs	r3, r3, #16
 800bb8e:	f003 0303 	and.w	r3, r3, #3
 800bb92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800bb94:	4b61      	ldr	r3, [pc, #388]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bb96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb9a:	0e1b      	lsrs	r3, r3, #24
 800bb9c:	f003 030f 	and.w	r3, r3, #15
 800bba0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	685b      	ldr	r3, [r3, #4]
 800bba6:	019a      	lsls	r2, r3, #6
 800bba8:	693b      	ldr	r3, [r7, #16]
 800bbaa:	041b      	lsls	r3, r3, #16
 800bbac:	431a      	orrs	r2, r3
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	061b      	lsls	r3, r3, #24
 800bbb2:	431a      	orrs	r2, r3
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	689b      	ldr	r3, [r3, #8]
 800bbb8:	071b      	lsls	r3, r3, #28
 800bbba:	4958      	ldr	r1, [pc, #352]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bbbc:	4313      	orrs	r3, r2
 800bbbe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d004      	beq.n	800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bbd6:	d00a      	beq.n	800bbee <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d02e      	beq.n	800bc42 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbe8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bbec:	d129      	bne.n	800bc42 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800bbee:	4b4b      	ldr	r3, [pc, #300]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bbf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bbf4:	0c1b      	lsrs	r3, r3, #16
 800bbf6:	f003 0303 	and.w	r3, r3, #3
 800bbfa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800bbfc:	4b47      	ldr	r3, [pc, #284]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bbfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc02:	0f1b      	lsrs	r3, r3, #28
 800bc04:	f003 0307 	and.w	r3, r3, #7
 800bc08:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	685b      	ldr	r3, [r3, #4]
 800bc0e:	019a      	lsls	r2, r3, #6
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	041b      	lsls	r3, r3, #16
 800bc14:	431a      	orrs	r2, r3
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	68db      	ldr	r3, [r3, #12]
 800bc1a:	061b      	lsls	r3, r3, #24
 800bc1c:	431a      	orrs	r2, r3
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	071b      	lsls	r3, r3, #28
 800bc22:	493e      	ldr	r1, [pc, #248]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bc24:	4313      	orrs	r3, r2
 800bc26:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800bc2a:	4b3c      	ldr	r3, [pc, #240]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bc2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc30:	f023 021f 	bic.w	r2, r3, #31
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc38:	3b01      	subs	r3, #1
 800bc3a:	4938      	ldr	r1, [pc, #224]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bc3c:	4313      	orrs	r3, r2
 800bc3e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d01d      	beq.n	800bc8a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800bc4e:	4b33      	ldr	r3, [pc, #204]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bc50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc54:	0e1b      	lsrs	r3, r3, #24
 800bc56:	f003 030f 	and.w	r3, r3, #15
 800bc5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800bc5c:	4b2f      	ldr	r3, [pc, #188]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bc5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc62:	0f1b      	lsrs	r3, r3, #28
 800bc64:	f003 0307 	and.w	r3, r3, #7
 800bc68:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	685b      	ldr	r3, [r3, #4]
 800bc6e:	019a      	lsls	r2, r3, #6
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	691b      	ldr	r3, [r3, #16]
 800bc74:	041b      	lsls	r3, r3, #16
 800bc76:	431a      	orrs	r2, r3
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	061b      	lsls	r3, r3, #24
 800bc7c:	431a      	orrs	r2, r3
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	071b      	lsls	r3, r3, #28
 800bc82:	4926      	ldr	r1, [pc, #152]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bc84:	4313      	orrs	r3, r2
 800bc86:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d011      	beq.n	800bcba <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	685b      	ldr	r3, [r3, #4]
 800bc9a:	019a      	lsls	r2, r3, #6
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	691b      	ldr	r3, [r3, #16]
 800bca0:	041b      	lsls	r3, r3, #16
 800bca2:	431a      	orrs	r2, r3
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	68db      	ldr	r3, [r3, #12]
 800bca8:	061b      	lsls	r3, r3, #24
 800bcaa:	431a      	orrs	r2, r3
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	689b      	ldr	r3, [r3, #8]
 800bcb0:	071b      	lsls	r3, r3, #28
 800bcb2:	491a      	ldr	r1, [pc, #104]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bcb4:	4313      	orrs	r3, r2
 800bcb6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800bcba:	4b18      	ldr	r3, [pc, #96]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	4a17      	ldr	r2, [pc, #92]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bcc0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bcc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bcc6:	f7f9 f81b 	bl	8004d00 <HAL_GetTick>
 800bcca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bccc:	e008      	b.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800bcce:	f7f9 f817 	bl	8004d00 <HAL_GetTick>
 800bcd2:	4602      	mov	r2, r0
 800bcd4:	697b      	ldr	r3, [r7, #20]
 800bcd6:	1ad3      	subs	r3, r2, r3
 800bcd8:	2b64      	cmp	r3, #100	; 0x64
 800bcda:	d901      	bls.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bcdc:	2303      	movs	r3, #3
 800bcde:	e0d8      	b.n	800be92 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bce0:	4b0e      	ldr	r3, [pc, #56]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d0f0      	beq.n	800bcce <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800bcec:	69bb      	ldr	r3, [r7, #24]
 800bcee:	2b01      	cmp	r3, #1
 800bcf0:	f040 80ce 	bne.w	800be90 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800bcf4:	4b09      	ldr	r3, [pc, #36]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	4a08      	ldr	r2, [pc, #32]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bcfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bcfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bd00:	f7f8 fffe 	bl	8004d00 <HAL_GetTick>
 800bd04:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800bd06:	e00b      	b.n	800bd20 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800bd08:	f7f8 fffa 	bl	8004d00 <HAL_GetTick>
 800bd0c:	4602      	mov	r2, r0
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	1ad3      	subs	r3, r2, r3
 800bd12:	2b64      	cmp	r3, #100	; 0x64
 800bd14:	d904      	bls.n	800bd20 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bd16:	2303      	movs	r3, #3
 800bd18:	e0bb      	b.n	800be92 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800bd1a:	bf00      	nop
 800bd1c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800bd20:	4b5e      	ldr	r3, [pc, #376]	; (800be9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bd28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd2c:	d0ec      	beq.n	800bd08 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d003      	beq.n	800bd42 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d009      	beq.n	800bd56 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d02e      	beq.n	800bdac <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d12a      	bne.n	800bdac <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800bd56:	4b51      	ldr	r3, [pc, #324]	; (800be9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800bd58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd5c:	0c1b      	lsrs	r3, r3, #16
 800bd5e:	f003 0303 	and.w	r3, r3, #3
 800bd62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800bd64:	4b4d      	ldr	r3, [pc, #308]	; (800be9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800bd66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd6a:	0f1b      	lsrs	r3, r3, #28
 800bd6c:	f003 0307 	and.w	r3, r3, #7
 800bd70:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	695b      	ldr	r3, [r3, #20]
 800bd76:	019a      	lsls	r2, r3, #6
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	041b      	lsls	r3, r3, #16
 800bd7c:	431a      	orrs	r2, r3
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	699b      	ldr	r3, [r3, #24]
 800bd82:	061b      	lsls	r3, r3, #24
 800bd84:	431a      	orrs	r2, r3
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	071b      	lsls	r3, r3, #28
 800bd8a:	4944      	ldr	r1, [pc, #272]	; (800be9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800bd8c:	4313      	orrs	r3, r2
 800bd8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800bd92:	4b42      	ldr	r3, [pc, #264]	; (800be9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800bd94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd98:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bda0:	3b01      	subs	r3, #1
 800bda2:	021b      	lsls	r3, r3, #8
 800bda4:	493d      	ldr	r1, [pc, #244]	; (800be9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800bda6:	4313      	orrs	r3, r2
 800bda8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d022      	beq.n	800bdfe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bdbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bdc0:	d11d      	bne.n	800bdfe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800bdc2:	4b36      	ldr	r3, [pc, #216]	; (800be9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800bdc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdc8:	0e1b      	lsrs	r3, r3, #24
 800bdca:	f003 030f 	and.w	r3, r3, #15
 800bdce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800bdd0:	4b32      	ldr	r3, [pc, #200]	; (800be9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800bdd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdd6:	0f1b      	lsrs	r3, r3, #28
 800bdd8:	f003 0307 	and.w	r3, r3, #7
 800bddc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	695b      	ldr	r3, [r3, #20]
 800bde2:	019a      	lsls	r2, r3, #6
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	6a1b      	ldr	r3, [r3, #32]
 800bde8:	041b      	lsls	r3, r3, #16
 800bdea:	431a      	orrs	r2, r3
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	061b      	lsls	r3, r3, #24
 800bdf0:	431a      	orrs	r2, r3
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	071b      	lsls	r3, r3, #28
 800bdf6:	4929      	ldr	r1, [pc, #164]	; (800be9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800bdf8:	4313      	orrs	r3, r2
 800bdfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	f003 0308 	and.w	r3, r3, #8
 800be06:	2b00      	cmp	r3, #0
 800be08:	d028      	beq.n	800be5c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800be0a:	4b24      	ldr	r3, [pc, #144]	; (800be9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800be0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be10:	0e1b      	lsrs	r3, r3, #24
 800be12:	f003 030f 	and.w	r3, r3, #15
 800be16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800be18:	4b20      	ldr	r3, [pc, #128]	; (800be9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800be1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be1e:	0c1b      	lsrs	r3, r3, #16
 800be20:	f003 0303 	and.w	r3, r3, #3
 800be24:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	695b      	ldr	r3, [r3, #20]
 800be2a:	019a      	lsls	r2, r3, #6
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	041b      	lsls	r3, r3, #16
 800be30:	431a      	orrs	r2, r3
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	061b      	lsls	r3, r3, #24
 800be36:	431a      	orrs	r2, r3
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	69db      	ldr	r3, [r3, #28]
 800be3c:	071b      	lsls	r3, r3, #28
 800be3e:	4917      	ldr	r1, [pc, #92]	; (800be9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800be40:	4313      	orrs	r3, r2
 800be42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800be46:	4b15      	ldr	r3, [pc, #84]	; (800be9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800be48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be54:	4911      	ldr	r1, [pc, #68]	; (800be9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800be56:	4313      	orrs	r3, r2
 800be58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800be5c:	4b0f      	ldr	r3, [pc, #60]	; (800be9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	4a0e      	ldr	r2, [pc, #56]	; (800be9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800be62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be68:	f7f8 ff4a 	bl	8004d00 <HAL_GetTick>
 800be6c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800be6e:	e008      	b.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800be70:	f7f8 ff46 	bl	8004d00 <HAL_GetTick>
 800be74:	4602      	mov	r2, r0
 800be76:	697b      	ldr	r3, [r7, #20]
 800be78:	1ad3      	subs	r3, r2, r3
 800be7a:	2b64      	cmp	r3, #100	; 0x64
 800be7c:	d901      	bls.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800be7e:	2303      	movs	r3, #3
 800be80:	e007      	b.n	800be92 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800be82:	4b06      	ldr	r3, [pc, #24]	; (800be9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800be8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be8e:	d1ef      	bne.n	800be70 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800be90:	2300      	movs	r3, #0
}
 800be92:	4618      	mov	r0, r3
 800be94:	3720      	adds	r7, #32
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
 800be9a:	bf00      	nop
 800be9c:	40023800 	.word	0x40023800

0800bea0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800bea0:	b480      	push	{r7}
 800bea2:	b087      	sub	sp, #28
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800bea8:	2300      	movs	r3, #0
 800beaa:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800beac:	2300      	movs	r3, #0
 800beae:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800beb0:	2300      	movs	r3, #0
 800beb2:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800beb4:	2300      	movs	r3, #0
 800beb6:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bebe:	f040 80a4 	bne.w	800c00a <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
  {
    saiclocksource = RCC->DCKCFGR1;
 800bec2:	4ba6      	ldr	r3, [pc, #664]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800bec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bec8:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800bed0:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bed8:	f000 808a 	beq.w	800bff0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bee2:	f200 8091 	bhi.w	800c008 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800beec:	d07d      	beq.n	800bfea <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bef4:	f200 8088 	bhi.w	800c008 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d004      	beq.n	800bf08 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf04:	d039      	beq.n	800bf7a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800bf06:	e07f      	b.n	800c008 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800bf08:	4b94      	ldr	r3, [pc, #592]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800bf0a:	685b      	ldr	r3, [r3, #4]
 800bf0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d108      	bne.n	800bf26 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800bf14:	4b91      	ldr	r3, [pc, #580]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800bf16:	685b      	ldr	r3, [r3, #4]
 800bf18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bf1c:	4a90      	ldr	r2, [pc, #576]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800bf1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf22:	613b      	str	r3, [r7, #16]
 800bf24:	e007      	b.n	800bf36 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800bf26:	4b8d      	ldr	r3, [pc, #564]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800bf28:	685b      	ldr	r3, [r3, #4]
 800bf2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bf2e:	4a8d      	ldr	r2, [pc, #564]	; (800c164 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800bf30:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf34:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800bf36:	4b89      	ldr	r3, [pc, #548]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800bf38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf3c:	0e1b      	lsrs	r3, r3, #24
 800bf3e:	f003 030f 	and.w	r3, r3, #15
 800bf42:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800bf44:	4b85      	ldr	r3, [pc, #532]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800bf46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf4a:	099b      	lsrs	r3, r3, #6
 800bf4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf50:	693a      	ldr	r2, [r7, #16]
 800bf52:	fb03 f202 	mul.w	r2, r3, r2
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf5c:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800bf5e:	4b7f      	ldr	r3, [pc, #508]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800bf60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf64:	0a1b      	lsrs	r3, r3, #8
 800bf66:	f003 031f 	and.w	r3, r3, #31
 800bf6a:	3301      	adds	r3, #1
 800bf6c:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800bf6e:	697a      	ldr	r2, [r7, #20]
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf76:	617b      	str	r3, [r7, #20]
        break;
 800bf78:	e047      	b.n	800c00a <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800bf7a:	4b78      	ldr	r3, [pc, #480]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800bf7c:	685b      	ldr	r3, [r3, #4]
 800bf7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d108      	bne.n	800bf98 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800bf86:	4b75      	ldr	r3, [pc, #468]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800bf88:	685b      	ldr	r3, [r3, #4]
 800bf8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bf8e:	4a74      	ldr	r2, [pc, #464]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800bf90:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf94:	613b      	str	r3, [r7, #16]
 800bf96:	e007      	b.n	800bfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800bf98:	4b70      	ldr	r3, [pc, #448]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800bf9a:	685b      	ldr	r3, [r3, #4]
 800bf9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bfa0:	4a70      	ldr	r2, [pc, #448]	; (800c164 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800bfa2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfa6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800bfa8:	4b6c      	ldr	r3, [pc, #432]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800bfaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfae:	0e1b      	lsrs	r3, r3, #24
 800bfb0:	f003 030f 	and.w	r3, r3, #15
 800bfb4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800bfb6:	4b69      	ldr	r3, [pc, #420]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800bfb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfbc:	099b      	lsrs	r3, r3, #6
 800bfbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfc2:	693a      	ldr	r2, [r7, #16]
 800bfc4:	fb03 f202 	mul.w	r2, r3, r2
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfce:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800bfd0:	4b62      	ldr	r3, [pc, #392]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800bfd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfd6:	f003 031f 	and.w	r3, r3, #31
 800bfda:	3301      	adds	r3, #1
 800bfdc:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800bfde:	697a      	ldr	r2, [r7, #20]
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfe6:	617b      	str	r3, [r7, #20]
        break;
 800bfe8:	e00f      	b.n	800c00a <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        frequency = EXTERNAL_CLOCK_VALUE;
 800bfea:	4b5f      	ldr	r3, [pc, #380]	; (800c168 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800bfec:	617b      	str	r3, [r7, #20]
        break;
 800bfee:	e00c      	b.n	800c00a <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800bff0:	4b5a      	ldr	r3, [pc, #360]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800bff2:	685b      	ldr	r3, [r3, #4]
 800bff4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d102      	bne.n	800c002 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 800bffc:	4b58      	ldr	r3, [pc, #352]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800bffe:	617b      	str	r3, [r7, #20]
        break;
 800c000:	e003      	b.n	800c00a <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
          frequency = HSE_VALUE;
 800c002:	4b58      	ldr	r3, [pc, #352]	; (800c164 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800c004:	617b      	str	r3, [r7, #20]
        break;
 800c006:	e000      	b.n	800c00a <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        break;
 800c008:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c010:	f040 80ad 	bne.w	800c16e <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
  {
    saiclocksource = RCC->DCKCFGR1;
 800c014:	4b51      	ldr	r3, [pc, #324]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c016:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c01a:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800c022:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c02a:	f000 808a 	beq.w	800c142 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c034:	f200 809a 	bhi.w	800c16c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c03e:	d07d      	beq.n	800c13c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c046:	f200 8091 	bhi.w	800c16c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 800c04a:	68bb      	ldr	r3, [r7, #8]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d004      	beq.n	800c05a <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c056:	d039      	beq.n	800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800c058:	e088      	b.n	800c16c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c05a:	4b40      	ldr	r3, [pc, #256]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c05c:	685b      	ldr	r3, [r3, #4]
 800c05e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c062:	2b00      	cmp	r3, #0
 800c064:	d108      	bne.n	800c078 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c066:	4b3d      	ldr	r3, [pc, #244]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c068:	685b      	ldr	r3, [r3, #4]
 800c06a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c06e:	4a3c      	ldr	r2, [pc, #240]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800c070:	fbb2 f3f3 	udiv	r3, r2, r3
 800c074:	613b      	str	r3, [r7, #16]
 800c076:	e007      	b.n	800c088 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c078:	4b38      	ldr	r3, [pc, #224]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c07a:	685b      	ldr	r3, [r3, #4]
 800c07c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c080:	4a38      	ldr	r2, [pc, #224]	; (800c164 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800c082:	fbb2 f3f3 	udiv	r3, r2, r3
 800c086:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800c088:	4b34      	ldr	r3, [pc, #208]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c08a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c08e:	0e1b      	lsrs	r3, r3, #24
 800c090:	f003 030f 	and.w	r3, r3, #15
 800c094:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800c096:	4b31      	ldr	r3, [pc, #196]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c09c:	099b      	lsrs	r3, r3, #6
 800c09e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0a2:	693a      	ldr	r2, [r7, #16]
 800c0a4:	fb03 f202 	mul.w	r2, r3, r2
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0ae:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800c0b0:	4b2a      	ldr	r3, [pc, #168]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c0b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0b6:	0a1b      	lsrs	r3, r3, #8
 800c0b8:	f003 031f 	and.w	r3, r3, #31
 800c0bc:	3301      	adds	r3, #1
 800c0be:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c0c0:	697a      	ldr	r2, [r7, #20]
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0c8:	617b      	str	r3, [r7, #20]
        break;
 800c0ca:	e050      	b.n	800c16e <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c0cc:	4b23      	ldr	r3, [pc, #140]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c0ce:	685b      	ldr	r3, [r3, #4]
 800c0d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d108      	bne.n	800c0ea <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c0d8:	4b20      	ldr	r3, [pc, #128]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c0da:	685b      	ldr	r3, [r3, #4]
 800c0dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c0e0:	4a1f      	ldr	r2, [pc, #124]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800c0e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0e6:	613b      	str	r3, [r7, #16]
 800c0e8:	e007      	b.n	800c0fa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c0ea:	4b1c      	ldr	r3, [pc, #112]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c0ec:	685b      	ldr	r3, [r3, #4]
 800c0ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c0f2:	4a1c      	ldr	r2, [pc, #112]	; (800c164 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800c0f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0f8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800c0fa:	4b18      	ldr	r3, [pc, #96]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c0fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c100:	0e1b      	lsrs	r3, r3, #24
 800c102:	f003 030f 	and.w	r3, r3, #15
 800c106:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800c108:	4b14      	ldr	r3, [pc, #80]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c10a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c10e:	099b      	lsrs	r3, r3, #6
 800c110:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c114:	693a      	ldr	r2, [r7, #16]
 800c116:	fb03 f202 	mul.w	r2, r3, r2
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c120:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800c122:	4b0e      	ldr	r3, [pc, #56]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c124:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c128:	f003 031f 	and.w	r3, r3, #31
 800c12c:	3301      	adds	r3, #1
 800c12e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c130:	697a      	ldr	r2, [r7, #20]
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	fbb2 f3f3 	udiv	r3, r2, r3
 800c138:	617b      	str	r3, [r7, #20]
        break;
 800c13a:	e018      	b.n	800c16e <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
        frequency = EXTERNAL_CLOCK_VALUE;
 800c13c:	4b0a      	ldr	r3, [pc, #40]	; (800c168 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800c13e:	617b      	str	r3, [r7, #20]
        break;
 800c140:	e015      	b.n	800c16e <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c142:	4b06      	ldr	r3, [pc, #24]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c144:	685b      	ldr	r3, [r3, #4]
 800c146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d102      	bne.n	800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
          frequency = HSI_VALUE;
 800c14e:	4b04      	ldr	r3, [pc, #16]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800c150:	617b      	str	r3, [r7, #20]
        break;
 800c152:	e00c      	b.n	800c16e <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
          frequency = HSE_VALUE;
 800c154:	4b03      	ldr	r3, [pc, #12]	; (800c164 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800c156:	617b      	str	r3, [r7, #20]
        break;
 800c158:	e009      	b.n	800c16e <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
 800c15a:	bf00      	nop
 800c15c:	40023800 	.word	0x40023800
 800c160:	00f42400 	.word	0x00f42400
 800c164:	017d7840 	.word	0x017d7840
 800c168:	00bb8000 	.word	0x00bb8000
        break;
 800c16c:	bf00      	nop
      }
    }
  }

  return frequency;
 800c16e:	697b      	ldr	r3, [r7, #20]
}
 800c170:	4618      	mov	r0, r3
 800c172:	371c      	adds	r7, #28
 800c174:	46bd      	mov	sp, r7
 800c176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17a:	4770      	bx	lr

0800c17c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b084      	sub	sp, #16
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c184:	2301      	movs	r3, #1
 800c186:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d101      	bne.n	800c192 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800c18e:	2301      	movs	r3, #1
 800c190:	e071      	b.n	800c276 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	7f5b      	ldrb	r3, [r3, #29]
 800c196:	b2db      	uxtb	r3, r3
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d105      	bne.n	800c1a8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2200      	movs	r2, #0
 800c1a0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f7f6 fa2a 	bl	80025fc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2202      	movs	r2, #2
 800c1ac:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	68db      	ldr	r3, [r3, #12]
 800c1b4:	f003 0310 	and.w	r3, r3, #16
 800c1b8:	2b10      	cmp	r3, #16
 800c1ba:	d053      	beq.n	800c264 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	22ca      	movs	r2, #202	; 0xca
 800c1c2:	625a      	str	r2, [r3, #36]	; 0x24
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	2253      	movs	r2, #83	; 0x53
 800c1ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f000 fac9 	bl	800c764 <RTC_EnterInitMode>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800c1d6:	7bfb      	ldrb	r3, [r7, #15]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d12a      	bne.n	800c232 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	6899      	ldr	r1, [r3, #8]
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681a      	ldr	r2, [r3, #0]
 800c1e6:	4b26      	ldr	r3, [pc, #152]	; (800c280 <HAL_RTC_Init+0x104>)
 800c1e8:	400b      	ands	r3, r1
 800c1ea:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	6899      	ldr	r1, [r3, #8]
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	685a      	ldr	r2, [r3, #4]
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	691b      	ldr	r3, [r3, #16]
 800c1fa:	431a      	orrs	r2, r3
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	695b      	ldr	r3, [r3, #20]
 800c200:	431a      	orrs	r2, r3
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	430a      	orrs	r2, r1
 800c208:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	687a      	ldr	r2, [r7, #4]
 800c210:	68d2      	ldr	r2, [r2, #12]
 800c212:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	6919      	ldr	r1, [r3, #16]
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	689b      	ldr	r3, [r3, #8]
 800c21e:	041a      	lsls	r2, r3, #16
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	430a      	orrs	r2, r1
 800c226:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f000 fad2 	bl	800c7d2 <RTC_ExitInitMode>
 800c22e:	4603      	mov	r3, r0
 800c230:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800c232:	7bfb      	ldrb	r3, [r7, #15]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d110      	bne.n	800c25a <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	f022 0208 	bic.w	r2, r2, #8
 800c246:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	699a      	ldr	r2, [r3, #24]
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	430a      	orrs	r2, r1
 800c258:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	22ff      	movs	r2, #255	; 0xff
 800c260:	625a      	str	r2, [r3, #36]	; 0x24
 800c262:	e001      	b.n	800c268 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800c264:	2300      	movs	r3, #0
 800c266:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800c268:	7bfb      	ldrb	r3, [r7, #15]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d102      	bne.n	800c274 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2201      	movs	r2, #1
 800c272:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800c274:	7bfb      	ldrb	r3, [r7, #15]
}
 800c276:	4618      	mov	r0, r3
 800c278:	3710      	adds	r7, #16
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}
 800c27e:	bf00      	nop
 800c280:	ff8fffbf 	.word	0xff8fffbf

0800c284 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c284:	b590      	push	{r4, r7, lr}
 800c286:	b087      	sub	sp, #28
 800c288:	af00      	add	r7, sp, #0
 800c28a:	60f8      	str	r0, [r7, #12]
 800c28c:	60b9      	str	r1, [r7, #8]
 800c28e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800c290:	2300      	movs	r3, #0
 800c292:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	7f1b      	ldrb	r3, [r3, #28]
 800c298:	2b01      	cmp	r3, #1
 800c29a:	d101      	bne.n	800c2a0 <HAL_RTC_SetTime+0x1c>
 800c29c:	2302      	movs	r3, #2
 800c29e:	e085      	b.n	800c3ac <HAL_RTC_SetTime+0x128>
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	2202      	movs	r2, #2
 800c2aa:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d126      	bne.n	800c300 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	689b      	ldr	r3, [r3, #8]
 800c2b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d102      	bne.n	800c2c6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	781b      	ldrb	r3, [r3, #0]
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f000 faa6 	bl	800c81c <RTC_ByteToBcd2>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	785b      	ldrb	r3, [r3, #1]
 800c2d8:	4618      	mov	r0, r3
 800c2da:	f000 fa9f 	bl	800c81c <RTC_ByteToBcd2>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c2e2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	789b      	ldrb	r3, [r3, #2]
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f000 fa97 	bl	800c81c <RTC_ByteToBcd2>
 800c2ee:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c2f0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	78db      	ldrb	r3, [r3, #3]
 800c2f8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c2fa:	4313      	orrs	r3, r2
 800c2fc:	617b      	str	r3, [r7, #20]
 800c2fe:	e018      	b.n	800c332 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	689b      	ldr	r3, [r3, #8]
 800c306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d102      	bne.n	800c314 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c30e:	68bb      	ldr	r3, [r7, #8]
 800c310:	2200      	movs	r2, #0
 800c312:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	781b      	ldrb	r3, [r3, #0]
 800c318:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	785b      	ldrb	r3, [r3, #1]
 800c31e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800c320:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800c322:	68ba      	ldr	r2, [r7, #8]
 800c324:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800c326:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	78db      	ldrb	r3, [r3, #3]
 800c32c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800c32e:	4313      	orrs	r3, r2
 800c330:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	22ca      	movs	r2, #202	; 0xca
 800c338:	625a      	str	r2, [r3, #36]	; 0x24
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	2253      	movs	r2, #83	; 0x53
 800c340:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c342:	68f8      	ldr	r0, [r7, #12]
 800c344:	f000 fa0e 	bl	800c764 <RTC_EnterInitMode>
 800c348:	4603      	mov	r3, r0
 800c34a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800c34c:	7cfb      	ldrb	r3, [r7, #19]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d11e      	bne.n	800c390 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	681a      	ldr	r2, [r3, #0]
 800c356:	6979      	ldr	r1, [r7, #20]
 800c358:	4b16      	ldr	r3, [pc, #88]	; (800c3b4 <HAL_RTC_SetTime+0x130>)
 800c35a:	400b      	ands	r3, r1
 800c35c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	689a      	ldr	r2, [r3, #8]
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c36c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	6899      	ldr	r1, [r3, #8]
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	68da      	ldr	r2, [r3, #12]
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	691b      	ldr	r3, [r3, #16]
 800c37c:	431a      	orrs	r2, r3
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	430a      	orrs	r2, r1
 800c384:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c386:	68f8      	ldr	r0, [r7, #12]
 800c388:	f000 fa23 	bl	800c7d2 <RTC_ExitInitMode>
 800c38c:	4603      	mov	r3, r0
 800c38e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800c390:	7cfb      	ldrb	r3, [r7, #19]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d102      	bne.n	800c39c <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	2201      	movs	r2, #1
 800c39a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	22ff      	movs	r2, #255	; 0xff
 800c3a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	771a      	strb	r2, [r3, #28]

  return status;
 800c3aa:	7cfb      	ldrb	r3, [r7, #19]
}
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	371c      	adds	r7, #28
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd90      	pop	{r4, r7, pc}
 800c3b4:	007f7f7f 	.word	0x007f7f7f

0800c3b8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c3b8:	b590      	push	{r4, r7, lr}
 800c3ba:	b087      	sub	sp, #28
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	60f8      	str	r0, [r7, #12]
 800c3c0:	60b9      	str	r1, [r7, #8]
 800c3c2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	7f1b      	ldrb	r3, [r3, #28]
 800c3cc:	2b01      	cmp	r3, #1
 800c3ce:	d101      	bne.n	800c3d4 <HAL_RTC_SetDate+0x1c>
 800c3d0:	2302      	movs	r3, #2
 800c3d2:	e06f      	b.n	800c4b4 <HAL_RTC_SetDate+0xfc>
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	2201      	movs	r2, #1
 800c3d8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	2202      	movs	r2, #2
 800c3de:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d10e      	bne.n	800c404 <HAL_RTC_SetDate+0x4c>
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	785b      	ldrb	r3, [r3, #1]
 800c3ea:	f003 0310 	and.w	r3, r3, #16
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d008      	beq.n	800c404 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c3f2:	68bb      	ldr	r3, [r7, #8]
 800c3f4:	785b      	ldrb	r3, [r3, #1]
 800c3f6:	f023 0310 	bic.w	r3, r3, #16
 800c3fa:	b2db      	uxtb	r3, r3
 800c3fc:	330a      	adds	r3, #10
 800c3fe:	b2da      	uxtb	r2, r3
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d11c      	bne.n	800c444 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	78db      	ldrb	r3, [r3, #3]
 800c40e:	4618      	mov	r0, r3
 800c410:	f000 fa04 	bl	800c81c <RTC_ByteToBcd2>
 800c414:	4603      	mov	r3, r0
 800c416:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	785b      	ldrb	r3, [r3, #1]
 800c41c:	4618      	mov	r0, r3
 800c41e:	f000 f9fd 	bl	800c81c <RTC_ByteToBcd2>
 800c422:	4603      	mov	r3, r0
 800c424:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c426:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	789b      	ldrb	r3, [r3, #2]
 800c42c:	4618      	mov	r0, r3
 800c42e:	f000 f9f5 	bl	800c81c <RTC_ByteToBcd2>
 800c432:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c434:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	781b      	ldrb	r3, [r3, #0]
 800c43c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c43e:	4313      	orrs	r3, r2
 800c440:	617b      	str	r3, [r7, #20]
 800c442:	e00e      	b.n	800c462 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	78db      	ldrb	r3, [r3, #3]
 800c448:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	785b      	ldrb	r3, [r3, #1]
 800c44e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c450:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800c452:	68ba      	ldr	r2, [r7, #8]
 800c454:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c456:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c45e:	4313      	orrs	r3, r2
 800c460:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	22ca      	movs	r2, #202	; 0xca
 800c468:	625a      	str	r2, [r3, #36]	; 0x24
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	2253      	movs	r2, #83	; 0x53
 800c470:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c472:	68f8      	ldr	r0, [r7, #12]
 800c474:	f000 f976 	bl	800c764 <RTC_EnterInitMode>
 800c478:	4603      	mov	r3, r0
 800c47a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800c47c:	7cfb      	ldrb	r3, [r7, #19]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d10a      	bne.n	800c498 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	681a      	ldr	r2, [r3, #0]
 800c486:	6979      	ldr	r1, [r7, #20]
 800c488:	4b0c      	ldr	r3, [pc, #48]	; (800c4bc <HAL_RTC_SetDate+0x104>)
 800c48a:	400b      	ands	r3, r1
 800c48c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c48e:	68f8      	ldr	r0, [r7, #12]
 800c490:	f000 f99f 	bl	800c7d2 <RTC_ExitInitMode>
 800c494:	4603      	mov	r3, r0
 800c496:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800c498:	7cfb      	ldrb	r3, [r7, #19]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d102      	bne.n	800c4a4 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	2201      	movs	r2, #1
 800c4a2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	22ff      	movs	r2, #255	; 0xff
 800c4aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	771a      	strb	r2, [r3, #28]

  return status;
 800c4b2:	7cfb      	ldrb	r3, [r7, #19]
}
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	371c      	adds	r7, #28
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd90      	pop	{r4, r7, pc}
 800c4bc:	00ffff3f 	.word	0x00ffff3f

0800c4c0 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800c4c0:	b590      	push	{r4, r7, lr}
 800c4c2:	b089      	sub	sp, #36	; 0x24
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	60f8      	str	r0, [r7, #12]
 800c4c8:	60b9      	str	r1, [r7, #8]
 800c4ca:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	7f1b      	ldrb	r3, [r3, #28]
 800c4dc:	2b01      	cmp	r3, #1
 800c4de:	d101      	bne.n	800c4e4 <HAL_RTC_SetAlarm+0x24>
 800c4e0:	2302      	movs	r3, #2
 800c4e2:	e113      	b.n	800c70c <HAL_RTC_SetAlarm+0x24c>
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	2201      	movs	r2, #1
 800c4e8:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	2202      	movs	r2, #2
 800c4ee:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d137      	bne.n	800c566 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	689b      	ldr	r3, [r3, #8]
 800c4fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c500:	2b00      	cmp	r3, #0
 800c502:	d102      	bne.n	800c50a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800c504:	68bb      	ldr	r3, [r7, #8]
 800c506:	2200      	movs	r2, #0
 800c508:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	781b      	ldrb	r3, [r3, #0]
 800c50e:	4618      	mov	r0, r3
 800c510:	f000 f984 	bl	800c81c <RTC_ByteToBcd2>
 800c514:	4603      	mov	r3, r0
 800c516:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800c518:	68bb      	ldr	r3, [r7, #8]
 800c51a:	785b      	ldrb	r3, [r3, #1]
 800c51c:	4618      	mov	r0, r3
 800c51e:	f000 f97d 	bl	800c81c <RTC_ByteToBcd2>
 800c522:	4603      	mov	r3, r0
 800c524:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800c526:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	789b      	ldrb	r3, [r3, #2]
 800c52c:	4618      	mov	r0, r3
 800c52e:	f000 f975 	bl	800c81c <RTC_ByteToBcd2>
 800c532:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800c534:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	78db      	ldrb	r3, [r3, #3]
 800c53c:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800c53e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800c542:	68bb      	ldr	r3, [r7, #8]
 800c544:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c548:	4618      	mov	r0, r3
 800c54a:	f000 f967 	bl	800c81c <RTC_ByteToBcd2>
 800c54e:	4603      	mov	r3, r0
 800c550:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800c552:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800c55a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800c560:	4313      	orrs	r3, r2
 800c562:	61fb      	str	r3, [r7, #28]
 800c564:	e023      	b.n	800c5ae <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	689b      	ldr	r3, [r3, #8]
 800c56c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c570:	2b00      	cmp	r3, #0
 800c572:	d102      	bne.n	800c57a <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	2200      	movs	r2, #0
 800c578:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	781b      	ldrb	r3, [r3, #0]
 800c57e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	785b      	ldrb	r3, [r3, #1]
 800c584:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800c586:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800c588:	68ba      	ldr	r2, [r7, #8]
 800c58a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800c58c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800c58e:	68bb      	ldr	r3, [r7, #8]
 800c590:	78db      	ldrb	r3, [r3, #3]
 800c592:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800c594:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800c596:	68bb      	ldr	r3, [r7, #8]
 800c598:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c59c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800c59e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800c5a4:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800c5aa:	4313      	orrs	r3, r2
 800c5ac:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800c5ae:	68bb      	ldr	r3, [r7, #8]
 800c5b0:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800c5b6:	4313      	orrs	r3, r2
 800c5b8:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	22ca      	movs	r2, #202	; 0xca
 800c5c0:	625a      	str	r2, [r3, #36]	; 0x24
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	2253      	movs	r2, #83	; 0x53
 800c5c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5d2:	d148      	bne.n	800c666 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	689a      	ldr	r2, [r3, #8]
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c5e2:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	689a      	ldr	r2, [r3, #8]
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c5f2:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	68db      	ldr	r3, [r3, #12]
 800c5fa:	b2da      	uxtb	r2, r3
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800c604:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c606:	f7f8 fb7b 	bl	8004d00 <HAL_GetTick>
 800c60a:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800c60c:	e013      	b.n	800c636 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c60e:	f7f8 fb77 	bl	8004d00 <HAL_GetTick>
 800c612:	4602      	mov	r2, r0
 800c614:	69bb      	ldr	r3, [r7, #24]
 800c616:	1ad3      	subs	r3, r2, r3
 800c618:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c61c:	d90b      	bls.n	800c636 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	22ff      	movs	r2, #255	; 0xff
 800c624:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	2203      	movs	r2, #3
 800c62a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	2200      	movs	r2, #0
 800c630:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800c632:	2303      	movs	r3, #3
 800c634:	e06a      	b.n	800c70c <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	68db      	ldr	r3, [r3, #12]
 800c63c:	f003 0301 	and.w	r3, r3, #1
 800c640:	2b00      	cmp	r3, #0
 800c642:	d0e4      	beq.n	800c60e <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	69fa      	ldr	r2, [r7, #28]
 800c64a:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	697a      	ldr	r2, [r7, #20]
 800c652:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	689a      	ldr	r2, [r3, #8]
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c662:	609a      	str	r2, [r3, #8]
 800c664:	e047      	b.n	800c6f6 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	689a      	ldr	r2, [r3, #8]
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c674:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	689a      	ldr	r2, [r3, #8]
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c684:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	68db      	ldr	r3, [r3, #12]
 800c68c:	b2da      	uxtb	r2, r3
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	f462 7220 	orn	r2, r2, #640	; 0x280
 800c696:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c698:	f7f8 fb32 	bl	8004d00 <HAL_GetTick>
 800c69c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800c69e:	e013      	b.n	800c6c8 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c6a0:	f7f8 fb2e 	bl	8004d00 <HAL_GetTick>
 800c6a4:	4602      	mov	r2, r0
 800c6a6:	69bb      	ldr	r3, [r7, #24]
 800c6a8:	1ad3      	subs	r3, r2, r3
 800c6aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c6ae:	d90b      	bls.n	800c6c8 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	22ff      	movs	r2, #255	; 0xff
 800c6b6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	2203      	movs	r2, #3
 800c6bc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800c6c4:	2303      	movs	r3, #3
 800c6c6:	e021      	b.n	800c70c <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	68db      	ldr	r3, [r3, #12]
 800c6ce:	f003 0302 	and.w	r3, r3, #2
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d0e4      	beq.n	800c6a0 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	69fa      	ldr	r2, [r7, #28]
 800c6dc:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	697a      	ldr	r2, [r7, #20]
 800c6e4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	689a      	ldr	r2, [r3, #8]
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c6f4:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	22ff      	movs	r2, #255	; 0xff
 800c6fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	2201      	movs	r2, #1
 800c702:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	2200      	movs	r2, #0
 800c708:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800c70a:	2300      	movs	r3, #0
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	3724      	adds	r7, #36	; 0x24
 800c710:	46bd      	mov	sp, r7
 800c712:	bd90      	pop	{r4, r7, pc}

0800c714 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b084      	sub	sp, #16
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c71c:	2300      	movs	r3, #0
 800c71e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	68da      	ldr	r2, [r3, #12]
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800c72e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c730:	f7f8 fae6 	bl	8004d00 <HAL_GetTick>
 800c734:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c736:	e009      	b.n	800c74c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c738:	f7f8 fae2 	bl	8004d00 <HAL_GetTick>
 800c73c:	4602      	mov	r2, r0
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	1ad3      	subs	r3, r2, r3
 800c742:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c746:	d901      	bls.n	800c74c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800c748:	2303      	movs	r3, #3
 800c74a:	e007      	b.n	800c75c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	68db      	ldr	r3, [r3, #12]
 800c752:	f003 0320 	and.w	r3, r3, #32
 800c756:	2b00      	cmp	r3, #0
 800c758:	d0ee      	beq.n	800c738 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800c75a:	2300      	movs	r3, #0
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	3710      	adds	r7, #16
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}

0800c764 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b084      	sub	sp, #16
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c76c:	2300      	movs	r3, #0
 800c76e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800c770:	2300      	movs	r3, #0
 800c772:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	68db      	ldr	r3, [r3, #12]
 800c77a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d122      	bne.n	800c7c8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	68da      	ldr	r2, [r3, #12]
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c790:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c792:	f7f8 fab5 	bl	8004d00 <HAL_GetTick>
 800c796:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800c798:	e00c      	b.n	800c7b4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c79a:	f7f8 fab1 	bl	8004d00 <HAL_GetTick>
 800c79e:	4602      	mov	r2, r0
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	1ad3      	subs	r3, r2, r3
 800c7a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c7a8:	d904      	bls.n	800c7b4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2204      	movs	r2, #4
 800c7ae:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800c7b0:	2301      	movs	r3, #1
 800c7b2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	68db      	ldr	r3, [r3, #12]
 800c7ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d102      	bne.n	800c7c8 <RTC_EnterInitMode+0x64>
 800c7c2:	7bfb      	ldrb	r3, [r7, #15]
 800c7c4:	2b01      	cmp	r3, #1
 800c7c6:	d1e8      	bne.n	800c79a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800c7c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	3710      	adds	r7, #16
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}

0800c7d2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c7d2:	b580      	push	{r7, lr}
 800c7d4:	b084      	sub	sp, #16
 800c7d6:	af00      	add	r7, sp, #0
 800c7d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	68da      	ldr	r2, [r3, #12]
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c7ec:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	689b      	ldr	r3, [r3, #8]
 800c7f4:	f003 0320 	and.w	r3, r3, #32
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d10a      	bne.n	800c812 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f7ff ff89 	bl	800c714 <HAL_RTC_WaitForSynchro>
 800c802:	4603      	mov	r3, r0
 800c804:	2b00      	cmp	r3, #0
 800c806:	d004      	beq.n	800c812 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2204      	movs	r2, #4
 800c80c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800c80e:	2301      	movs	r3, #1
 800c810:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800c812:	7bfb      	ldrb	r3, [r7, #15]
}
 800c814:	4618      	mov	r0, r3
 800c816:	3710      	adds	r7, #16
 800c818:	46bd      	mov	sp, r7
 800c81a:	bd80      	pop	{r7, pc}

0800c81c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800c81c:	b480      	push	{r7}
 800c81e:	b085      	sub	sp, #20
 800c820:	af00      	add	r7, sp, #0
 800c822:	4603      	mov	r3, r0
 800c824:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c826:	2300      	movs	r3, #0
 800c828:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800c82a:	e005      	b.n	800c838 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	3301      	adds	r3, #1
 800c830:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800c832:	79fb      	ldrb	r3, [r7, #7]
 800c834:	3b0a      	subs	r3, #10
 800c836:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800c838:	79fb      	ldrb	r3, [r7, #7]
 800c83a:	2b09      	cmp	r3, #9
 800c83c:	d8f6      	bhi.n	800c82c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	b2db      	uxtb	r3, r3
 800c842:	011b      	lsls	r3, r3, #4
 800c844:	b2da      	uxtb	r2, r3
 800c846:	79fb      	ldrb	r3, [r7, #7]
 800c848:	4313      	orrs	r3, r2
 800c84a:	b2db      	uxtb	r3, r3
}
 800c84c:	4618      	mov	r0, r3
 800c84e:	3714      	adds	r7, #20
 800c850:	46bd      	mov	sp, r7
 800c852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c856:	4770      	bx	lr

0800c858 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b088      	sub	sp, #32
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800c860:	2300      	movs	r3, #0
 800c862:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800c864:	2300      	movs	r3, #0
 800c866:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800c868:	2300      	movs	r3, #0
 800c86a:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d101      	bne.n	800c876 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800c872:	2301      	movs	r3, #1
 800c874:	e156      	b.n	800cb24 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800c87c:	b2db      	uxtb	r3, r3
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d106      	bne.n	800c890 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2200      	movs	r2, #0
 800c886:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f7f6 fb9a 	bl	8002fc4 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2202      	movs	r2, #2
 800c894:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800c898:	6878      	ldr	r0, [r7, #4]
 800c89a:	f000 f95b 	bl	800cb54 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	68db      	ldr	r3, [r3, #12]
 800c8a2:	2b02      	cmp	r3, #2
 800c8a4:	d00c      	beq.n	800c8c0 <HAL_SAI_Init+0x68>
 800c8a6:	2b02      	cmp	r3, #2
 800c8a8:	d80d      	bhi.n	800c8c6 <HAL_SAI_Init+0x6e>
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d002      	beq.n	800c8b4 <HAL_SAI_Init+0x5c>
 800c8ae:	2b01      	cmp	r3, #1
 800c8b0:	d003      	beq.n	800c8ba <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800c8b2:	e008      	b.n	800c8c6 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	61fb      	str	r3, [r7, #28]
      break;
 800c8b8:	e006      	b.n	800c8c8 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800c8ba:	2310      	movs	r3, #16
 800c8bc:	61fb      	str	r3, [r7, #28]
      break;
 800c8be:	e003      	b.n	800c8c8 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800c8c0:	2320      	movs	r3, #32
 800c8c2:	61fb      	str	r3, [r7, #28]
      break;
 800c8c4:	e000      	b.n	800c8c8 <HAL_SAI_Init+0x70>
      break;
 800c8c6:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	689b      	ldr	r3, [r3, #8]
 800c8cc:	2b03      	cmp	r3, #3
 800c8ce:	d81e      	bhi.n	800c90e <HAL_SAI_Init+0xb6>
 800c8d0:	a201      	add	r2, pc, #4	; (adr r2, 800c8d8 <HAL_SAI_Init+0x80>)
 800c8d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8d6:	bf00      	nop
 800c8d8:	0800c8e9 	.word	0x0800c8e9
 800c8dc:	0800c8ef 	.word	0x0800c8ef
 800c8e0:	0800c8f7 	.word	0x0800c8f7
 800c8e4:	0800c8ff 	.word	0x0800c8ff
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	617b      	str	r3, [r7, #20]
    }
    break;
 800c8ec:	e010      	b.n	800c910 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800c8ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c8f2:	617b      	str	r3, [r7, #20]
    }
    break;
 800c8f4:	e00c      	b.n	800c910 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c8f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c8fa:	617b      	str	r3, [r7, #20]
    }
    break;
 800c8fc:	e008      	b.n	800c910 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c8fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c902:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800c904:	69fb      	ldr	r3, [r7, #28]
 800c906:	f043 0301 	orr.w	r3, r3, #1
 800c90a:	61fb      	str	r3, [r7, #28]
    }
    break;
 800c90c:	e000      	b.n	800c910 <HAL_SAI_Init+0xb8>
    default:
      break;
 800c90e:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	4a85      	ldr	r2, [pc, #532]	; (800cb2c <HAL_SAI_Init+0x2d4>)
 800c916:	4293      	cmp	r3, r2
 800c918:	d004      	beq.n	800c924 <HAL_SAI_Init+0xcc>
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	4a84      	ldr	r2, [pc, #528]	; (800cb30 <HAL_SAI_Init+0x2d8>)
 800c920:	4293      	cmp	r3, r2
 800c922:	d103      	bne.n	800c92c <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800c924:	4a83      	ldr	r2, [pc, #524]	; (800cb34 <HAL_SAI_Init+0x2dc>)
 800c926:	69fb      	ldr	r3, [r7, #28]
 800c928:	6013      	str	r3, [r2, #0]
 800c92a:	e002      	b.n	800c932 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800c92c:	4a82      	ldr	r2, [pc, #520]	; (800cb38 <HAL_SAI_Init+0x2e0>)
 800c92e:	69fb      	ldr	r3, [r7, #28]
 800c930:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	69db      	ldr	r3, [r3, #28]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d04c      	beq.n	800c9d4 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800c93a:	2300      	movs	r3, #0
 800c93c:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	4a7a      	ldr	r2, [pc, #488]	; (800cb2c <HAL_SAI_Init+0x2d4>)
 800c944:	4293      	cmp	r3, r2
 800c946:	d004      	beq.n	800c952 <HAL_SAI_Init+0xfa>
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	4a78      	ldr	r2, [pc, #480]	; (800cb30 <HAL_SAI_Init+0x2d8>)
 800c94e:	4293      	cmp	r3, r2
 800c950:	d104      	bne.n	800c95c <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800c952:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800c956:	f7ff faa3 	bl	800bea0 <HAL_RCCEx_GetPeriphCLKFreq>
 800c95a:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	4a76      	ldr	r2, [pc, #472]	; (800cb3c <HAL_SAI_Init+0x2e4>)
 800c962:	4293      	cmp	r3, r2
 800c964:	d004      	beq.n	800c970 <HAL_SAI_Init+0x118>
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	4a75      	ldr	r2, [pc, #468]	; (800cb40 <HAL_SAI_Init+0x2e8>)
 800c96c:	4293      	cmp	r3, r2
 800c96e:	d104      	bne.n	800c97a <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800c970:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c974:	f7ff fa94 	bl	800bea0 <HAL_RCCEx_GetPeriphCLKFreq>
 800c978:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800c97a:	693a      	ldr	r2, [r7, #16]
 800c97c:	4613      	mov	r3, r2
 800c97e:	009b      	lsls	r3, r3, #2
 800c980:	4413      	add	r3, r2
 800c982:	005b      	lsls	r3, r3, #1
 800c984:	461a      	mov	r2, r3
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	69db      	ldr	r3, [r3, #28]
 800c98a:	025b      	lsls	r3, r3, #9
 800c98c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c990:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	4a6b      	ldr	r2, [pc, #428]	; (800cb44 <HAL_SAI_Init+0x2ec>)
 800c996:	fba2 2303 	umull	r2, r3, r2, r3
 800c99a:	08da      	lsrs	r2, r3, #3
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800c9a0:	68f9      	ldr	r1, [r7, #12]
 800c9a2:	4b68      	ldr	r3, [pc, #416]	; (800cb44 <HAL_SAI_Init+0x2ec>)
 800c9a4:	fba3 2301 	umull	r2, r3, r3, r1
 800c9a8:	08da      	lsrs	r2, r3, #3
 800c9aa:	4613      	mov	r3, r2
 800c9ac:	009b      	lsls	r3, r3, #2
 800c9ae:	4413      	add	r3, r2
 800c9b0:	005b      	lsls	r3, r3, #1
 800c9b2:	1aca      	subs	r2, r1, r3
 800c9b4:	2a08      	cmp	r2, #8
 800c9b6:	d904      	bls.n	800c9c2 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	6a1b      	ldr	r3, [r3, #32]
 800c9bc:	1c5a      	adds	r2, r3, #1
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9c6:	2b04      	cmp	r3, #4
 800c9c8:	d104      	bne.n	800c9d4 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	6a1b      	ldr	r3, [r3, #32]
 800c9ce:	085a      	lsrs	r2, r3, #1
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	685b      	ldr	r3, [r3, #4]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d003      	beq.n	800c9e4 <HAL_SAI_Init+0x18c>
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	685b      	ldr	r3, [r3, #4]
 800c9e0:	2b02      	cmp	r3, #2
 800c9e2:	d109      	bne.n	800c9f8 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9e8:	2b01      	cmp	r3, #1
 800c9ea:	d101      	bne.n	800c9f0 <HAL_SAI_Init+0x198>
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	e001      	b.n	800c9f4 <HAL_SAI_Init+0x19c>
 800c9f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c9f4:	61bb      	str	r3, [r7, #24]
 800c9f6:	e008      	b.n	800ca0a <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9fc:	2b01      	cmp	r3, #1
 800c9fe:	d102      	bne.n	800ca06 <HAL_SAI_Init+0x1ae>
 800ca00:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca04:	e000      	b.n	800ca08 <HAL_SAI_Init+0x1b0>
 800ca06:	2300      	movs	r3, #0
 800ca08:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	6819      	ldr	r1, [r3, #0]
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681a      	ldr	r2, [r3, #0]
 800ca14:	4b4c      	ldr	r3, [pc, #304]	; (800cb48 <HAL_SAI_Init+0x2f0>)
 800ca16:	400b      	ands	r3, r1
 800ca18:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	6819      	ldr	r1, [r3, #0]
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	685a      	ldr	r2, [r3, #4]
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca28:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ca2e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca34:	431a      	orrs	r2, r3
 800ca36:	69bb      	ldr	r3, [r7, #24]
 800ca38:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800ca3a:	697b      	ldr	r3, [r7, #20]
 800ca3c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800ca42:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	691b      	ldr	r3, [r3, #16]
 800ca48:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ca4e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	6a1b      	ldr	r3, [r3, #32]
 800ca54:	051b      	lsls	r3, r3, #20
 800ca56:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	430a      	orrs	r2, r1
 800ca5e:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	6859      	ldr	r1, [r3, #4]
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681a      	ldr	r2, [r3, #0]
 800ca6a:	4b38      	ldr	r3, [pc, #224]	; (800cb4c <HAL_SAI_Init+0x2f4>)
 800ca6c:	400b      	ands	r3, r1
 800ca6e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	6859      	ldr	r1, [r3, #4]
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	699a      	ldr	r2, [r3, #24]
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca7e:	431a      	orrs	r2, r3
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca84:	431a      	orrs	r2, r3
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	430a      	orrs	r2, r1
 800ca8c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	6899      	ldr	r1, [r3, #8]
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681a      	ldr	r2, [r3, #0]
 800ca98:	4b2d      	ldr	r3, [pc, #180]	; (800cb50 <HAL_SAI_Init+0x2f8>)
 800ca9a:	400b      	ands	r3, r1
 800ca9c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	6899      	ldr	r1, [r3, #8]
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caa8:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800caae:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800cab4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800caba:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cac0:	3b01      	subs	r3, #1
 800cac2:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800cac4:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	430a      	orrs	r2, r1
 800cacc:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	68d9      	ldr	r1, [r3, #12]
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681a      	ldr	r2, [r3, #0]
 800cad8:	f24f 0320 	movw	r3, #61472	; 0xf020
 800cadc:	400b      	ands	r3, r1
 800cade:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	68d9      	ldr	r1, [r3, #12]
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800caee:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800caf4:	041b      	lsls	r3, r3, #16
 800caf6:	431a      	orrs	r2, r3
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cafc:	3b01      	subs	r3, #1
 800cafe:	021b      	lsls	r3, r3, #8
 800cb00:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	430a      	orrs	r2, r1
 800cb08:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	2201      	movs	r2, #1
 800cb16:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800cb22:	2300      	movs	r3, #0
}
 800cb24:	4618      	mov	r0, r3
 800cb26:	3720      	adds	r7, #32
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bd80      	pop	{r7, pc}
 800cb2c:	40015804 	.word	0x40015804
 800cb30:	40015824 	.word	0x40015824
 800cb34:	40015800 	.word	0x40015800
 800cb38:	40015c00 	.word	0x40015c00
 800cb3c:	40015c04 	.word	0x40015c04
 800cb40:	40015c24 	.word	0x40015c24
 800cb44:	cccccccd 	.word	0xcccccccd
 800cb48:	ff05c010 	.word	0xff05c010
 800cb4c:	ffff1ff0 	.word	0xffff1ff0
 800cb50:	fff88000 	.word	0xfff88000

0800cb54 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800cb54:	b480      	push	{r7}
 800cb56:	b085      	sub	sp, #20
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800cb5c:	4b17      	ldr	r3, [pc, #92]	; (800cbbc <SAI_Disable+0x68>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	4a17      	ldr	r2, [pc, #92]	; (800cbc0 <SAI_Disable+0x6c>)
 800cb62:	fba2 2303 	umull	r2, r3, r2, r3
 800cb66:	0b1b      	lsrs	r3, r3, #12
 800cb68:	009b      	lsls	r3, r3, #2
 800cb6a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	681a      	ldr	r2, [r3, #0]
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800cb7e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	1e5a      	subs	r2, r3, #1
 800cb84:	60fa      	str	r2, [r7, #12]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d10a      	bne.n	800cba0 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cb90:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800cb9a:	2303      	movs	r3, #3
 800cb9c:	72fb      	strb	r3, [r7, #11]
      break;
 800cb9e:	e006      	b.n	800cbae <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d1e8      	bne.n	800cb80 <SAI_Disable+0x2c>

  return status;
 800cbae:	7afb      	ldrb	r3, [r7, #11]
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	3714      	adds	r7, #20
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbba:	4770      	bx	lr
 800cbbc:	20000000 	.word	0x20000000
 800cbc0:	95cbec1b 	.word	0x95cbec1b

0800cbc4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b082      	sub	sp, #8
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
 800cbcc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d101      	bne.n	800cbd8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800cbd4:	2301      	movs	r3, #1
 800cbd6:	e025      	b.n	800cc24 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cbde:	b2db      	uxtb	r3, r3
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d106      	bne.n	800cbf2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f7f6 f9df 	bl	8002fb0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	2202      	movs	r2, #2
 800cbf6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681a      	ldr	r2, [r3, #0]
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	3304      	adds	r3, #4
 800cc02:	4619      	mov	r1, r3
 800cc04:	4610      	mov	r0, r2
 800cc06:	f001 fef1 	bl	800e9ec <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	6818      	ldr	r0, [r3, #0]
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	685b      	ldr	r3, [r3, #4]
 800cc12:	461a      	mov	r2, r3
 800cc14:	6839      	ldr	r1, [r7, #0]
 800cc16:	f001 ff45 	bl	800eaa4 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	2201      	movs	r2, #1
 800cc1e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800cc22:	2300      	movs	r3, #0
}
 800cc24:	4618      	mov	r0, r3
 800cc26:	3708      	adds	r7, #8
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	bd80      	pop	{r7, pc}

0800cc2c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b086      	sub	sp, #24
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	60f8      	str	r0, [r7, #12]
 800cc34:	60b9      	str	r1, [r7, #8]
 800cc36:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cc3e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800cc40:	7dfb      	ldrb	r3, [r7, #23]
 800cc42:	2b02      	cmp	r3, #2
 800cc44:	d101      	bne.n	800cc4a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800cc46:	2302      	movs	r3, #2
 800cc48:	e021      	b.n	800cc8e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800cc4a:	7dfb      	ldrb	r3, [r7, #23]
 800cc4c:	2b01      	cmp	r3, #1
 800cc4e:	d002      	beq.n	800cc56 <HAL_SDRAM_SendCommand+0x2a>
 800cc50:	7dfb      	ldrb	r3, [r7, #23]
 800cc52:	2b05      	cmp	r3, #5
 800cc54:	d118      	bne.n	800cc88 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	2202      	movs	r2, #2
 800cc5a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	687a      	ldr	r2, [r7, #4]
 800cc64:	68b9      	ldr	r1, [r7, #8]
 800cc66:	4618      	mov	r0, r3
 800cc68:	f001 ff86 	bl	800eb78 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800cc6c:	68bb      	ldr	r3, [r7, #8]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	2b02      	cmp	r3, #2
 800cc72:	d104      	bne.n	800cc7e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	2205      	movs	r2, #5
 800cc78:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800cc7c:	e006      	b.n	800cc8c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	2201      	movs	r2, #1
 800cc82:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800cc86:	e001      	b.n	800cc8c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800cc88:	2301      	movs	r3, #1
 800cc8a:	e000      	b.n	800cc8e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800cc8c:	2300      	movs	r3, #0
}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	3718      	adds	r7, #24
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}

0800cc96 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800cc96:	b580      	push	{r7, lr}
 800cc98:	b082      	sub	sp, #8
 800cc9a:	af00      	add	r7, sp, #0
 800cc9c:	6078      	str	r0, [r7, #4]
 800cc9e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cca6:	b2db      	uxtb	r3, r3
 800cca8:	2b02      	cmp	r3, #2
 800ccaa:	d101      	bne.n	800ccb0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800ccac:	2302      	movs	r3, #2
 800ccae:	e016      	b.n	800ccde <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ccb6:	b2db      	uxtb	r3, r3
 800ccb8:	2b01      	cmp	r3, #1
 800ccba:	d10f      	bne.n	800ccdc <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2202      	movs	r2, #2
 800ccc0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	6839      	ldr	r1, [r7, #0]
 800ccca:	4618      	mov	r0, r3
 800cccc:	f001 ff78 	bl	800ebc0 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2201      	movs	r2, #1
 800ccd4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800ccd8:	2300      	movs	r3, #0
 800ccda:	e000      	b.n	800ccde <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800ccdc:	2301      	movs	r3, #1
}
 800ccde:	4618      	mov	r0, r3
 800cce0:	3708      	adds	r7, #8
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}
	...

0800cce8 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b084      	sub	sp, #16
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d101      	bne.n	800ccfa <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800ccf6:	2301      	movs	r3, #1
 800ccf8:	e04c      	b.n	800cd94 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cd00:	b2db      	uxtb	r3, r3
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d106      	bne.n	800cd14 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2200      	movs	r2, #0
 800cd0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	f7f5 fcca 	bl	80026a8 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2202      	movs	r2, #2
 800cd18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	681a      	ldr	r2, [r3, #0]
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	f022 0203 	bic.w	r2, r2, #3
 800cd2a:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800cd34:	68fa      	ldr	r2, [r7, #12]
 800cd36:	4b19      	ldr	r3, [pc, #100]	; (800cd9c <HAL_SPDIFRX_Init+0xb4>)
 800cd38:	4013      	ands	r3, r2
 800cd3a:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800cd44:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800cd4a:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800cd50:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800cd56:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800cd5c:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800cd62:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800cd68:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800cd6e:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800cd74:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800cd76:	68fa      	ldr	r2, [r7, #12]
 800cd78:	4313      	orrs	r3, r2
 800cd7a:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	68fa      	ldr	r2, [r7, #12]
 800cd82:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2200      	movs	r2, #0
 800cd88:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2201      	movs	r2, #1
 800cd8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800cd92:	2300      	movs	r3, #0
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	3710      	adds	r7, #16
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}
 800cd9c:	fff88407 	.word	0xfff88407

0800cda0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b084      	sub	sp, #16
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d101      	bne.n	800cdb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cdae:	2301      	movs	r3, #1
 800cdb0:	e09d      	b.n	800ceee <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d108      	bne.n	800cdcc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	685b      	ldr	r3, [r3, #4]
 800cdbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cdc2:	d009      	beq.n	800cdd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	61da      	str	r2, [r3, #28]
 800cdca:	e005      	b.n	800cdd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2200      	movs	r2, #0
 800cdd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2200      	movs	r2, #0
 800cddc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cde4:	b2db      	uxtb	r3, r3
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d106      	bne.n	800cdf8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2200      	movs	r2, #0
 800cdee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cdf2:	6878      	ldr	r0, [r7, #4]
 800cdf4:	f7f5 fcbe 	bl	8002774 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2202      	movs	r2, #2
 800cdfc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	681a      	ldr	r2, [r3, #0]
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ce0e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	68db      	ldr	r3, [r3, #12]
 800ce14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ce18:	d902      	bls.n	800ce20 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	60fb      	str	r3, [r7, #12]
 800ce1e:	e002      	b.n	800ce26 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ce20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ce24:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	68db      	ldr	r3, [r3, #12]
 800ce2a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800ce2e:	d007      	beq.n	800ce40 <HAL_SPI_Init+0xa0>
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	68db      	ldr	r3, [r3, #12]
 800ce34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ce38:	d002      	beq.n	800ce40 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	685b      	ldr	r3, [r3, #4]
 800ce44:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	689b      	ldr	r3, [r3, #8]
 800ce4c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ce50:	431a      	orrs	r2, r3
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	691b      	ldr	r3, [r3, #16]
 800ce56:	f003 0302 	and.w	r3, r3, #2
 800ce5a:	431a      	orrs	r2, r3
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	695b      	ldr	r3, [r3, #20]
 800ce60:	f003 0301 	and.w	r3, r3, #1
 800ce64:	431a      	orrs	r2, r3
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	699b      	ldr	r3, [r3, #24]
 800ce6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ce6e:	431a      	orrs	r2, r3
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	69db      	ldr	r3, [r3, #28]
 800ce74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ce78:	431a      	orrs	r2, r3
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	6a1b      	ldr	r3, [r3, #32]
 800ce7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce82:	ea42 0103 	orr.w	r1, r2, r3
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce8a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	430a      	orrs	r2, r1
 800ce94:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	699b      	ldr	r3, [r3, #24]
 800ce9a:	0c1b      	lsrs	r3, r3, #16
 800ce9c:	f003 0204 	and.w	r2, r3, #4
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cea4:	f003 0310 	and.w	r3, r3, #16
 800cea8:	431a      	orrs	r2, r3
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ceae:	f003 0308 	and.w	r3, r3, #8
 800ceb2:	431a      	orrs	r2, r3
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	68db      	ldr	r3, [r3, #12]
 800ceb8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800cebc:	ea42 0103 	orr.w	r1, r2, r3
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	430a      	orrs	r2, r1
 800cecc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	69da      	ldr	r2, [r3, #28]
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cedc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	2200      	movs	r2, #0
 800cee2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	2201      	movs	r2, #1
 800cee8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800ceec:	2300      	movs	r3, #0
}
 800ceee:	4618      	mov	r0, r3
 800cef0:	3710      	adds	r7, #16
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}

0800cef6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cef6:	b580      	push	{r7, lr}
 800cef8:	b082      	sub	sp, #8
 800cefa:	af00      	add	r7, sp, #0
 800cefc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d101      	bne.n	800cf08 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cf04:	2301      	movs	r3, #1
 800cf06:	e049      	b.n	800cf9c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf0e:	b2db      	uxtb	r3, r3
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d106      	bne.n	800cf22 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2200      	movs	r2, #0
 800cf18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cf1c:	6878      	ldr	r0, [r7, #4]
 800cf1e:	f7f5 fc9d 	bl	800285c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2202      	movs	r2, #2
 800cf26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681a      	ldr	r2, [r3, #0]
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	3304      	adds	r3, #4
 800cf32:	4619      	mov	r1, r3
 800cf34:	4610      	mov	r0, r2
 800cf36:	f000 fc29 	bl	800d78c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2201      	movs	r2, #1
 800cf3e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2201      	movs	r2, #1
 800cf46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2201      	movs	r2, #1
 800cf4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	2201      	movs	r2, #1
 800cf56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2201      	movs	r2, #1
 800cf5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2201      	movs	r2, #1
 800cf66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2201      	movs	r2, #1
 800cf6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	2201      	movs	r2, #1
 800cf76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2201      	movs	r2, #1
 800cf7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	2201      	movs	r2, #1
 800cf86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2201      	movs	r2, #1
 800cf8e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2201      	movs	r2, #1
 800cf96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cf9a:	2300      	movs	r3, #0
}
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	3708      	adds	r7, #8
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}

0800cfa4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	b085      	sub	sp, #20
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cfb2:	b2db      	uxtb	r3, r3
 800cfb4:	2b01      	cmp	r3, #1
 800cfb6:	d001      	beq.n	800cfbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cfb8:	2301      	movs	r3, #1
 800cfba:	e054      	b.n	800d066 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	2202      	movs	r2, #2
 800cfc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	68da      	ldr	r2, [r3, #12]
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	f042 0201 	orr.w	r2, r2, #1
 800cfd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	4a26      	ldr	r2, [pc, #152]	; (800d074 <HAL_TIM_Base_Start_IT+0xd0>)
 800cfda:	4293      	cmp	r3, r2
 800cfdc:	d022      	beq.n	800d024 <HAL_TIM_Base_Start_IT+0x80>
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cfe6:	d01d      	beq.n	800d024 <HAL_TIM_Base_Start_IT+0x80>
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	4a22      	ldr	r2, [pc, #136]	; (800d078 <HAL_TIM_Base_Start_IT+0xd4>)
 800cfee:	4293      	cmp	r3, r2
 800cff0:	d018      	beq.n	800d024 <HAL_TIM_Base_Start_IT+0x80>
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	4a21      	ldr	r2, [pc, #132]	; (800d07c <HAL_TIM_Base_Start_IT+0xd8>)
 800cff8:	4293      	cmp	r3, r2
 800cffa:	d013      	beq.n	800d024 <HAL_TIM_Base_Start_IT+0x80>
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	4a1f      	ldr	r2, [pc, #124]	; (800d080 <HAL_TIM_Base_Start_IT+0xdc>)
 800d002:	4293      	cmp	r3, r2
 800d004:	d00e      	beq.n	800d024 <HAL_TIM_Base_Start_IT+0x80>
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	4a1e      	ldr	r2, [pc, #120]	; (800d084 <HAL_TIM_Base_Start_IT+0xe0>)
 800d00c:	4293      	cmp	r3, r2
 800d00e:	d009      	beq.n	800d024 <HAL_TIM_Base_Start_IT+0x80>
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	4a1c      	ldr	r2, [pc, #112]	; (800d088 <HAL_TIM_Base_Start_IT+0xe4>)
 800d016:	4293      	cmp	r3, r2
 800d018:	d004      	beq.n	800d024 <HAL_TIM_Base_Start_IT+0x80>
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	4a1b      	ldr	r2, [pc, #108]	; (800d08c <HAL_TIM_Base_Start_IT+0xe8>)
 800d020:	4293      	cmp	r3, r2
 800d022:	d115      	bne.n	800d050 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	689a      	ldr	r2, [r3, #8]
 800d02a:	4b19      	ldr	r3, [pc, #100]	; (800d090 <HAL_TIM_Base_Start_IT+0xec>)
 800d02c:	4013      	ands	r3, r2
 800d02e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	2b06      	cmp	r3, #6
 800d034:	d015      	beq.n	800d062 <HAL_TIM_Base_Start_IT+0xbe>
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d03c:	d011      	beq.n	800d062 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	681a      	ldr	r2, [r3, #0]
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	f042 0201 	orr.w	r2, r2, #1
 800d04c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d04e:	e008      	b.n	800d062 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	681a      	ldr	r2, [r3, #0]
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	f042 0201 	orr.w	r2, r2, #1
 800d05e:	601a      	str	r2, [r3, #0]
 800d060:	e000      	b.n	800d064 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d062:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d064:	2300      	movs	r3, #0
}
 800d066:	4618      	mov	r0, r3
 800d068:	3714      	adds	r7, #20
 800d06a:	46bd      	mov	sp, r7
 800d06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d070:	4770      	bx	lr
 800d072:	bf00      	nop
 800d074:	40010000 	.word	0x40010000
 800d078:	40000400 	.word	0x40000400
 800d07c:	40000800 	.word	0x40000800
 800d080:	40000c00 	.word	0x40000c00
 800d084:	40010400 	.word	0x40010400
 800d088:	40014000 	.word	0x40014000
 800d08c:	40001800 	.word	0x40001800
 800d090:	00010007 	.word	0x00010007

0800d094 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b082      	sub	sp, #8
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d101      	bne.n	800d0a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d0a2:	2301      	movs	r3, #1
 800d0a4:	e049      	b.n	800d13a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d0ac:	b2db      	uxtb	r3, r3
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d106      	bne.n	800d0c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d0ba:	6878      	ldr	r0, [r7, #4]
 800d0bc:	f7f5 fc16 	bl	80028ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2202      	movs	r2, #2
 800d0c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681a      	ldr	r2, [r3, #0]
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	3304      	adds	r3, #4
 800d0d0:	4619      	mov	r1, r3
 800d0d2:	4610      	mov	r0, r2
 800d0d4:	f000 fb5a 	bl	800d78c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2201      	movs	r2, #1
 800d0dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2201      	movs	r2, #1
 800d0e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2201      	movs	r2, #1
 800d0ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2201      	movs	r2, #1
 800d0f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2201      	movs	r2, #1
 800d0fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2201      	movs	r2, #1
 800d104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2201      	movs	r2, #1
 800d10c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2201      	movs	r2, #1
 800d114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2201      	movs	r2, #1
 800d11c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2201      	movs	r2, #1
 800d124:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2201      	movs	r2, #1
 800d12c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2201      	movs	r2, #1
 800d134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d138:	2300      	movs	r3, #0
}
 800d13a:	4618      	mov	r0, r3
 800d13c:	3708      	adds	r7, #8
 800d13e:	46bd      	mov	sp, r7
 800d140:	bd80      	pop	{r7, pc}

0800d142 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d142:	b580      	push	{r7, lr}
 800d144:	b082      	sub	sp, #8
 800d146:	af00      	add	r7, sp, #0
 800d148:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	691b      	ldr	r3, [r3, #16]
 800d150:	f003 0302 	and.w	r3, r3, #2
 800d154:	2b02      	cmp	r3, #2
 800d156:	d122      	bne.n	800d19e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	68db      	ldr	r3, [r3, #12]
 800d15e:	f003 0302 	and.w	r3, r3, #2
 800d162:	2b02      	cmp	r3, #2
 800d164:	d11b      	bne.n	800d19e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	f06f 0202 	mvn.w	r2, #2
 800d16e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2201      	movs	r2, #1
 800d174:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	699b      	ldr	r3, [r3, #24]
 800d17c:	f003 0303 	and.w	r3, r3, #3
 800d180:	2b00      	cmp	r3, #0
 800d182:	d003      	beq.n	800d18c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f000 fae3 	bl	800d750 <HAL_TIM_IC_CaptureCallback>
 800d18a:	e005      	b.n	800d198 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f000 fad5 	bl	800d73c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d192:	6878      	ldr	r0, [r7, #4]
 800d194:	f000 fae6 	bl	800d764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2200      	movs	r2, #0
 800d19c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	691b      	ldr	r3, [r3, #16]
 800d1a4:	f003 0304 	and.w	r3, r3, #4
 800d1a8:	2b04      	cmp	r3, #4
 800d1aa:	d122      	bne.n	800d1f2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	68db      	ldr	r3, [r3, #12]
 800d1b2:	f003 0304 	and.w	r3, r3, #4
 800d1b6:	2b04      	cmp	r3, #4
 800d1b8:	d11b      	bne.n	800d1f2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	f06f 0204 	mvn.w	r2, #4
 800d1c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2202      	movs	r2, #2
 800d1c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	699b      	ldr	r3, [r3, #24]
 800d1d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d003      	beq.n	800d1e0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	f000 fab9 	bl	800d750 <HAL_TIM_IC_CaptureCallback>
 800d1de:	e005      	b.n	800d1ec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f000 faab 	bl	800d73c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f000 fabc 	bl	800d764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	691b      	ldr	r3, [r3, #16]
 800d1f8:	f003 0308 	and.w	r3, r3, #8
 800d1fc:	2b08      	cmp	r3, #8
 800d1fe:	d122      	bne.n	800d246 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	68db      	ldr	r3, [r3, #12]
 800d206:	f003 0308 	and.w	r3, r3, #8
 800d20a:	2b08      	cmp	r3, #8
 800d20c:	d11b      	bne.n	800d246 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	f06f 0208 	mvn.w	r2, #8
 800d216:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2204      	movs	r2, #4
 800d21c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	69db      	ldr	r3, [r3, #28]
 800d224:	f003 0303 	and.w	r3, r3, #3
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d003      	beq.n	800d234 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	f000 fa8f 	bl	800d750 <HAL_TIM_IC_CaptureCallback>
 800d232:	e005      	b.n	800d240 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d234:	6878      	ldr	r0, [r7, #4]
 800d236:	f000 fa81 	bl	800d73c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d23a:	6878      	ldr	r0, [r7, #4]
 800d23c:	f000 fa92 	bl	800d764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2200      	movs	r2, #0
 800d244:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	691b      	ldr	r3, [r3, #16]
 800d24c:	f003 0310 	and.w	r3, r3, #16
 800d250:	2b10      	cmp	r3, #16
 800d252:	d122      	bne.n	800d29a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	68db      	ldr	r3, [r3, #12]
 800d25a:	f003 0310 	and.w	r3, r3, #16
 800d25e:	2b10      	cmp	r3, #16
 800d260:	d11b      	bne.n	800d29a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	f06f 0210 	mvn.w	r2, #16
 800d26a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2208      	movs	r2, #8
 800d270:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	69db      	ldr	r3, [r3, #28]
 800d278:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d003      	beq.n	800d288 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	f000 fa65 	bl	800d750 <HAL_TIM_IC_CaptureCallback>
 800d286:	e005      	b.n	800d294 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f000 fa57 	bl	800d73c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d28e:	6878      	ldr	r0, [r7, #4]
 800d290:	f000 fa68 	bl	800d764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2200      	movs	r2, #0
 800d298:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	691b      	ldr	r3, [r3, #16]
 800d2a0:	f003 0301 	and.w	r3, r3, #1
 800d2a4:	2b01      	cmp	r3, #1
 800d2a6:	d10e      	bne.n	800d2c6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	68db      	ldr	r3, [r3, #12]
 800d2ae:	f003 0301 	and.w	r3, r3, #1
 800d2b2:	2b01      	cmp	r3, #1
 800d2b4:	d107      	bne.n	800d2c6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	f06f 0201 	mvn.w	r2, #1
 800d2be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d2c0:	6878      	ldr	r0, [r7, #4]
 800d2c2:	f7f4 fcbf 	bl	8001c44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	691b      	ldr	r3, [r3, #16]
 800d2cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2d0:	2b80      	cmp	r3, #128	; 0x80
 800d2d2:	d10e      	bne.n	800d2f2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	68db      	ldr	r3, [r3, #12]
 800d2da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2de:	2b80      	cmp	r3, #128	; 0x80
 800d2e0:	d107      	bne.n	800d2f2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d2ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d2ec:	6878      	ldr	r0, [r7, #4]
 800d2ee:	f000 fe7d 	bl	800dfec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	691b      	ldr	r3, [r3, #16]
 800d2f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d300:	d10e      	bne.n	800d320 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	68db      	ldr	r3, [r3, #12]
 800d308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d30c:	2b80      	cmp	r3, #128	; 0x80
 800d30e:	d107      	bne.n	800d320 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d31a:	6878      	ldr	r0, [r7, #4]
 800d31c:	f000 fe70 	bl	800e000 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	691b      	ldr	r3, [r3, #16]
 800d326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d32a:	2b40      	cmp	r3, #64	; 0x40
 800d32c:	d10e      	bne.n	800d34c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	68db      	ldr	r3, [r3, #12]
 800d334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d338:	2b40      	cmp	r3, #64	; 0x40
 800d33a:	d107      	bne.n	800d34c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d346:	6878      	ldr	r0, [r7, #4]
 800d348:	f000 fa16 	bl	800d778 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	691b      	ldr	r3, [r3, #16]
 800d352:	f003 0320 	and.w	r3, r3, #32
 800d356:	2b20      	cmp	r3, #32
 800d358:	d10e      	bne.n	800d378 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	68db      	ldr	r3, [r3, #12]
 800d360:	f003 0320 	and.w	r3, r3, #32
 800d364:	2b20      	cmp	r3, #32
 800d366:	d107      	bne.n	800d378 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	f06f 0220 	mvn.w	r2, #32
 800d370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d372:	6878      	ldr	r0, [r7, #4]
 800d374:	f000 fe30 	bl	800dfd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d378:	bf00      	nop
 800d37a:	3708      	adds	r7, #8
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bd80      	pop	{r7, pc}

0800d380 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b086      	sub	sp, #24
 800d384:	af00      	add	r7, sp, #0
 800d386:	60f8      	str	r0, [r7, #12]
 800d388:	60b9      	str	r1, [r7, #8]
 800d38a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d38c:	2300      	movs	r3, #0
 800d38e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d396:	2b01      	cmp	r3, #1
 800d398:	d101      	bne.n	800d39e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d39a:	2302      	movs	r3, #2
 800d39c:	e0ff      	b.n	800d59e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	2201      	movs	r2, #1
 800d3a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2b14      	cmp	r3, #20
 800d3aa:	f200 80f0 	bhi.w	800d58e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d3ae:	a201      	add	r2, pc, #4	; (adr r2, 800d3b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d3b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3b4:	0800d409 	.word	0x0800d409
 800d3b8:	0800d58f 	.word	0x0800d58f
 800d3bc:	0800d58f 	.word	0x0800d58f
 800d3c0:	0800d58f 	.word	0x0800d58f
 800d3c4:	0800d449 	.word	0x0800d449
 800d3c8:	0800d58f 	.word	0x0800d58f
 800d3cc:	0800d58f 	.word	0x0800d58f
 800d3d0:	0800d58f 	.word	0x0800d58f
 800d3d4:	0800d48b 	.word	0x0800d48b
 800d3d8:	0800d58f 	.word	0x0800d58f
 800d3dc:	0800d58f 	.word	0x0800d58f
 800d3e0:	0800d58f 	.word	0x0800d58f
 800d3e4:	0800d4cb 	.word	0x0800d4cb
 800d3e8:	0800d58f 	.word	0x0800d58f
 800d3ec:	0800d58f 	.word	0x0800d58f
 800d3f0:	0800d58f 	.word	0x0800d58f
 800d3f4:	0800d50d 	.word	0x0800d50d
 800d3f8:	0800d58f 	.word	0x0800d58f
 800d3fc:	0800d58f 	.word	0x0800d58f
 800d400:	0800d58f 	.word	0x0800d58f
 800d404:	0800d54d 	.word	0x0800d54d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	68b9      	ldr	r1, [r7, #8]
 800d40e:	4618      	mov	r0, r3
 800d410:	f000 fa5c 	bl	800d8cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	699a      	ldr	r2, [r3, #24]
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	f042 0208 	orr.w	r2, r2, #8
 800d422:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	699a      	ldr	r2, [r3, #24]
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	f022 0204 	bic.w	r2, r2, #4
 800d432:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	6999      	ldr	r1, [r3, #24]
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	691a      	ldr	r2, [r3, #16]
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	430a      	orrs	r2, r1
 800d444:	619a      	str	r2, [r3, #24]
      break;
 800d446:	e0a5      	b.n	800d594 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	68b9      	ldr	r1, [r7, #8]
 800d44e:	4618      	mov	r0, r3
 800d450:	f000 faae 	bl	800d9b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	699a      	ldr	r2, [r3, #24]
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d462:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	699a      	ldr	r2, [r3, #24]
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d472:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	6999      	ldr	r1, [r3, #24]
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	691b      	ldr	r3, [r3, #16]
 800d47e:	021a      	lsls	r2, r3, #8
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	430a      	orrs	r2, r1
 800d486:	619a      	str	r2, [r3, #24]
      break;
 800d488:	e084      	b.n	800d594 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	68b9      	ldr	r1, [r7, #8]
 800d490:	4618      	mov	r0, r3
 800d492:	f000 fb05 	bl	800daa0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	69da      	ldr	r2, [r3, #28]
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	f042 0208 	orr.w	r2, r2, #8
 800d4a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	69da      	ldr	r2, [r3, #28]
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	f022 0204 	bic.w	r2, r2, #4
 800d4b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	69d9      	ldr	r1, [r3, #28]
 800d4bc:	68bb      	ldr	r3, [r7, #8]
 800d4be:	691a      	ldr	r2, [r3, #16]
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	430a      	orrs	r2, r1
 800d4c6:	61da      	str	r2, [r3, #28]
      break;
 800d4c8:	e064      	b.n	800d594 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	68b9      	ldr	r1, [r7, #8]
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f000 fb5b 	bl	800db8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	69da      	ldr	r2, [r3, #28]
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d4e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	69da      	ldr	r2, [r3, #28]
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d4f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	69d9      	ldr	r1, [r3, #28]
 800d4fc:	68bb      	ldr	r3, [r7, #8]
 800d4fe:	691b      	ldr	r3, [r3, #16]
 800d500:	021a      	lsls	r2, r3, #8
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	430a      	orrs	r2, r1
 800d508:	61da      	str	r2, [r3, #28]
      break;
 800d50a:	e043      	b.n	800d594 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	68b9      	ldr	r1, [r7, #8]
 800d512:	4618      	mov	r0, r3
 800d514:	f000 fb92 	bl	800dc3c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	f042 0208 	orr.w	r2, r2, #8
 800d526:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	f022 0204 	bic.w	r2, r2, #4
 800d536:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d53e:	68bb      	ldr	r3, [r7, #8]
 800d540:	691a      	ldr	r2, [r3, #16]
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	430a      	orrs	r2, r1
 800d548:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d54a:	e023      	b.n	800d594 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	68b9      	ldr	r1, [r7, #8]
 800d552:	4618      	mov	r0, r3
 800d554:	f000 fbc4 	bl	800dce0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d566:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d576:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d57e:	68bb      	ldr	r3, [r7, #8]
 800d580:	691b      	ldr	r3, [r3, #16]
 800d582:	021a      	lsls	r2, r3, #8
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	430a      	orrs	r2, r1
 800d58a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d58c:	e002      	b.n	800d594 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d58e:	2301      	movs	r3, #1
 800d590:	75fb      	strb	r3, [r7, #23]
      break;
 800d592:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	2200      	movs	r2, #0
 800d598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d59c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d59e:	4618      	mov	r0, r3
 800d5a0:	3718      	adds	r7, #24
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}
 800d5a6:	bf00      	nop

0800d5a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b084      	sub	sp, #16
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
 800d5b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d5bc:	2b01      	cmp	r3, #1
 800d5be:	d101      	bne.n	800d5c4 <HAL_TIM_ConfigClockSource+0x1c>
 800d5c0:	2302      	movs	r3, #2
 800d5c2:	e0b4      	b.n	800d72e <HAL_TIM_ConfigClockSource+0x186>
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2201      	movs	r2, #1
 800d5c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2202      	movs	r2, #2
 800d5d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	689b      	ldr	r3, [r3, #8]
 800d5da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d5dc:	68ba      	ldr	r2, [r7, #8]
 800d5de:	4b56      	ldr	r3, [pc, #344]	; (800d738 <HAL_TIM_ConfigClockSource+0x190>)
 800d5e0:	4013      	ands	r3, r2
 800d5e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d5ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	68ba      	ldr	r2, [r7, #8]
 800d5f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d5f4:	683b      	ldr	r3, [r7, #0]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d5fc:	d03e      	beq.n	800d67c <HAL_TIM_ConfigClockSource+0xd4>
 800d5fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d602:	f200 8087 	bhi.w	800d714 <HAL_TIM_ConfigClockSource+0x16c>
 800d606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d60a:	f000 8086 	beq.w	800d71a <HAL_TIM_ConfigClockSource+0x172>
 800d60e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d612:	d87f      	bhi.n	800d714 <HAL_TIM_ConfigClockSource+0x16c>
 800d614:	2b70      	cmp	r3, #112	; 0x70
 800d616:	d01a      	beq.n	800d64e <HAL_TIM_ConfigClockSource+0xa6>
 800d618:	2b70      	cmp	r3, #112	; 0x70
 800d61a:	d87b      	bhi.n	800d714 <HAL_TIM_ConfigClockSource+0x16c>
 800d61c:	2b60      	cmp	r3, #96	; 0x60
 800d61e:	d050      	beq.n	800d6c2 <HAL_TIM_ConfigClockSource+0x11a>
 800d620:	2b60      	cmp	r3, #96	; 0x60
 800d622:	d877      	bhi.n	800d714 <HAL_TIM_ConfigClockSource+0x16c>
 800d624:	2b50      	cmp	r3, #80	; 0x50
 800d626:	d03c      	beq.n	800d6a2 <HAL_TIM_ConfigClockSource+0xfa>
 800d628:	2b50      	cmp	r3, #80	; 0x50
 800d62a:	d873      	bhi.n	800d714 <HAL_TIM_ConfigClockSource+0x16c>
 800d62c:	2b40      	cmp	r3, #64	; 0x40
 800d62e:	d058      	beq.n	800d6e2 <HAL_TIM_ConfigClockSource+0x13a>
 800d630:	2b40      	cmp	r3, #64	; 0x40
 800d632:	d86f      	bhi.n	800d714 <HAL_TIM_ConfigClockSource+0x16c>
 800d634:	2b30      	cmp	r3, #48	; 0x30
 800d636:	d064      	beq.n	800d702 <HAL_TIM_ConfigClockSource+0x15a>
 800d638:	2b30      	cmp	r3, #48	; 0x30
 800d63a:	d86b      	bhi.n	800d714 <HAL_TIM_ConfigClockSource+0x16c>
 800d63c:	2b20      	cmp	r3, #32
 800d63e:	d060      	beq.n	800d702 <HAL_TIM_ConfigClockSource+0x15a>
 800d640:	2b20      	cmp	r3, #32
 800d642:	d867      	bhi.n	800d714 <HAL_TIM_ConfigClockSource+0x16c>
 800d644:	2b00      	cmp	r3, #0
 800d646:	d05c      	beq.n	800d702 <HAL_TIM_ConfigClockSource+0x15a>
 800d648:	2b10      	cmp	r3, #16
 800d64a:	d05a      	beq.n	800d702 <HAL_TIM_ConfigClockSource+0x15a>
 800d64c:	e062      	b.n	800d714 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d652:	683b      	ldr	r3, [r7, #0]
 800d654:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d65e:	f000 fc0d 	bl	800de7c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	689b      	ldr	r3, [r3, #8]
 800d668:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d66a:	68bb      	ldr	r3, [r7, #8]
 800d66c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d670:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	68ba      	ldr	r2, [r7, #8]
 800d678:	609a      	str	r2, [r3, #8]
      break;
 800d67a:	e04f      	b.n	800d71c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d680:	683b      	ldr	r3, [r7, #0]
 800d682:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d68c:	f000 fbf6 	bl	800de7c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	689a      	ldr	r2, [r3, #8]
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d69e:	609a      	str	r2, [r3, #8]
      break;
 800d6a0:	e03c      	b.n	800d71c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d6ae:	461a      	mov	r2, r3
 800d6b0:	f000 fb6a 	bl	800dd88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	2150      	movs	r1, #80	; 0x50
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f000 fbc3 	bl	800de46 <TIM_ITRx_SetConfig>
      break;
 800d6c0:	e02c      	b.n	800d71c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d6c6:	683b      	ldr	r3, [r7, #0]
 800d6c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d6ce:	461a      	mov	r2, r3
 800d6d0:	f000 fb89 	bl	800dde6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	2160      	movs	r1, #96	; 0x60
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f000 fbb3 	bl	800de46 <TIM_ITRx_SetConfig>
      break;
 800d6e0:	e01c      	b.n	800d71c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d6ee:	461a      	mov	r2, r3
 800d6f0:	f000 fb4a 	bl	800dd88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	2140      	movs	r1, #64	; 0x40
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	f000 fba3 	bl	800de46 <TIM_ITRx_SetConfig>
      break;
 800d700:	e00c      	b.n	800d71c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681a      	ldr	r2, [r3, #0]
 800d706:	683b      	ldr	r3, [r7, #0]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	4619      	mov	r1, r3
 800d70c:	4610      	mov	r0, r2
 800d70e:	f000 fb9a 	bl	800de46 <TIM_ITRx_SetConfig>
      break;
 800d712:	e003      	b.n	800d71c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800d714:	2301      	movs	r3, #1
 800d716:	73fb      	strb	r3, [r7, #15]
      break;
 800d718:	e000      	b.n	800d71c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800d71a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	2201      	movs	r2, #1
 800d720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2200      	movs	r2, #0
 800d728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d72c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d72e:	4618      	mov	r0, r3
 800d730:	3710      	adds	r7, #16
 800d732:	46bd      	mov	sp, r7
 800d734:	bd80      	pop	{r7, pc}
 800d736:	bf00      	nop
 800d738:	fffeff88 	.word	0xfffeff88

0800d73c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d73c:	b480      	push	{r7}
 800d73e:	b083      	sub	sp, #12
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d744:	bf00      	nop
 800d746:	370c      	adds	r7, #12
 800d748:	46bd      	mov	sp, r7
 800d74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74e:	4770      	bx	lr

0800d750 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d750:	b480      	push	{r7}
 800d752:	b083      	sub	sp, #12
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d758:	bf00      	nop
 800d75a:	370c      	adds	r7, #12
 800d75c:	46bd      	mov	sp, r7
 800d75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d762:	4770      	bx	lr

0800d764 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d764:	b480      	push	{r7}
 800d766:	b083      	sub	sp, #12
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d76c:	bf00      	nop
 800d76e:	370c      	adds	r7, #12
 800d770:	46bd      	mov	sp, r7
 800d772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d776:	4770      	bx	lr

0800d778 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d778:	b480      	push	{r7}
 800d77a:	b083      	sub	sp, #12
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d780:	bf00      	nop
 800d782:	370c      	adds	r7, #12
 800d784:	46bd      	mov	sp, r7
 800d786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78a:	4770      	bx	lr

0800d78c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d78c:	b480      	push	{r7}
 800d78e:	b085      	sub	sp, #20
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
 800d794:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	4a40      	ldr	r2, [pc, #256]	; (800d8a0 <TIM_Base_SetConfig+0x114>)
 800d7a0:	4293      	cmp	r3, r2
 800d7a2:	d013      	beq.n	800d7cc <TIM_Base_SetConfig+0x40>
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d7aa:	d00f      	beq.n	800d7cc <TIM_Base_SetConfig+0x40>
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	4a3d      	ldr	r2, [pc, #244]	; (800d8a4 <TIM_Base_SetConfig+0x118>)
 800d7b0:	4293      	cmp	r3, r2
 800d7b2:	d00b      	beq.n	800d7cc <TIM_Base_SetConfig+0x40>
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	4a3c      	ldr	r2, [pc, #240]	; (800d8a8 <TIM_Base_SetConfig+0x11c>)
 800d7b8:	4293      	cmp	r3, r2
 800d7ba:	d007      	beq.n	800d7cc <TIM_Base_SetConfig+0x40>
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	4a3b      	ldr	r2, [pc, #236]	; (800d8ac <TIM_Base_SetConfig+0x120>)
 800d7c0:	4293      	cmp	r3, r2
 800d7c2:	d003      	beq.n	800d7cc <TIM_Base_SetConfig+0x40>
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	4a3a      	ldr	r2, [pc, #232]	; (800d8b0 <TIM_Base_SetConfig+0x124>)
 800d7c8:	4293      	cmp	r3, r2
 800d7ca:	d108      	bne.n	800d7de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d7d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	685b      	ldr	r3, [r3, #4]
 800d7d8:	68fa      	ldr	r2, [r7, #12]
 800d7da:	4313      	orrs	r3, r2
 800d7dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	4a2f      	ldr	r2, [pc, #188]	; (800d8a0 <TIM_Base_SetConfig+0x114>)
 800d7e2:	4293      	cmp	r3, r2
 800d7e4:	d02b      	beq.n	800d83e <TIM_Base_SetConfig+0xb2>
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d7ec:	d027      	beq.n	800d83e <TIM_Base_SetConfig+0xb2>
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	4a2c      	ldr	r2, [pc, #176]	; (800d8a4 <TIM_Base_SetConfig+0x118>)
 800d7f2:	4293      	cmp	r3, r2
 800d7f4:	d023      	beq.n	800d83e <TIM_Base_SetConfig+0xb2>
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	4a2b      	ldr	r2, [pc, #172]	; (800d8a8 <TIM_Base_SetConfig+0x11c>)
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	d01f      	beq.n	800d83e <TIM_Base_SetConfig+0xb2>
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	4a2a      	ldr	r2, [pc, #168]	; (800d8ac <TIM_Base_SetConfig+0x120>)
 800d802:	4293      	cmp	r3, r2
 800d804:	d01b      	beq.n	800d83e <TIM_Base_SetConfig+0xb2>
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	4a29      	ldr	r2, [pc, #164]	; (800d8b0 <TIM_Base_SetConfig+0x124>)
 800d80a:	4293      	cmp	r3, r2
 800d80c:	d017      	beq.n	800d83e <TIM_Base_SetConfig+0xb2>
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	4a28      	ldr	r2, [pc, #160]	; (800d8b4 <TIM_Base_SetConfig+0x128>)
 800d812:	4293      	cmp	r3, r2
 800d814:	d013      	beq.n	800d83e <TIM_Base_SetConfig+0xb2>
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	4a27      	ldr	r2, [pc, #156]	; (800d8b8 <TIM_Base_SetConfig+0x12c>)
 800d81a:	4293      	cmp	r3, r2
 800d81c:	d00f      	beq.n	800d83e <TIM_Base_SetConfig+0xb2>
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	4a26      	ldr	r2, [pc, #152]	; (800d8bc <TIM_Base_SetConfig+0x130>)
 800d822:	4293      	cmp	r3, r2
 800d824:	d00b      	beq.n	800d83e <TIM_Base_SetConfig+0xb2>
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	4a25      	ldr	r2, [pc, #148]	; (800d8c0 <TIM_Base_SetConfig+0x134>)
 800d82a:	4293      	cmp	r3, r2
 800d82c:	d007      	beq.n	800d83e <TIM_Base_SetConfig+0xb2>
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	4a24      	ldr	r2, [pc, #144]	; (800d8c4 <TIM_Base_SetConfig+0x138>)
 800d832:	4293      	cmp	r3, r2
 800d834:	d003      	beq.n	800d83e <TIM_Base_SetConfig+0xb2>
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	4a23      	ldr	r2, [pc, #140]	; (800d8c8 <TIM_Base_SetConfig+0x13c>)
 800d83a:	4293      	cmp	r3, r2
 800d83c:	d108      	bne.n	800d850 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d844:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	68db      	ldr	r3, [r3, #12]
 800d84a:	68fa      	ldr	r2, [r7, #12]
 800d84c:	4313      	orrs	r3, r2
 800d84e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	695b      	ldr	r3, [r3, #20]
 800d85a:	4313      	orrs	r3, r2
 800d85c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	68fa      	ldr	r2, [r7, #12]
 800d862:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d864:	683b      	ldr	r3, [r7, #0]
 800d866:	689a      	ldr	r2, [r3, #8]
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	681a      	ldr	r2, [r3, #0]
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	4a0a      	ldr	r2, [pc, #40]	; (800d8a0 <TIM_Base_SetConfig+0x114>)
 800d878:	4293      	cmp	r3, r2
 800d87a:	d003      	beq.n	800d884 <TIM_Base_SetConfig+0xf8>
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	4a0c      	ldr	r2, [pc, #48]	; (800d8b0 <TIM_Base_SetConfig+0x124>)
 800d880:	4293      	cmp	r3, r2
 800d882:	d103      	bne.n	800d88c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	691a      	ldr	r2, [r3, #16]
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	2201      	movs	r2, #1
 800d890:	615a      	str	r2, [r3, #20]
}
 800d892:	bf00      	nop
 800d894:	3714      	adds	r7, #20
 800d896:	46bd      	mov	sp, r7
 800d898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89c:	4770      	bx	lr
 800d89e:	bf00      	nop
 800d8a0:	40010000 	.word	0x40010000
 800d8a4:	40000400 	.word	0x40000400
 800d8a8:	40000800 	.word	0x40000800
 800d8ac:	40000c00 	.word	0x40000c00
 800d8b0:	40010400 	.word	0x40010400
 800d8b4:	40014000 	.word	0x40014000
 800d8b8:	40014400 	.word	0x40014400
 800d8bc:	40014800 	.word	0x40014800
 800d8c0:	40001800 	.word	0x40001800
 800d8c4:	40001c00 	.word	0x40001c00
 800d8c8:	40002000 	.word	0x40002000

0800d8cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d8cc:	b480      	push	{r7}
 800d8ce:	b087      	sub	sp, #28
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
 800d8d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	6a1b      	ldr	r3, [r3, #32]
 800d8da:	f023 0201 	bic.w	r2, r3, #1
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	6a1b      	ldr	r3, [r3, #32]
 800d8e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	685b      	ldr	r3, [r3, #4]
 800d8ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	699b      	ldr	r3, [r3, #24]
 800d8f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d8f4:	68fa      	ldr	r2, [r7, #12]
 800d8f6:	4b2b      	ldr	r3, [pc, #172]	; (800d9a4 <TIM_OC1_SetConfig+0xd8>)
 800d8f8:	4013      	ands	r3, r2
 800d8fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	f023 0303 	bic.w	r3, r3, #3
 800d902:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	68fa      	ldr	r2, [r7, #12]
 800d90a:	4313      	orrs	r3, r2
 800d90c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	f023 0302 	bic.w	r3, r3, #2
 800d914:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	689b      	ldr	r3, [r3, #8]
 800d91a:	697a      	ldr	r2, [r7, #20]
 800d91c:	4313      	orrs	r3, r2
 800d91e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	4a21      	ldr	r2, [pc, #132]	; (800d9a8 <TIM_OC1_SetConfig+0xdc>)
 800d924:	4293      	cmp	r3, r2
 800d926:	d003      	beq.n	800d930 <TIM_OC1_SetConfig+0x64>
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	4a20      	ldr	r2, [pc, #128]	; (800d9ac <TIM_OC1_SetConfig+0xe0>)
 800d92c:	4293      	cmp	r3, r2
 800d92e:	d10c      	bne.n	800d94a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d930:	697b      	ldr	r3, [r7, #20]
 800d932:	f023 0308 	bic.w	r3, r3, #8
 800d936:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	68db      	ldr	r3, [r3, #12]
 800d93c:	697a      	ldr	r2, [r7, #20]
 800d93e:	4313      	orrs	r3, r2
 800d940:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d942:	697b      	ldr	r3, [r7, #20]
 800d944:	f023 0304 	bic.w	r3, r3, #4
 800d948:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	4a16      	ldr	r2, [pc, #88]	; (800d9a8 <TIM_OC1_SetConfig+0xdc>)
 800d94e:	4293      	cmp	r3, r2
 800d950:	d003      	beq.n	800d95a <TIM_OC1_SetConfig+0x8e>
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	4a15      	ldr	r2, [pc, #84]	; (800d9ac <TIM_OC1_SetConfig+0xe0>)
 800d956:	4293      	cmp	r3, r2
 800d958:	d111      	bne.n	800d97e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d95a:	693b      	ldr	r3, [r7, #16]
 800d95c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d960:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d962:	693b      	ldr	r3, [r7, #16]
 800d964:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d968:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d96a:	683b      	ldr	r3, [r7, #0]
 800d96c:	695b      	ldr	r3, [r3, #20]
 800d96e:	693a      	ldr	r2, [r7, #16]
 800d970:	4313      	orrs	r3, r2
 800d972:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	699b      	ldr	r3, [r3, #24]
 800d978:	693a      	ldr	r2, [r7, #16]
 800d97a:	4313      	orrs	r3, r2
 800d97c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	693a      	ldr	r2, [r7, #16]
 800d982:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	68fa      	ldr	r2, [r7, #12]
 800d988:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	685a      	ldr	r2, [r3, #4]
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	697a      	ldr	r2, [r7, #20]
 800d996:	621a      	str	r2, [r3, #32]
}
 800d998:	bf00      	nop
 800d99a:	371c      	adds	r7, #28
 800d99c:	46bd      	mov	sp, r7
 800d99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a2:	4770      	bx	lr
 800d9a4:	fffeff8f 	.word	0xfffeff8f
 800d9a8:	40010000 	.word	0x40010000
 800d9ac:	40010400 	.word	0x40010400

0800d9b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d9b0:	b480      	push	{r7}
 800d9b2:	b087      	sub	sp, #28
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
 800d9b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	6a1b      	ldr	r3, [r3, #32]
 800d9be:	f023 0210 	bic.w	r2, r3, #16
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	6a1b      	ldr	r3, [r3, #32]
 800d9ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	685b      	ldr	r3, [r3, #4]
 800d9d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	699b      	ldr	r3, [r3, #24]
 800d9d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d9d8:	68fa      	ldr	r2, [r7, #12]
 800d9da:	4b2e      	ldr	r3, [pc, #184]	; (800da94 <TIM_OC2_SetConfig+0xe4>)
 800d9dc:	4013      	ands	r3, r2
 800d9de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d9e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d9e8:	683b      	ldr	r3, [r7, #0]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	021b      	lsls	r3, r3, #8
 800d9ee:	68fa      	ldr	r2, [r7, #12]
 800d9f0:	4313      	orrs	r3, r2
 800d9f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d9f4:	697b      	ldr	r3, [r7, #20]
 800d9f6:	f023 0320 	bic.w	r3, r3, #32
 800d9fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d9fc:	683b      	ldr	r3, [r7, #0]
 800d9fe:	689b      	ldr	r3, [r3, #8]
 800da00:	011b      	lsls	r3, r3, #4
 800da02:	697a      	ldr	r2, [r7, #20]
 800da04:	4313      	orrs	r3, r2
 800da06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	4a23      	ldr	r2, [pc, #140]	; (800da98 <TIM_OC2_SetConfig+0xe8>)
 800da0c:	4293      	cmp	r3, r2
 800da0e:	d003      	beq.n	800da18 <TIM_OC2_SetConfig+0x68>
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	4a22      	ldr	r2, [pc, #136]	; (800da9c <TIM_OC2_SetConfig+0xec>)
 800da14:	4293      	cmp	r3, r2
 800da16:	d10d      	bne.n	800da34 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800da18:	697b      	ldr	r3, [r7, #20]
 800da1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800da1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	68db      	ldr	r3, [r3, #12]
 800da24:	011b      	lsls	r3, r3, #4
 800da26:	697a      	ldr	r2, [r7, #20]
 800da28:	4313      	orrs	r3, r2
 800da2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800da2c:	697b      	ldr	r3, [r7, #20]
 800da2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	4a18      	ldr	r2, [pc, #96]	; (800da98 <TIM_OC2_SetConfig+0xe8>)
 800da38:	4293      	cmp	r3, r2
 800da3a:	d003      	beq.n	800da44 <TIM_OC2_SetConfig+0x94>
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	4a17      	ldr	r2, [pc, #92]	; (800da9c <TIM_OC2_SetConfig+0xec>)
 800da40:	4293      	cmp	r3, r2
 800da42:	d113      	bne.n	800da6c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800da44:	693b      	ldr	r3, [r7, #16]
 800da46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800da4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800da4c:	693b      	ldr	r3, [r7, #16]
 800da4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800da52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	695b      	ldr	r3, [r3, #20]
 800da58:	009b      	lsls	r3, r3, #2
 800da5a:	693a      	ldr	r2, [r7, #16]
 800da5c:	4313      	orrs	r3, r2
 800da5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800da60:	683b      	ldr	r3, [r7, #0]
 800da62:	699b      	ldr	r3, [r3, #24]
 800da64:	009b      	lsls	r3, r3, #2
 800da66:	693a      	ldr	r2, [r7, #16]
 800da68:	4313      	orrs	r3, r2
 800da6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	693a      	ldr	r2, [r7, #16]
 800da70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	68fa      	ldr	r2, [r7, #12]
 800da76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	685a      	ldr	r2, [r3, #4]
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	697a      	ldr	r2, [r7, #20]
 800da84:	621a      	str	r2, [r3, #32]
}
 800da86:	bf00      	nop
 800da88:	371c      	adds	r7, #28
 800da8a:	46bd      	mov	sp, r7
 800da8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da90:	4770      	bx	lr
 800da92:	bf00      	nop
 800da94:	feff8fff 	.word	0xfeff8fff
 800da98:	40010000 	.word	0x40010000
 800da9c:	40010400 	.word	0x40010400

0800daa0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800daa0:	b480      	push	{r7}
 800daa2:	b087      	sub	sp, #28
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
 800daa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	6a1b      	ldr	r3, [r3, #32]
 800daae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	6a1b      	ldr	r3, [r3, #32]
 800daba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	685b      	ldr	r3, [r3, #4]
 800dac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	69db      	ldr	r3, [r3, #28]
 800dac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800dac8:	68fa      	ldr	r2, [r7, #12]
 800daca:	4b2d      	ldr	r3, [pc, #180]	; (800db80 <TIM_OC3_SetConfig+0xe0>)
 800dacc:	4013      	ands	r3, r2
 800dace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	f023 0303 	bic.w	r3, r3, #3
 800dad6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	68fa      	ldr	r2, [r7, #12]
 800dade:	4313      	orrs	r3, r2
 800dae0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dae8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	689b      	ldr	r3, [r3, #8]
 800daee:	021b      	lsls	r3, r3, #8
 800daf0:	697a      	ldr	r2, [r7, #20]
 800daf2:	4313      	orrs	r3, r2
 800daf4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	4a22      	ldr	r2, [pc, #136]	; (800db84 <TIM_OC3_SetConfig+0xe4>)
 800dafa:	4293      	cmp	r3, r2
 800dafc:	d003      	beq.n	800db06 <TIM_OC3_SetConfig+0x66>
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	4a21      	ldr	r2, [pc, #132]	; (800db88 <TIM_OC3_SetConfig+0xe8>)
 800db02:	4293      	cmp	r3, r2
 800db04:	d10d      	bne.n	800db22 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800db06:	697b      	ldr	r3, [r7, #20]
 800db08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800db0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	68db      	ldr	r3, [r3, #12]
 800db12:	021b      	lsls	r3, r3, #8
 800db14:	697a      	ldr	r2, [r7, #20]
 800db16:	4313      	orrs	r3, r2
 800db18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800db1a:	697b      	ldr	r3, [r7, #20]
 800db1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800db20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	4a17      	ldr	r2, [pc, #92]	; (800db84 <TIM_OC3_SetConfig+0xe4>)
 800db26:	4293      	cmp	r3, r2
 800db28:	d003      	beq.n	800db32 <TIM_OC3_SetConfig+0x92>
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	4a16      	ldr	r2, [pc, #88]	; (800db88 <TIM_OC3_SetConfig+0xe8>)
 800db2e:	4293      	cmp	r3, r2
 800db30:	d113      	bne.n	800db5a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800db32:	693b      	ldr	r3, [r7, #16]
 800db34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800db38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800db3a:	693b      	ldr	r3, [r7, #16]
 800db3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800db40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	695b      	ldr	r3, [r3, #20]
 800db46:	011b      	lsls	r3, r3, #4
 800db48:	693a      	ldr	r2, [r7, #16]
 800db4a:	4313      	orrs	r3, r2
 800db4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800db4e:	683b      	ldr	r3, [r7, #0]
 800db50:	699b      	ldr	r3, [r3, #24]
 800db52:	011b      	lsls	r3, r3, #4
 800db54:	693a      	ldr	r2, [r7, #16]
 800db56:	4313      	orrs	r3, r2
 800db58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	693a      	ldr	r2, [r7, #16]
 800db5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	68fa      	ldr	r2, [r7, #12]
 800db64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	685a      	ldr	r2, [r3, #4]
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	697a      	ldr	r2, [r7, #20]
 800db72:	621a      	str	r2, [r3, #32]
}
 800db74:	bf00      	nop
 800db76:	371c      	adds	r7, #28
 800db78:	46bd      	mov	sp, r7
 800db7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7e:	4770      	bx	lr
 800db80:	fffeff8f 	.word	0xfffeff8f
 800db84:	40010000 	.word	0x40010000
 800db88:	40010400 	.word	0x40010400

0800db8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800db8c:	b480      	push	{r7}
 800db8e:	b087      	sub	sp, #28
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
 800db94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	6a1b      	ldr	r3, [r3, #32]
 800db9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6a1b      	ldr	r3, [r3, #32]
 800dba6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	685b      	ldr	r3, [r3, #4]
 800dbac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	69db      	ldr	r3, [r3, #28]
 800dbb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800dbb4:	68fa      	ldr	r2, [r7, #12]
 800dbb6:	4b1e      	ldr	r3, [pc, #120]	; (800dc30 <TIM_OC4_SetConfig+0xa4>)
 800dbb8:	4013      	ands	r3, r2
 800dbba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dbc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dbc4:	683b      	ldr	r3, [r7, #0]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	021b      	lsls	r3, r3, #8
 800dbca:	68fa      	ldr	r2, [r7, #12]
 800dbcc:	4313      	orrs	r3, r2
 800dbce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800dbd0:	693b      	ldr	r3, [r7, #16]
 800dbd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dbd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	689b      	ldr	r3, [r3, #8]
 800dbdc:	031b      	lsls	r3, r3, #12
 800dbde:	693a      	ldr	r2, [r7, #16]
 800dbe0:	4313      	orrs	r3, r2
 800dbe2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	4a13      	ldr	r2, [pc, #76]	; (800dc34 <TIM_OC4_SetConfig+0xa8>)
 800dbe8:	4293      	cmp	r3, r2
 800dbea:	d003      	beq.n	800dbf4 <TIM_OC4_SetConfig+0x68>
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	4a12      	ldr	r2, [pc, #72]	; (800dc38 <TIM_OC4_SetConfig+0xac>)
 800dbf0:	4293      	cmp	r3, r2
 800dbf2:	d109      	bne.n	800dc08 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800dbf4:	697b      	ldr	r3, [r7, #20]
 800dbf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dbfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	695b      	ldr	r3, [r3, #20]
 800dc00:	019b      	lsls	r3, r3, #6
 800dc02:	697a      	ldr	r2, [r7, #20]
 800dc04:	4313      	orrs	r3, r2
 800dc06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	697a      	ldr	r2, [r7, #20]
 800dc0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	68fa      	ldr	r2, [r7, #12]
 800dc12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	685a      	ldr	r2, [r3, #4]
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	693a      	ldr	r2, [r7, #16]
 800dc20:	621a      	str	r2, [r3, #32]
}
 800dc22:	bf00      	nop
 800dc24:	371c      	adds	r7, #28
 800dc26:	46bd      	mov	sp, r7
 800dc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2c:	4770      	bx	lr
 800dc2e:	bf00      	nop
 800dc30:	feff8fff 	.word	0xfeff8fff
 800dc34:	40010000 	.word	0x40010000
 800dc38:	40010400 	.word	0x40010400

0800dc3c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800dc3c:	b480      	push	{r7}
 800dc3e:	b087      	sub	sp, #28
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
 800dc44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6a1b      	ldr	r3, [r3, #32]
 800dc4a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6a1b      	ldr	r3, [r3, #32]
 800dc56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	685b      	ldr	r3, [r3, #4]
 800dc5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800dc64:	68fa      	ldr	r2, [r7, #12]
 800dc66:	4b1b      	ldr	r3, [pc, #108]	; (800dcd4 <TIM_OC5_SetConfig+0x98>)
 800dc68:	4013      	ands	r3, r2
 800dc6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	68fa      	ldr	r2, [r7, #12]
 800dc72:	4313      	orrs	r3, r2
 800dc74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800dc76:	693b      	ldr	r3, [r7, #16]
 800dc78:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800dc7c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	689b      	ldr	r3, [r3, #8]
 800dc82:	041b      	lsls	r3, r3, #16
 800dc84:	693a      	ldr	r2, [r7, #16]
 800dc86:	4313      	orrs	r3, r2
 800dc88:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	4a12      	ldr	r2, [pc, #72]	; (800dcd8 <TIM_OC5_SetConfig+0x9c>)
 800dc8e:	4293      	cmp	r3, r2
 800dc90:	d003      	beq.n	800dc9a <TIM_OC5_SetConfig+0x5e>
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	4a11      	ldr	r2, [pc, #68]	; (800dcdc <TIM_OC5_SetConfig+0xa0>)
 800dc96:	4293      	cmp	r3, r2
 800dc98:	d109      	bne.n	800dcae <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800dc9a:	697b      	ldr	r3, [r7, #20]
 800dc9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dca0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	695b      	ldr	r3, [r3, #20]
 800dca6:	021b      	lsls	r3, r3, #8
 800dca8:	697a      	ldr	r2, [r7, #20]
 800dcaa:	4313      	orrs	r3, r2
 800dcac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	697a      	ldr	r2, [r7, #20]
 800dcb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	68fa      	ldr	r2, [r7, #12]
 800dcb8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	685a      	ldr	r2, [r3, #4]
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	693a      	ldr	r2, [r7, #16]
 800dcc6:	621a      	str	r2, [r3, #32]
}
 800dcc8:	bf00      	nop
 800dcca:	371c      	adds	r7, #28
 800dccc:	46bd      	mov	sp, r7
 800dcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd2:	4770      	bx	lr
 800dcd4:	fffeff8f 	.word	0xfffeff8f
 800dcd8:	40010000 	.word	0x40010000
 800dcdc:	40010400 	.word	0x40010400

0800dce0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800dce0:	b480      	push	{r7}
 800dce2:	b087      	sub	sp, #28
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
 800dce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	6a1b      	ldr	r3, [r3, #32]
 800dcee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	6a1b      	ldr	r3, [r3, #32]
 800dcfa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	685b      	ldr	r3, [r3, #4]
 800dd00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800dd08:	68fa      	ldr	r2, [r7, #12]
 800dd0a:	4b1c      	ldr	r3, [pc, #112]	; (800dd7c <TIM_OC6_SetConfig+0x9c>)
 800dd0c:	4013      	ands	r3, r2
 800dd0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dd10:	683b      	ldr	r3, [r7, #0]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	021b      	lsls	r3, r3, #8
 800dd16:	68fa      	ldr	r2, [r7, #12]
 800dd18:	4313      	orrs	r3, r2
 800dd1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800dd1c:	693b      	ldr	r3, [r7, #16]
 800dd1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800dd22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	689b      	ldr	r3, [r3, #8]
 800dd28:	051b      	lsls	r3, r3, #20
 800dd2a:	693a      	ldr	r2, [r7, #16]
 800dd2c:	4313      	orrs	r3, r2
 800dd2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	4a13      	ldr	r2, [pc, #76]	; (800dd80 <TIM_OC6_SetConfig+0xa0>)
 800dd34:	4293      	cmp	r3, r2
 800dd36:	d003      	beq.n	800dd40 <TIM_OC6_SetConfig+0x60>
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	4a12      	ldr	r2, [pc, #72]	; (800dd84 <TIM_OC6_SetConfig+0xa4>)
 800dd3c:	4293      	cmp	r3, r2
 800dd3e:	d109      	bne.n	800dd54 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800dd40:	697b      	ldr	r3, [r7, #20]
 800dd42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dd46:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800dd48:	683b      	ldr	r3, [r7, #0]
 800dd4a:	695b      	ldr	r3, [r3, #20]
 800dd4c:	029b      	lsls	r3, r3, #10
 800dd4e:	697a      	ldr	r2, [r7, #20]
 800dd50:	4313      	orrs	r3, r2
 800dd52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	697a      	ldr	r2, [r7, #20]
 800dd58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	68fa      	ldr	r2, [r7, #12]
 800dd5e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800dd60:	683b      	ldr	r3, [r7, #0]
 800dd62:	685a      	ldr	r2, [r3, #4]
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	693a      	ldr	r2, [r7, #16]
 800dd6c:	621a      	str	r2, [r3, #32]
}
 800dd6e:	bf00      	nop
 800dd70:	371c      	adds	r7, #28
 800dd72:	46bd      	mov	sp, r7
 800dd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd78:	4770      	bx	lr
 800dd7a:	bf00      	nop
 800dd7c:	feff8fff 	.word	0xfeff8fff
 800dd80:	40010000 	.word	0x40010000
 800dd84:	40010400 	.word	0x40010400

0800dd88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dd88:	b480      	push	{r7}
 800dd8a:	b087      	sub	sp, #28
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	60f8      	str	r0, [r7, #12]
 800dd90:	60b9      	str	r1, [r7, #8]
 800dd92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	6a1b      	ldr	r3, [r3, #32]
 800dd98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	6a1b      	ldr	r3, [r3, #32]
 800dd9e:	f023 0201 	bic.w	r2, r3, #1
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	699b      	ldr	r3, [r3, #24]
 800ddaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ddac:	693b      	ldr	r3, [r7, #16]
 800ddae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ddb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	011b      	lsls	r3, r3, #4
 800ddb8:	693a      	ldr	r2, [r7, #16]
 800ddba:	4313      	orrs	r3, r2
 800ddbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ddbe:	697b      	ldr	r3, [r7, #20]
 800ddc0:	f023 030a 	bic.w	r3, r3, #10
 800ddc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ddc6:	697a      	ldr	r2, [r7, #20]
 800ddc8:	68bb      	ldr	r3, [r7, #8]
 800ddca:	4313      	orrs	r3, r2
 800ddcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	693a      	ldr	r2, [r7, #16]
 800ddd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	697a      	ldr	r2, [r7, #20]
 800ddd8:	621a      	str	r2, [r3, #32]
}
 800ddda:	bf00      	nop
 800dddc:	371c      	adds	r7, #28
 800ddde:	46bd      	mov	sp, r7
 800dde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde4:	4770      	bx	lr

0800dde6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dde6:	b480      	push	{r7}
 800dde8:	b087      	sub	sp, #28
 800ddea:	af00      	add	r7, sp, #0
 800ddec:	60f8      	str	r0, [r7, #12]
 800ddee:	60b9      	str	r1, [r7, #8]
 800ddf0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	6a1b      	ldr	r3, [r3, #32]
 800ddf6:	f023 0210 	bic.w	r2, r3, #16
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	699b      	ldr	r3, [r3, #24]
 800de02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	6a1b      	ldr	r3, [r3, #32]
 800de08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800de0a:	697b      	ldr	r3, [r7, #20]
 800de0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800de10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	031b      	lsls	r3, r3, #12
 800de16:	697a      	ldr	r2, [r7, #20]
 800de18:	4313      	orrs	r3, r2
 800de1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800de1c:	693b      	ldr	r3, [r7, #16]
 800de1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800de22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800de24:	68bb      	ldr	r3, [r7, #8]
 800de26:	011b      	lsls	r3, r3, #4
 800de28:	693a      	ldr	r2, [r7, #16]
 800de2a:	4313      	orrs	r3, r2
 800de2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	697a      	ldr	r2, [r7, #20]
 800de32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	693a      	ldr	r2, [r7, #16]
 800de38:	621a      	str	r2, [r3, #32]
}
 800de3a:	bf00      	nop
 800de3c:	371c      	adds	r7, #28
 800de3e:	46bd      	mov	sp, r7
 800de40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de44:	4770      	bx	lr

0800de46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800de46:	b480      	push	{r7}
 800de48:	b085      	sub	sp, #20
 800de4a:	af00      	add	r7, sp, #0
 800de4c:	6078      	str	r0, [r7, #4]
 800de4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	689b      	ldr	r3, [r3, #8]
 800de54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800de5e:	683a      	ldr	r2, [r7, #0]
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	4313      	orrs	r3, r2
 800de64:	f043 0307 	orr.w	r3, r3, #7
 800de68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	68fa      	ldr	r2, [r7, #12]
 800de6e:	609a      	str	r2, [r3, #8]
}
 800de70:	bf00      	nop
 800de72:	3714      	adds	r7, #20
 800de74:	46bd      	mov	sp, r7
 800de76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7a:	4770      	bx	lr

0800de7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800de7c:	b480      	push	{r7}
 800de7e:	b087      	sub	sp, #28
 800de80:	af00      	add	r7, sp, #0
 800de82:	60f8      	str	r0, [r7, #12]
 800de84:	60b9      	str	r1, [r7, #8]
 800de86:	607a      	str	r2, [r7, #4]
 800de88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	689b      	ldr	r3, [r3, #8]
 800de8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800de90:	697b      	ldr	r3, [r7, #20]
 800de92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800de96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	021a      	lsls	r2, r3, #8
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	431a      	orrs	r2, r3
 800dea0:	68bb      	ldr	r3, [r7, #8]
 800dea2:	4313      	orrs	r3, r2
 800dea4:	697a      	ldr	r2, [r7, #20]
 800dea6:	4313      	orrs	r3, r2
 800dea8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	697a      	ldr	r2, [r7, #20]
 800deae:	609a      	str	r2, [r3, #8]
}
 800deb0:	bf00      	nop
 800deb2:	371c      	adds	r7, #28
 800deb4:	46bd      	mov	sp, r7
 800deb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deba:	4770      	bx	lr

0800debc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800debc:	b480      	push	{r7}
 800debe:	b085      	sub	sp, #20
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
 800dec4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800decc:	2b01      	cmp	r3, #1
 800dece:	d101      	bne.n	800ded4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ded0:	2302      	movs	r3, #2
 800ded2:	e06d      	b.n	800dfb0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	2201      	movs	r2, #1
 800ded8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2202      	movs	r2, #2
 800dee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	685b      	ldr	r3, [r3, #4]
 800deea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	689b      	ldr	r3, [r3, #8]
 800def2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	4a30      	ldr	r2, [pc, #192]	; (800dfbc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800defa:	4293      	cmp	r3, r2
 800defc:	d004      	beq.n	800df08 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	4a2f      	ldr	r2, [pc, #188]	; (800dfc0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800df04:	4293      	cmp	r3, r2
 800df06:	d108      	bne.n	800df1a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800df0e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	685b      	ldr	r3, [r3, #4]
 800df14:	68fa      	ldr	r2, [r7, #12]
 800df16:	4313      	orrs	r3, r2
 800df18:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df20:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800df22:	683b      	ldr	r3, [r7, #0]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	68fa      	ldr	r2, [r7, #12]
 800df28:	4313      	orrs	r3, r2
 800df2a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	68fa      	ldr	r2, [r7, #12]
 800df32:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	4a20      	ldr	r2, [pc, #128]	; (800dfbc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800df3a:	4293      	cmp	r3, r2
 800df3c:	d022      	beq.n	800df84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800df46:	d01d      	beq.n	800df84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	4a1d      	ldr	r2, [pc, #116]	; (800dfc4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800df4e:	4293      	cmp	r3, r2
 800df50:	d018      	beq.n	800df84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	4a1c      	ldr	r2, [pc, #112]	; (800dfc8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800df58:	4293      	cmp	r3, r2
 800df5a:	d013      	beq.n	800df84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	4a1a      	ldr	r2, [pc, #104]	; (800dfcc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800df62:	4293      	cmp	r3, r2
 800df64:	d00e      	beq.n	800df84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	4a15      	ldr	r2, [pc, #84]	; (800dfc0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800df6c:	4293      	cmp	r3, r2
 800df6e:	d009      	beq.n	800df84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	4a16      	ldr	r2, [pc, #88]	; (800dfd0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800df76:	4293      	cmp	r3, r2
 800df78:	d004      	beq.n	800df84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	4a15      	ldr	r2, [pc, #84]	; (800dfd4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800df80:	4293      	cmp	r3, r2
 800df82:	d10c      	bne.n	800df9e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800df84:	68bb      	ldr	r3, [r7, #8]
 800df86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800df8a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800df8c:	683b      	ldr	r3, [r7, #0]
 800df8e:	689b      	ldr	r3, [r3, #8]
 800df90:	68ba      	ldr	r2, [r7, #8]
 800df92:	4313      	orrs	r3, r2
 800df94:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	68ba      	ldr	r2, [r7, #8]
 800df9c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	2201      	movs	r2, #1
 800dfa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dfae:	2300      	movs	r3, #0
}
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	3714      	adds	r7, #20
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfba:	4770      	bx	lr
 800dfbc:	40010000 	.word	0x40010000
 800dfc0:	40010400 	.word	0x40010400
 800dfc4:	40000400 	.word	0x40000400
 800dfc8:	40000800 	.word	0x40000800
 800dfcc:	40000c00 	.word	0x40000c00
 800dfd0:	40014000 	.word	0x40014000
 800dfd4:	40001800 	.word	0x40001800

0800dfd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dfd8:	b480      	push	{r7}
 800dfda:	b083      	sub	sp, #12
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dfe0:	bf00      	nop
 800dfe2:	370c      	adds	r7, #12
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfea:	4770      	bx	lr

0800dfec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dfec:	b480      	push	{r7}
 800dfee:	b083      	sub	sp, #12
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dff4:	bf00      	nop
 800dff6:	370c      	adds	r7, #12
 800dff8:	46bd      	mov	sp, r7
 800dffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffe:	4770      	bx	lr

0800e000 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e000:	b480      	push	{r7}
 800e002:	b083      	sub	sp, #12
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e008:	bf00      	nop
 800e00a:	370c      	adds	r7, #12
 800e00c:	46bd      	mov	sp, r7
 800e00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e012:	4770      	bx	lr

0800e014 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b082      	sub	sp, #8
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d101      	bne.n	800e026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e022:	2301      	movs	r3, #1
 800e024:	e040      	b.n	800e0a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d106      	bne.n	800e03c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	2200      	movs	r2, #0
 800e032:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e036:	6878      	ldr	r0, [r7, #4]
 800e038:	f7f4 fd34 	bl	8002aa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	2224      	movs	r2, #36	; 0x24
 800e040:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	681a      	ldr	r2, [r3, #0]
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	f022 0201 	bic.w	r2, r2, #1
 800e050:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e052:	6878      	ldr	r0, [r7, #4]
 800e054:	f000 f8b0 	bl	800e1b8 <UART_SetConfig>
 800e058:	4603      	mov	r3, r0
 800e05a:	2b01      	cmp	r3, #1
 800e05c:	d101      	bne.n	800e062 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800e05e:	2301      	movs	r3, #1
 800e060:	e022      	b.n	800e0a8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e066:	2b00      	cmp	r3, #0
 800e068:	d002      	beq.n	800e070 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800e06a:	6878      	ldr	r0, [r7, #4]
 800e06c:	f000 fb08 	bl	800e680 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	685a      	ldr	r2, [r3, #4]
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e07e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	689a      	ldr	r2, [r3, #8]
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e08e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	681a      	ldr	r2, [r3, #0]
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	f042 0201 	orr.w	r2, r2, #1
 800e09e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e0a0:	6878      	ldr	r0, [r7, #4]
 800e0a2:	f000 fb8f 	bl	800e7c4 <UART_CheckIdleState>
 800e0a6:	4603      	mov	r3, r0
}
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	3708      	adds	r7, #8
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}

0800e0b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b08a      	sub	sp, #40	; 0x28
 800e0b4:	af02      	add	r7, sp, #8
 800e0b6:	60f8      	str	r0, [r7, #12]
 800e0b8:	60b9      	str	r1, [r7, #8]
 800e0ba:	603b      	str	r3, [r7, #0]
 800e0bc:	4613      	mov	r3, r2
 800e0be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0c4:	2b20      	cmp	r3, #32
 800e0c6:	d171      	bne.n	800e1ac <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800e0c8:	68bb      	ldr	r3, [r7, #8]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d002      	beq.n	800e0d4 <HAL_UART_Transmit+0x24>
 800e0ce:	88fb      	ldrh	r3, [r7, #6]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d101      	bne.n	800e0d8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800e0d4:	2301      	movs	r3, #1
 800e0d6:	e06a      	b.n	800e1ae <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	2200      	movs	r2, #0
 800e0dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	2221      	movs	r2, #33	; 0x21
 800e0e4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e0e6:	f7f6 fe0b 	bl	8004d00 <HAL_GetTick>
 800e0ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	88fa      	ldrh	r2, [r7, #6]
 800e0f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	88fa      	ldrh	r2, [r7, #6]
 800e0f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	689b      	ldr	r3, [r3, #8]
 800e100:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e104:	d108      	bne.n	800e118 <HAL_UART_Transmit+0x68>
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	691b      	ldr	r3, [r3, #16]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d104      	bne.n	800e118 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800e10e:	2300      	movs	r3, #0
 800e110:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e112:	68bb      	ldr	r3, [r7, #8]
 800e114:	61bb      	str	r3, [r7, #24]
 800e116:	e003      	b.n	800e120 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e11c:	2300      	movs	r3, #0
 800e11e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e120:	e02c      	b.n	800e17c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e122:	683b      	ldr	r3, [r7, #0]
 800e124:	9300      	str	r3, [sp, #0]
 800e126:	697b      	ldr	r3, [r7, #20]
 800e128:	2200      	movs	r2, #0
 800e12a:	2180      	movs	r1, #128	; 0x80
 800e12c:	68f8      	ldr	r0, [r7, #12]
 800e12e:	f000 fb96 	bl	800e85e <UART_WaitOnFlagUntilTimeout>
 800e132:	4603      	mov	r3, r0
 800e134:	2b00      	cmp	r3, #0
 800e136:	d001      	beq.n	800e13c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800e138:	2303      	movs	r3, #3
 800e13a:	e038      	b.n	800e1ae <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800e13c:	69fb      	ldr	r3, [r7, #28]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d10b      	bne.n	800e15a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e142:	69bb      	ldr	r3, [r7, #24]
 800e144:	881b      	ldrh	r3, [r3, #0]
 800e146:	461a      	mov	r2, r3
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e150:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e152:	69bb      	ldr	r3, [r7, #24]
 800e154:	3302      	adds	r3, #2
 800e156:	61bb      	str	r3, [r7, #24]
 800e158:	e007      	b.n	800e16a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e15a:	69fb      	ldr	r3, [r7, #28]
 800e15c:	781a      	ldrb	r2, [r3, #0]
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e164:	69fb      	ldr	r3, [r7, #28]
 800e166:	3301      	adds	r3, #1
 800e168:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e170:	b29b      	uxth	r3, r3
 800e172:	3b01      	subs	r3, #1
 800e174:	b29a      	uxth	r2, r3
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e182:	b29b      	uxth	r3, r3
 800e184:	2b00      	cmp	r3, #0
 800e186:	d1cc      	bne.n	800e122 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e188:	683b      	ldr	r3, [r7, #0]
 800e18a:	9300      	str	r3, [sp, #0]
 800e18c:	697b      	ldr	r3, [r7, #20]
 800e18e:	2200      	movs	r2, #0
 800e190:	2140      	movs	r1, #64	; 0x40
 800e192:	68f8      	ldr	r0, [r7, #12]
 800e194:	f000 fb63 	bl	800e85e <UART_WaitOnFlagUntilTimeout>
 800e198:	4603      	mov	r3, r0
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d001      	beq.n	800e1a2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800e19e:	2303      	movs	r3, #3
 800e1a0:	e005      	b.n	800e1ae <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	2220      	movs	r2, #32
 800e1a6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	e000      	b.n	800e1ae <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800e1ac:	2302      	movs	r3, #2
  }
}
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	3720      	adds	r7, #32
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	bd80      	pop	{r7, pc}
	...

0800e1b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b088      	sub	sp, #32
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	689a      	ldr	r2, [r3, #8]
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	691b      	ldr	r3, [r3, #16]
 800e1cc:	431a      	orrs	r2, r3
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	695b      	ldr	r3, [r3, #20]
 800e1d2:	431a      	orrs	r2, r3
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	69db      	ldr	r3, [r3, #28]
 800e1d8:	4313      	orrs	r3, r2
 800e1da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	681a      	ldr	r2, [r3, #0]
 800e1e2:	4ba6      	ldr	r3, [pc, #664]	; (800e47c <UART_SetConfig+0x2c4>)
 800e1e4:	4013      	ands	r3, r2
 800e1e6:	687a      	ldr	r2, [r7, #4]
 800e1e8:	6812      	ldr	r2, [r2, #0]
 800e1ea:	6979      	ldr	r1, [r7, #20]
 800e1ec:	430b      	orrs	r3, r1
 800e1ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	685b      	ldr	r3, [r3, #4]
 800e1f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	68da      	ldr	r2, [r3, #12]
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	430a      	orrs	r2, r1
 800e204:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	699b      	ldr	r3, [r3, #24]
 800e20a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	6a1b      	ldr	r3, [r3, #32]
 800e210:	697a      	ldr	r2, [r7, #20]
 800e212:	4313      	orrs	r3, r2
 800e214:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	689b      	ldr	r3, [r3, #8]
 800e21c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	697a      	ldr	r2, [r7, #20]
 800e226:	430a      	orrs	r2, r1
 800e228:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	4a94      	ldr	r2, [pc, #592]	; (800e480 <UART_SetConfig+0x2c8>)
 800e230:	4293      	cmp	r3, r2
 800e232:	d120      	bne.n	800e276 <UART_SetConfig+0xbe>
 800e234:	4b93      	ldr	r3, [pc, #588]	; (800e484 <UART_SetConfig+0x2cc>)
 800e236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e23a:	f003 0303 	and.w	r3, r3, #3
 800e23e:	2b03      	cmp	r3, #3
 800e240:	d816      	bhi.n	800e270 <UART_SetConfig+0xb8>
 800e242:	a201      	add	r2, pc, #4	; (adr r2, 800e248 <UART_SetConfig+0x90>)
 800e244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e248:	0800e259 	.word	0x0800e259
 800e24c:	0800e265 	.word	0x0800e265
 800e250:	0800e25f 	.word	0x0800e25f
 800e254:	0800e26b 	.word	0x0800e26b
 800e258:	2301      	movs	r3, #1
 800e25a:	77fb      	strb	r3, [r7, #31]
 800e25c:	e150      	b.n	800e500 <UART_SetConfig+0x348>
 800e25e:	2302      	movs	r3, #2
 800e260:	77fb      	strb	r3, [r7, #31]
 800e262:	e14d      	b.n	800e500 <UART_SetConfig+0x348>
 800e264:	2304      	movs	r3, #4
 800e266:	77fb      	strb	r3, [r7, #31]
 800e268:	e14a      	b.n	800e500 <UART_SetConfig+0x348>
 800e26a:	2308      	movs	r3, #8
 800e26c:	77fb      	strb	r3, [r7, #31]
 800e26e:	e147      	b.n	800e500 <UART_SetConfig+0x348>
 800e270:	2310      	movs	r3, #16
 800e272:	77fb      	strb	r3, [r7, #31]
 800e274:	e144      	b.n	800e500 <UART_SetConfig+0x348>
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	4a83      	ldr	r2, [pc, #524]	; (800e488 <UART_SetConfig+0x2d0>)
 800e27c:	4293      	cmp	r3, r2
 800e27e:	d132      	bne.n	800e2e6 <UART_SetConfig+0x12e>
 800e280:	4b80      	ldr	r3, [pc, #512]	; (800e484 <UART_SetConfig+0x2cc>)
 800e282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e286:	f003 030c 	and.w	r3, r3, #12
 800e28a:	2b0c      	cmp	r3, #12
 800e28c:	d828      	bhi.n	800e2e0 <UART_SetConfig+0x128>
 800e28e:	a201      	add	r2, pc, #4	; (adr r2, 800e294 <UART_SetConfig+0xdc>)
 800e290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e294:	0800e2c9 	.word	0x0800e2c9
 800e298:	0800e2e1 	.word	0x0800e2e1
 800e29c:	0800e2e1 	.word	0x0800e2e1
 800e2a0:	0800e2e1 	.word	0x0800e2e1
 800e2a4:	0800e2d5 	.word	0x0800e2d5
 800e2a8:	0800e2e1 	.word	0x0800e2e1
 800e2ac:	0800e2e1 	.word	0x0800e2e1
 800e2b0:	0800e2e1 	.word	0x0800e2e1
 800e2b4:	0800e2cf 	.word	0x0800e2cf
 800e2b8:	0800e2e1 	.word	0x0800e2e1
 800e2bc:	0800e2e1 	.word	0x0800e2e1
 800e2c0:	0800e2e1 	.word	0x0800e2e1
 800e2c4:	0800e2db 	.word	0x0800e2db
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	77fb      	strb	r3, [r7, #31]
 800e2cc:	e118      	b.n	800e500 <UART_SetConfig+0x348>
 800e2ce:	2302      	movs	r3, #2
 800e2d0:	77fb      	strb	r3, [r7, #31]
 800e2d2:	e115      	b.n	800e500 <UART_SetConfig+0x348>
 800e2d4:	2304      	movs	r3, #4
 800e2d6:	77fb      	strb	r3, [r7, #31]
 800e2d8:	e112      	b.n	800e500 <UART_SetConfig+0x348>
 800e2da:	2308      	movs	r3, #8
 800e2dc:	77fb      	strb	r3, [r7, #31]
 800e2de:	e10f      	b.n	800e500 <UART_SetConfig+0x348>
 800e2e0:	2310      	movs	r3, #16
 800e2e2:	77fb      	strb	r3, [r7, #31]
 800e2e4:	e10c      	b.n	800e500 <UART_SetConfig+0x348>
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	4a68      	ldr	r2, [pc, #416]	; (800e48c <UART_SetConfig+0x2d4>)
 800e2ec:	4293      	cmp	r3, r2
 800e2ee:	d120      	bne.n	800e332 <UART_SetConfig+0x17a>
 800e2f0:	4b64      	ldr	r3, [pc, #400]	; (800e484 <UART_SetConfig+0x2cc>)
 800e2f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2f6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e2fa:	2b30      	cmp	r3, #48	; 0x30
 800e2fc:	d013      	beq.n	800e326 <UART_SetConfig+0x16e>
 800e2fe:	2b30      	cmp	r3, #48	; 0x30
 800e300:	d814      	bhi.n	800e32c <UART_SetConfig+0x174>
 800e302:	2b20      	cmp	r3, #32
 800e304:	d009      	beq.n	800e31a <UART_SetConfig+0x162>
 800e306:	2b20      	cmp	r3, #32
 800e308:	d810      	bhi.n	800e32c <UART_SetConfig+0x174>
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d002      	beq.n	800e314 <UART_SetConfig+0x15c>
 800e30e:	2b10      	cmp	r3, #16
 800e310:	d006      	beq.n	800e320 <UART_SetConfig+0x168>
 800e312:	e00b      	b.n	800e32c <UART_SetConfig+0x174>
 800e314:	2300      	movs	r3, #0
 800e316:	77fb      	strb	r3, [r7, #31]
 800e318:	e0f2      	b.n	800e500 <UART_SetConfig+0x348>
 800e31a:	2302      	movs	r3, #2
 800e31c:	77fb      	strb	r3, [r7, #31]
 800e31e:	e0ef      	b.n	800e500 <UART_SetConfig+0x348>
 800e320:	2304      	movs	r3, #4
 800e322:	77fb      	strb	r3, [r7, #31]
 800e324:	e0ec      	b.n	800e500 <UART_SetConfig+0x348>
 800e326:	2308      	movs	r3, #8
 800e328:	77fb      	strb	r3, [r7, #31]
 800e32a:	e0e9      	b.n	800e500 <UART_SetConfig+0x348>
 800e32c:	2310      	movs	r3, #16
 800e32e:	77fb      	strb	r3, [r7, #31]
 800e330:	e0e6      	b.n	800e500 <UART_SetConfig+0x348>
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	4a56      	ldr	r2, [pc, #344]	; (800e490 <UART_SetConfig+0x2d8>)
 800e338:	4293      	cmp	r3, r2
 800e33a:	d120      	bne.n	800e37e <UART_SetConfig+0x1c6>
 800e33c:	4b51      	ldr	r3, [pc, #324]	; (800e484 <UART_SetConfig+0x2cc>)
 800e33e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e342:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e346:	2bc0      	cmp	r3, #192	; 0xc0
 800e348:	d013      	beq.n	800e372 <UART_SetConfig+0x1ba>
 800e34a:	2bc0      	cmp	r3, #192	; 0xc0
 800e34c:	d814      	bhi.n	800e378 <UART_SetConfig+0x1c0>
 800e34e:	2b80      	cmp	r3, #128	; 0x80
 800e350:	d009      	beq.n	800e366 <UART_SetConfig+0x1ae>
 800e352:	2b80      	cmp	r3, #128	; 0x80
 800e354:	d810      	bhi.n	800e378 <UART_SetConfig+0x1c0>
 800e356:	2b00      	cmp	r3, #0
 800e358:	d002      	beq.n	800e360 <UART_SetConfig+0x1a8>
 800e35a:	2b40      	cmp	r3, #64	; 0x40
 800e35c:	d006      	beq.n	800e36c <UART_SetConfig+0x1b4>
 800e35e:	e00b      	b.n	800e378 <UART_SetConfig+0x1c0>
 800e360:	2300      	movs	r3, #0
 800e362:	77fb      	strb	r3, [r7, #31]
 800e364:	e0cc      	b.n	800e500 <UART_SetConfig+0x348>
 800e366:	2302      	movs	r3, #2
 800e368:	77fb      	strb	r3, [r7, #31]
 800e36a:	e0c9      	b.n	800e500 <UART_SetConfig+0x348>
 800e36c:	2304      	movs	r3, #4
 800e36e:	77fb      	strb	r3, [r7, #31]
 800e370:	e0c6      	b.n	800e500 <UART_SetConfig+0x348>
 800e372:	2308      	movs	r3, #8
 800e374:	77fb      	strb	r3, [r7, #31]
 800e376:	e0c3      	b.n	800e500 <UART_SetConfig+0x348>
 800e378:	2310      	movs	r3, #16
 800e37a:	77fb      	strb	r3, [r7, #31]
 800e37c:	e0c0      	b.n	800e500 <UART_SetConfig+0x348>
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	4a44      	ldr	r2, [pc, #272]	; (800e494 <UART_SetConfig+0x2dc>)
 800e384:	4293      	cmp	r3, r2
 800e386:	d125      	bne.n	800e3d4 <UART_SetConfig+0x21c>
 800e388:	4b3e      	ldr	r3, [pc, #248]	; (800e484 <UART_SetConfig+0x2cc>)
 800e38a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e38e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e392:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e396:	d017      	beq.n	800e3c8 <UART_SetConfig+0x210>
 800e398:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e39c:	d817      	bhi.n	800e3ce <UART_SetConfig+0x216>
 800e39e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e3a2:	d00b      	beq.n	800e3bc <UART_SetConfig+0x204>
 800e3a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e3a8:	d811      	bhi.n	800e3ce <UART_SetConfig+0x216>
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d003      	beq.n	800e3b6 <UART_SetConfig+0x1fe>
 800e3ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e3b2:	d006      	beq.n	800e3c2 <UART_SetConfig+0x20a>
 800e3b4:	e00b      	b.n	800e3ce <UART_SetConfig+0x216>
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	77fb      	strb	r3, [r7, #31]
 800e3ba:	e0a1      	b.n	800e500 <UART_SetConfig+0x348>
 800e3bc:	2302      	movs	r3, #2
 800e3be:	77fb      	strb	r3, [r7, #31]
 800e3c0:	e09e      	b.n	800e500 <UART_SetConfig+0x348>
 800e3c2:	2304      	movs	r3, #4
 800e3c4:	77fb      	strb	r3, [r7, #31]
 800e3c6:	e09b      	b.n	800e500 <UART_SetConfig+0x348>
 800e3c8:	2308      	movs	r3, #8
 800e3ca:	77fb      	strb	r3, [r7, #31]
 800e3cc:	e098      	b.n	800e500 <UART_SetConfig+0x348>
 800e3ce:	2310      	movs	r3, #16
 800e3d0:	77fb      	strb	r3, [r7, #31]
 800e3d2:	e095      	b.n	800e500 <UART_SetConfig+0x348>
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	4a2f      	ldr	r2, [pc, #188]	; (800e498 <UART_SetConfig+0x2e0>)
 800e3da:	4293      	cmp	r3, r2
 800e3dc:	d125      	bne.n	800e42a <UART_SetConfig+0x272>
 800e3de:	4b29      	ldr	r3, [pc, #164]	; (800e484 <UART_SetConfig+0x2cc>)
 800e3e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e3e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e3ec:	d017      	beq.n	800e41e <UART_SetConfig+0x266>
 800e3ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e3f2:	d817      	bhi.n	800e424 <UART_SetConfig+0x26c>
 800e3f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e3f8:	d00b      	beq.n	800e412 <UART_SetConfig+0x25a>
 800e3fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e3fe:	d811      	bhi.n	800e424 <UART_SetConfig+0x26c>
 800e400:	2b00      	cmp	r3, #0
 800e402:	d003      	beq.n	800e40c <UART_SetConfig+0x254>
 800e404:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e408:	d006      	beq.n	800e418 <UART_SetConfig+0x260>
 800e40a:	e00b      	b.n	800e424 <UART_SetConfig+0x26c>
 800e40c:	2301      	movs	r3, #1
 800e40e:	77fb      	strb	r3, [r7, #31]
 800e410:	e076      	b.n	800e500 <UART_SetConfig+0x348>
 800e412:	2302      	movs	r3, #2
 800e414:	77fb      	strb	r3, [r7, #31]
 800e416:	e073      	b.n	800e500 <UART_SetConfig+0x348>
 800e418:	2304      	movs	r3, #4
 800e41a:	77fb      	strb	r3, [r7, #31]
 800e41c:	e070      	b.n	800e500 <UART_SetConfig+0x348>
 800e41e:	2308      	movs	r3, #8
 800e420:	77fb      	strb	r3, [r7, #31]
 800e422:	e06d      	b.n	800e500 <UART_SetConfig+0x348>
 800e424:	2310      	movs	r3, #16
 800e426:	77fb      	strb	r3, [r7, #31]
 800e428:	e06a      	b.n	800e500 <UART_SetConfig+0x348>
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	4a1b      	ldr	r2, [pc, #108]	; (800e49c <UART_SetConfig+0x2e4>)
 800e430:	4293      	cmp	r3, r2
 800e432:	d138      	bne.n	800e4a6 <UART_SetConfig+0x2ee>
 800e434:	4b13      	ldr	r3, [pc, #76]	; (800e484 <UART_SetConfig+0x2cc>)
 800e436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e43a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800e43e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e442:	d017      	beq.n	800e474 <UART_SetConfig+0x2bc>
 800e444:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e448:	d82a      	bhi.n	800e4a0 <UART_SetConfig+0x2e8>
 800e44a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e44e:	d00b      	beq.n	800e468 <UART_SetConfig+0x2b0>
 800e450:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e454:	d824      	bhi.n	800e4a0 <UART_SetConfig+0x2e8>
 800e456:	2b00      	cmp	r3, #0
 800e458:	d003      	beq.n	800e462 <UART_SetConfig+0x2aa>
 800e45a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e45e:	d006      	beq.n	800e46e <UART_SetConfig+0x2b6>
 800e460:	e01e      	b.n	800e4a0 <UART_SetConfig+0x2e8>
 800e462:	2300      	movs	r3, #0
 800e464:	77fb      	strb	r3, [r7, #31]
 800e466:	e04b      	b.n	800e500 <UART_SetConfig+0x348>
 800e468:	2302      	movs	r3, #2
 800e46a:	77fb      	strb	r3, [r7, #31]
 800e46c:	e048      	b.n	800e500 <UART_SetConfig+0x348>
 800e46e:	2304      	movs	r3, #4
 800e470:	77fb      	strb	r3, [r7, #31]
 800e472:	e045      	b.n	800e500 <UART_SetConfig+0x348>
 800e474:	2308      	movs	r3, #8
 800e476:	77fb      	strb	r3, [r7, #31]
 800e478:	e042      	b.n	800e500 <UART_SetConfig+0x348>
 800e47a:	bf00      	nop
 800e47c:	efff69f3 	.word	0xefff69f3
 800e480:	40011000 	.word	0x40011000
 800e484:	40023800 	.word	0x40023800
 800e488:	40004400 	.word	0x40004400
 800e48c:	40004800 	.word	0x40004800
 800e490:	40004c00 	.word	0x40004c00
 800e494:	40005000 	.word	0x40005000
 800e498:	40011400 	.word	0x40011400
 800e49c:	40007800 	.word	0x40007800
 800e4a0:	2310      	movs	r3, #16
 800e4a2:	77fb      	strb	r3, [r7, #31]
 800e4a4:	e02c      	b.n	800e500 <UART_SetConfig+0x348>
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	4a72      	ldr	r2, [pc, #456]	; (800e674 <UART_SetConfig+0x4bc>)
 800e4ac:	4293      	cmp	r3, r2
 800e4ae:	d125      	bne.n	800e4fc <UART_SetConfig+0x344>
 800e4b0:	4b71      	ldr	r3, [pc, #452]	; (800e678 <UART_SetConfig+0x4c0>)
 800e4b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4b6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e4ba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e4be:	d017      	beq.n	800e4f0 <UART_SetConfig+0x338>
 800e4c0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e4c4:	d817      	bhi.n	800e4f6 <UART_SetConfig+0x33e>
 800e4c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e4ca:	d00b      	beq.n	800e4e4 <UART_SetConfig+0x32c>
 800e4cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e4d0:	d811      	bhi.n	800e4f6 <UART_SetConfig+0x33e>
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d003      	beq.n	800e4de <UART_SetConfig+0x326>
 800e4d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e4da:	d006      	beq.n	800e4ea <UART_SetConfig+0x332>
 800e4dc:	e00b      	b.n	800e4f6 <UART_SetConfig+0x33e>
 800e4de:	2300      	movs	r3, #0
 800e4e0:	77fb      	strb	r3, [r7, #31]
 800e4e2:	e00d      	b.n	800e500 <UART_SetConfig+0x348>
 800e4e4:	2302      	movs	r3, #2
 800e4e6:	77fb      	strb	r3, [r7, #31]
 800e4e8:	e00a      	b.n	800e500 <UART_SetConfig+0x348>
 800e4ea:	2304      	movs	r3, #4
 800e4ec:	77fb      	strb	r3, [r7, #31]
 800e4ee:	e007      	b.n	800e500 <UART_SetConfig+0x348>
 800e4f0:	2308      	movs	r3, #8
 800e4f2:	77fb      	strb	r3, [r7, #31]
 800e4f4:	e004      	b.n	800e500 <UART_SetConfig+0x348>
 800e4f6:	2310      	movs	r3, #16
 800e4f8:	77fb      	strb	r3, [r7, #31]
 800e4fa:	e001      	b.n	800e500 <UART_SetConfig+0x348>
 800e4fc:	2310      	movs	r3, #16
 800e4fe:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	69db      	ldr	r3, [r3, #28]
 800e504:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e508:	d15b      	bne.n	800e5c2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800e50a:	7ffb      	ldrb	r3, [r7, #31]
 800e50c:	2b08      	cmp	r3, #8
 800e50e:	d828      	bhi.n	800e562 <UART_SetConfig+0x3aa>
 800e510:	a201      	add	r2, pc, #4	; (adr r2, 800e518 <UART_SetConfig+0x360>)
 800e512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e516:	bf00      	nop
 800e518:	0800e53d 	.word	0x0800e53d
 800e51c:	0800e545 	.word	0x0800e545
 800e520:	0800e54d 	.word	0x0800e54d
 800e524:	0800e563 	.word	0x0800e563
 800e528:	0800e553 	.word	0x0800e553
 800e52c:	0800e563 	.word	0x0800e563
 800e530:	0800e563 	.word	0x0800e563
 800e534:	0800e563 	.word	0x0800e563
 800e538:	0800e55b 	.word	0x0800e55b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e53c:	f7fd f82e 	bl	800b59c <HAL_RCC_GetPCLK1Freq>
 800e540:	61b8      	str	r0, [r7, #24]
        break;
 800e542:	e013      	b.n	800e56c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e544:	f7fd f83e 	bl	800b5c4 <HAL_RCC_GetPCLK2Freq>
 800e548:	61b8      	str	r0, [r7, #24]
        break;
 800e54a:	e00f      	b.n	800e56c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e54c:	4b4b      	ldr	r3, [pc, #300]	; (800e67c <UART_SetConfig+0x4c4>)
 800e54e:	61bb      	str	r3, [r7, #24]
        break;
 800e550:	e00c      	b.n	800e56c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e552:	f7fc ff51 	bl	800b3f8 <HAL_RCC_GetSysClockFreq>
 800e556:	61b8      	str	r0, [r7, #24]
        break;
 800e558:	e008      	b.n	800e56c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e55a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e55e:	61bb      	str	r3, [r7, #24]
        break;
 800e560:	e004      	b.n	800e56c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800e562:	2300      	movs	r3, #0
 800e564:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800e566:	2301      	movs	r3, #1
 800e568:	77bb      	strb	r3, [r7, #30]
        break;
 800e56a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e56c:	69bb      	ldr	r3, [r7, #24]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d074      	beq.n	800e65c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e572:	69bb      	ldr	r3, [r7, #24]
 800e574:	005a      	lsls	r2, r3, #1
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	685b      	ldr	r3, [r3, #4]
 800e57a:	085b      	lsrs	r3, r3, #1
 800e57c:	441a      	add	r2, r3
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	685b      	ldr	r3, [r3, #4]
 800e582:	fbb2 f3f3 	udiv	r3, r2, r3
 800e586:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e588:	693b      	ldr	r3, [r7, #16]
 800e58a:	2b0f      	cmp	r3, #15
 800e58c:	d916      	bls.n	800e5bc <UART_SetConfig+0x404>
 800e58e:	693b      	ldr	r3, [r7, #16]
 800e590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e594:	d212      	bcs.n	800e5bc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e596:	693b      	ldr	r3, [r7, #16]
 800e598:	b29b      	uxth	r3, r3
 800e59a:	f023 030f 	bic.w	r3, r3, #15
 800e59e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e5a0:	693b      	ldr	r3, [r7, #16]
 800e5a2:	085b      	lsrs	r3, r3, #1
 800e5a4:	b29b      	uxth	r3, r3
 800e5a6:	f003 0307 	and.w	r3, r3, #7
 800e5aa:	b29a      	uxth	r2, r3
 800e5ac:	89fb      	ldrh	r3, [r7, #14]
 800e5ae:	4313      	orrs	r3, r2
 800e5b0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	89fa      	ldrh	r2, [r7, #14]
 800e5b8:	60da      	str	r2, [r3, #12]
 800e5ba:	e04f      	b.n	800e65c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800e5bc:	2301      	movs	r3, #1
 800e5be:	77bb      	strb	r3, [r7, #30]
 800e5c0:	e04c      	b.n	800e65c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e5c2:	7ffb      	ldrb	r3, [r7, #31]
 800e5c4:	2b08      	cmp	r3, #8
 800e5c6:	d828      	bhi.n	800e61a <UART_SetConfig+0x462>
 800e5c8:	a201      	add	r2, pc, #4	; (adr r2, 800e5d0 <UART_SetConfig+0x418>)
 800e5ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5ce:	bf00      	nop
 800e5d0:	0800e5f5 	.word	0x0800e5f5
 800e5d4:	0800e5fd 	.word	0x0800e5fd
 800e5d8:	0800e605 	.word	0x0800e605
 800e5dc:	0800e61b 	.word	0x0800e61b
 800e5e0:	0800e60b 	.word	0x0800e60b
 800e5e4:	0800e61b 	.word	0x0800e61b
 800e5e8:	0800e61b 	.word	0x0800e61b
 800e5ec:	0800e61b 	.word	0x0800e61b
 800e5f0:	0800e613 	.word	0x0800e613
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e5f4:	f7fc ffd2 	bl	800b59c <HAL_RCC_GetPCLK1Freq>
 800e5f8:	61b8      	str	r0, [r7, #24]
        break;
 800e5fa:	e013      	b.n	800e624 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e5fc:	f7fc ffe2 	bl	800b5c4 <HAL_RCC_GetPCLK2Freq>
 800e600:	61b8      	str	r0, [r7, #24]
        break;
 800e602:	e00f      	b.n	800e624 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e604:	4b1d      	ldr	r3, [pc, #116]	; (800e67c <UART_SetConfig+0x4c4>)
 800e606:	61bb      	str	r3, [r7, #24]
        break;
 800e608:	e00c      	b.n	800e624 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e60a:	f7fc fef5 	bl	800b3f8 <HAL_RCC_GetSysClockFreq>
 800e60e:	61b8      	str	r0, [r7, #24]
        break;
 800e610:	e008      	b.n	800e624 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e616:	61bb      	str	r3, [r7, #24]
        break;
 800e618:	e004      	b.n	800e624 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800e61a:	2300      	movs	r3, #0
 800e61c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800e61e:	2301      	movs	r3, #1
 800e620:	77bb      	strb	r3, [r7, #30]
        break;
 800e622:	bf00      	nop
    }

    if (pclk != 0U)
 800e624:	69bb      	ldr	r3, [r7, #24]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d018      	beq.n	800e65c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	685b      	ldr	r3, [r3, #4]
 800e62e:	085a      	lsrs	r2, r3, #1
 800e630:	69bb      	ldr	r3, [r7, #24]
 800e632:	441a      	add	r2, r3
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	685b      	ldr	r3, [r3, #4]
 800e638:	fbb2 f3f3 	udiv	r3, r2, r3
 800e63c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e63e:	693b      	ldr	r3, [r7, #16]
 800e640:	2b0f      	cmp	r3, #15
 800e642:	d909      	bls.n	800e658 <UART_SetConfig+0x4a0>
 800e644:	693b      	ldr	r3, [r7, #16]
 800e646:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e64a:	d205      	bcs.n	800e658 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e64c:	693b      	ldr	r3, [r7, #16]
 800e64e:	b29a      	uxth	r2, r3
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	60da      	str	r2, [r3, #12]
 800e656:	e001      	b.n	800e65c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800e658:	2301      	movs	r3, #1
 800e65a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	2200      	movs	r2, #0
 800e660:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	2200      	movs	r2, #0
 800e666:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800e668:	7fbb      	ldrb	r3, [r7, #30]
}
 800e66a:	4618      	mov	r0, r3
 800e66c:	3720      	adds	r7, #32
 800e66e:	46bd      	mov	sp, r7
 800e670:	bd80      	pop	{r7, pc}
 800e672:	bf00      	nop
 800e674:	40007c00 	.word	0x40007c00
 800e678:	40023800 	.word	0x40023800
 800e67c:	00f42400 	.word	0x00f42400

0800e680 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e680:	b480      	push	{r7}
 800e682:	b083      	sub	sp, #12
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e68c:	f003 0301 	and.w	r3, r3, #1
 800e690:	2b00      	cmp	r3, #0
 800e692:	d00a      	beq.n	800e6aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	685b      	ldr	r3, [r3, #4]
 800e69a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	430a      	orrs	r2, r1
 800e6a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6ae:	f003 0302 	and.w	r3, r3, #2
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d00a      	beq.n	800e6cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	685b      	ldr	r3, [r3, #4]
 800e6bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	430a      	orrs	r2, r1
 800e6ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6d0:	f003 0304 	and.w	r3, r3, #4
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d00a      	beq.n	800e6ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	685b      	ldr	r3, [r3, #4]
 800e6de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	430a      	orrs	r2, r1
 800e6ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6f2:	f003 0308 	and.w	r3, r3, #8
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d00a      	beq.n	800e710 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	685b      	ldr	r3, [r3, #4]
 800e700:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	430a      	orrs	r2, r1
 800e70e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e714:	f003 0310 	and.w	r3, r3, #16
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d00a      	beq.n	800e732 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	689b      	ldr	r3, [r3, #8]
 800e722:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	430a      	orrs	r2, r1
 800e730:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e736:	f003 0320 	and.w	r3, r3, #32
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d00a      	beq.n	800e754 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	689b      	ldr	r3, [r3, #8]
 800e744:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	430a      	orrs	r2, r1
 800e752:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d01a      	beq.n	800e796 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	685b      	ldr	r3, [r3, #4]
 800e766:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	430a      	orrs	r2, r1
 800e774:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e77a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e77e:	d10a      	bne.n	800e796 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	685b      	ldr	r3, [r3, #4]
 800e786:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	430a      	orrs	r2, r1
 800e794:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e79a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d00a      	beq.n	800e7b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	685b      	ldr	r3, [r3, #4]
 800e7a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	430a      	orrs	r2, r1
 800e7b6:	605a      	str	r2, [r3, #4]
  }
}
 800e7b8:	bf00      	nop
 800e7ba:	370c      	adds	r7, #12
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c2:	4770      	bx	lr

0800e7c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b086      	sub	sp, #24
 800e7c8:	af02      	add	r7, sp, #8
 800e7ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e7d4:	f7f6 fa94 	bl	8004d00 <HAL_GetTick>
 800e7d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	f003 0308 	and.w	r3, r3, #8
 800e7e4:	2b08      	cmp	r3, #8
 800e7e6:	d10e      	bne.n	800e806 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e7e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e7ec:	9300      	str	r3, [sp, #0]
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e7f6:	6878      	ldr	r0, [r7, #4]
 800e7f8:	f000 f831 	bl	800e85e <UART_WaitOnFlagUntilTimeout>
 800e7fc:	4603      	mov	r3, r0
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d001      	beq.n	800e806 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e802:	2303      	movs	r3, #3
 800e804:	e027      	b.n	800e856 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	f003 0304 	and.w	r3, r3, #4
 800e810:	2b04      	cmp	r3, #4
 800e812:	d10e      	bne.n	800e832 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e814:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e818:	9300      	str	r3, [sp, #0]
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	2200      	movs	r2, #0
 800e81e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e822:	6878      	ldr	r0, [r7, #4]
 800e824:	f000 f81b 	bl	800e85e <UART_WaitOnFlagUntilTimeout>
 800e828:	4603      	mov	r3, r0
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d001      	beq.n	800e832 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e82e:	2303      	movs	r3, #3
 800e830:	e011      	b.n	800e856 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	2220      	movs	r2, #32
 800e836:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2220      	movs	r2, #32
 800e83c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	2200      	movs	r2, #0
 800e844:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	2200      	movs	r2, #0
 800e84a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	2200      	movs	r2, #0
 800e850:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800e854:	2300      	movs	r3, #0
}
 800e856:	4618      	mov	r0, r3
 800e858:	3710      	adds	r7, #16
 800e85a:	46bd      	mov	sp, r7
 800e85c:	bd80      	pop	{r7, pc}

0800e85e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e85e:	b580      	push	{r7, lr}
 800e860:	b09c      	sub	sp, #112	; 0x70
 800e862:	af00      	add	r7, sp, #0
 800e864:	60f8      	str	r0, [r7, #12]
 800e866:	60b9      	str	r1, [r7, #8]
 800e868:	603b      	str	r3, [r7, #0]
 800e86a:	4613      	mov	r3, r2
 800e86c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e86e:	e0a7      	b.n	800e9c0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e870:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e872:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e876:	f000 80a3 	beq.w	800e9c0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e87a:	f7f6 fa41 	bl	8004d00 <HAL_GetTick>
 800e87e:	4602      	mov	r2, r0
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	1ad3      	subs	r3, r2, r3
 800e884:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e886:	429a      	cmp	r2, r3
 800e888:	d302      	bcc.n	800e890 <UART_WaitOnFlagUntilTimeout+0x32>
 800e88a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d13f      	bne.n	800e910 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e898:	e853 3f00 	ldrex	r3, [r3]
 800e89c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e89e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e8a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e8a4:	667b      	str	r3, [r7, #100]	; 0x64
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	461a      	mov	r2, r3
 800e8ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e8ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e8b0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e8b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e8b6:	e841 2300 	strex	r3, r2, [r1]
 800e8ba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e8bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d1e6      	bne.n	800e890 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	3308      	adds	r3, #8
 800e8c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8cc:	e853 3f00 	ldrex	r3, [r3]
 800e8d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e8d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8d4:	f023 0301 	bic.w	r3, r3, #1
 800e8d8:	663b      	str	r3, [r7, #96]	; 0x60
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	3308      	adds	r3, #8
 800e8e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e8e2:	64ba      	str	r2, [r7, #72]	; 0x48
 800e8e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e8e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e8ea:	e841 2300 	strex	r3, r2, [r1]
 800e8ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e8f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d1e5      	bne.n	800e8c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	2220      	movs	r2, #32
 800e8fa:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	2220      	movs	r2, #32
 800e900:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	2200      	movs	r2, #0
 800e908:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800e90c:	2303      	movs	r3, #3
 800e90e:	e068      	b.n	800e9e2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	f003 0304 	and.w	r3, r3, #4
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d050      	beq.n	800e9c0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	69db      	ldr	r3, [r3, #28]
 800e924:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e928:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e92c:	d148      	bne.n	800e9c0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e936:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e940:	e853 3f00 	ldrex	r3, [r3]
 800e944:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e948:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e94c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	461a      	mov	r2, r3
 800e954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e956:	637b      	str	r3, [r7, #52]	; 0x34
 800e958:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e95a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e95c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e95e:	e841 2300 	strex	r3, r2, [r1]
 800e962:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e966:	2b00      	cmp	r3, #0
 800e968:	d1e6      	bne.n	800e938 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	3308      	adds	r3, #8
 800e970:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e972:	697b      	ldr	r3, [r7, #20]
 800e974:	e853 3f00 	ldrex	r3, [r3]
 800e978:	613b      	str	r3, [r7, #16]
   return(result);
 800e97a:	693b      	ldr	r3, [r7, #16]
 800e97c:	f023 0301 	bic.w	r3, r3, #1
 800e980:	66bb      	str	r3, [r7, #104]	; 0x68
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	3308      	adds	r3, #8
 800e988:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e98a:	623a      	str	r2, [r7, #32]
 800e98c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e98e:	69f9      	ldr	r1, [r7, #28]
 800e990:	6a3a      	ldr	r2, [r7, #32]
 800e992:	e841 2300 	strex	r3, r2, [r1]
 800e996:	61bb      	str	r3, [r7, #24]
   return(result);
 800e998:	69bb      	ldr	r3, [r7, #24]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d1e5      	bne.n	800e96a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	2220      	movs	r2, #32
 800e9a2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	2220      	movs	r2, #32
 800e9a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	2220      	movs	r2, #32
 800e9b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	2200      	movs	r2, #0
 800e9b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800e9bc:	2303      	movs	r3, #3
 800e9be:	e010      	b.n	800e9e2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	69da      	ldr	r2, [r3, #28]
 800e9c6:	68bb      	ldr	r3, [r7, #8]
 800e9c8:	4013      	ands	r3, r2
 800e9ca:	68ba      	ldr	r2, [r7, #8]
 800e9cc:	429a      	cmp	r2, r3
 800e9ce:	bf0c      	ite	eq
 800e9d0:	2301      	moveq	r3, #1
 800e9d2:	2300      	movne	r3, #0
 800e9d4:	b2db      	uxtb	r3, r3
 800e9d6:	461a      	mov	r2, r3
 800e9d8:	79fb      	ldrb	r3, [r7, #7]
 800e9da:	429a      	cmp	r2, r3
 800e9dc:	f43f af48 	beq.w	800e870 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e9e0:	2300      	movs	r3, #0
}
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	3770      	adds	r7, #112	; 0x70
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bd80      	pop	{r7, pc}
	...

0800e9ec <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800e9ec:	b480      	push	{r7}
 800e9ee:	b083      	sub	sp, #12
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
 800e9f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800e9f6:	683b      	ldr	r3, [r7, #0]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d121      	bne.n	800ea42 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681a      	ldr	r2, [r3, #0]
 800ea02:	4b27      	ldr	r3, [pc, #156]	; (800eaa0 <FMC_SDRAM_Init+0xb4>)
 800ea04:	4013      	ands	r3, r2
 800ea06:	683a      	ldr	r2, [r7, #0]
 800ea08:	6851      	ldr	r1, [r2, #4]
 800ea0a:	683a      	ldr	r2, [r7, #0]
 800ea0c:	6892      	ldr	r2, [r2, #8]
 800ea0e:	4311      	orrs	r1, r2
 800ea10:	683a      	ldr	r2, [r7, #0]
 800ea12:	68d2      	ldr	r2, [r2, #12]
 800ea14:	4311      	orrs	r1, r2
 800ea16:	683a      	ldr	r2, [r7, #0]
 800ea18:	6912      	ldr	r2, [r2, #16]
 800ea1a:	4311      	orrs	r1, r2
 800ea1c:	683a      	ldr	r2, [r7, #0]
 800ea1e:	6952      	ldr	r2, [r2, #20]
 800ea20:	4311      	orrs	r1, r2
 800ea22:	683a      	ldr	r2, [r7, #0]
 800ea24:	6992      	ldr	r2, [r2, #24]
 800ea26:	4311      	orrs	r1, r2
 800ea28:	683a      	ldr	r2, [r7, #0]
 800ea2a:	69d2      	ldr	r2, [r2, #28]
 800ea2c:	4311      	orrs	r1, r2
 800ea2e:	683a      	ldr	r2, [r7, #0]
 800ea30:	6a12      	ldr	r2, [r2, #32]
 800ea32:	4311      	orrs	r1, r2
 800ea34:	683a      	ldr	r2, [r7, #0]
 800ea36:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ea38:	430a      	orrs	r2, r1
 800ea3a:	431a      	orrs	r2, r3
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	601a      	str	r2, [r3, #0]
 800ea40:	e026      	b.n	800ea90 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800ea4a:	683b      	ldr	r3, [r7, #0]
 800ea4c:	69d9      	ldr	r1, [r3, #28]
 800ea4e:	683b      	ldr	r3, [r7, #0]
 800ea50:	6a1b      	ldr	r3, [r3, #32]
 800ea52:	4319      	orrs	r1, r3
 800ea54:	683b      	ldr	r3, [r7, #0]
 800ea56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea58:	430b      	orrs	r3, r1
 800ea5a:	431a      	orrs	r2, r3
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	685a      	ldr	r2, [r3, #4]
 800ea64:	4b0e      	ldr	r3, [pc, #56]	; (800eaa0 <FMC_SDRAM_Init+0xb4>)
 800ea66:	4013      	ands	r3, r2
 800ea68:	683a      	ldr	r2, [r7, #0]
 800ea6a:	6851      	ldr	r1, [r2, #4]
 800ea6c:	683a      	ldr	r2, [r7, #0]
 800ea6e:	6892      	ldr	r2, [r2, #8]
 800ea70:	4311      	orrs	r1, r2
 800ea72:	683a      	ldr	r2, [r7, #0]
 800ea74:	68d2      	ldr	r2, [r2, #12]
 800ea76:	4311      	orrs	r1, r2
 800ea78:	683a      	ldr	r2, [r7, #0]
 800ea7a:	6912      	ldr	r2, [r2, #16]
 800ea7c:	4311      	orrs	r1, r2
 800ea7e:	683a      	ldr	r2, [r7, #0]
 800ea80:	6952      	ldr	r2, [r2, #20]
 800ea82:	4311      	orrs	r1, r2
 800ea84:	683a      	ldr	r2, [r7, #0]
 800ea86:	6992      	ldr	r2, [r2, #24]
 800ea88:	430a      	orrs	r2, r1
 800ea8a:	431a      	orrs	r2, r3
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800ea90:	2300      	movs	r3, #0
}
 800ea92:	4618      	mov	r0, r3
 800ea94:	370c      	adds	r7, #12
 800ea96:	46bd      	mov	sp, r7
 800ea98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9c:	4770      	bx	lr
 800ea9e:	bf00      	nop
 800eaa0:	ffff8000 	.word	0xffff8000

0800eaa4 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800eaa4:	b480      	push	{r7}
 800eaa6:	b085      	sub	sp, #20
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	60f8      	str	r0, [r7, #12]
 800eaac:	60b9      	str	r1, [r7, #8]
 800eaae:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d128      	bne.n	800eb08 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	689b      	ldr	r3, [r3, #8]
 800eaba:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800eabe:	68bb      	ldr	r3, [r7, #8]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	1e59      	subs	r1, r3, #1
 800eac4:	68bb      	ldr	r3, [r7, #8]
 800eac6:	685b      	ldr	r3, [r3, #4]
 800eac8:	3b01      	subs	r3, #1
 800eaca:	011b      	lsls	r3, r3, #4
 800eacc:	4319      	orrs	r1, r3
 800eace:	68bb      	ldr	r3, [r7, #8]
 800ead0:	689b      	ldr	r3, [r3, #8]
 800ead2:	3b01      	subs	r3, #1
 800ead4:	021b      	lsls	r3, r3, #8
 800ead6:	4319      	orrs	r1, r3
 800ead8:	68bb      	ldr	r3, [r7, #8]
 800eada:	68db      	ldr	r3, [r3, #12]
 800eadc:	3b01      	subs	r3, #1
 800eade:	031b      	lsls	r3, r3, #12
 800eae0:	4319      	orrs	r1, r3
 800eae2:	68bb      	ldr	r3, [r7, #8]
 800eae4:	691b      	ldr	r3, [r3, #16]
 800eae6:	3b01      	subs	r3, #1
 800eae8:	041b      	lsls	r3, r3, #16
 800eaea:	4319      	orrs	r1, r3
 800eaec:	68bb      	ldr	r3, [r7, #8]
 800eaee:	695b      	ldr	r3, [r3, #20]
 800eaf0:	3b01      	subs	r3, #1
 800eaf2:	051b      	lsls	r3, r3, #20
 800eaf4:	4319      	orrs	r1, r3
 800eaf6:	68bb      	ldr	r3, [r7, #8]
 800eaf8:	699b      	ldr	r3, [r3, #24]
 800eafa:	3b01      	subs	r3, #1
 800eafc:	061b      	lsls	r3, r3, #24
 800eafe:	430b      	orrs	r3, r1
 800eb00:	431a      	orrs	r2, r3
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	609a      	str	r2, [r3, #8]
 800eb06:	e02d      	b.n	800eb64 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	689a      	ldr	r2, [r3, #8]
 800eb0c:	4b19      	ldr	r3, [pc, #100]	; (800eb74 <FMC_SDRAM_Timing_Init+0xd0>)
 800eb0e:	4013      	ands	r3, r2
 800eb10:	68ba      	ldr	r2, [r7, #8]
 800eb12:	68d2      	ldr	r2, [r2, #12]
 800eb14:	3a01      	subs	r2, #1
 800eb16:	0311      	lsls	r1, r2, #12
 800eb18:	68ba      	ldr	r2, [r7, #8]
 800eb1a:	6952      	ldr	r2, [r2, #20]
 800eb1c:	3a01      	subs	r2, #1
 800eb1e:	0512      	lsls	r2, r2, #20
 800eb20:	430a      	orrs	r2, r1
 800eb22:	431a      	orrs	r2, r3
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	68db      	ldr	r3, [r3, #12]
 800eb2c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800eb30:	68bb      	ldr	r3, [r7, #8]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	1e59      	subs	r1, r3, #1
 800eb36:	68bb      	ldr	r3, [r7, #8]
 800eb38:	685b      	ldr	r3, [r3, #4]
 800eb3a:	3b01      	subs	r3, #1
 800eb3c:	011b      	lsls	r3, r3, #4
 800eb3e:	4319      	orrs	r1, r3
 800eb40:	68bb      	ldr	r3, [r7, #8]
 800eb42:	689b      	ldr	r3, [r3, #8]
 800eb44:	3b01      	subs	r3, #1
 800eb46:	021b      	lsls	r3, r3, #8
 800eb48:	4319      	orrs	r1, r3
 800eb4a:	68bb      	ldr	r3, [r7, #8]
 800eb4c:	691b      	ldr	r3, [r3, #16]
 800eb4e:	3b01      	subs	r3, #1
 800eb50:	041b      	lsls	r3, r3, #16
 800eb52:	4319      	orrs	r1, r3
 800eb54:	68bb      	ldr	r3, [r7, #8]
 800eb56:	699b      	ldr	r3, [r3, #24]
 800eb58:	3b01      	subs	r3, #1
 800eb5a:	061b      	lsls	r3, r3, #24
 800eb5c:	430b      	orrs	r3, r1
 800eb5e:	431a      	orrs	r2, r3
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800eb64:	2300      	movs	r3, #0
}
 800eb66:	4618      	mov	r0, r3
 800eb68:	3714      	adds	r7, #20
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb70:	4770      	bx	lr
 800eb72:	bf00      	nop
 800eb74:	ff0f0fff 	.word	0xff0f0fff

0800eb78 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800eb78:	b480      	push	{r7}
 800eb7a:	b085      	sub	sp, #20
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	60f8      	str	r0, [r7, #12]
 800eb80:	60b9      	str	r1, [r7, #8]
 800eb82:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	691a      	ldr	r2, [r3, #16]
 800eb88:	4b0c      	ldr	r3, [pc, #48]	; (800ebbc <FMC_SDRAM_SendCommand+0x44>)
 800eb8a:	4013      	ands	r3, r2
 800eb8c:	68ba      	ldr	r2, [r7, #8]
 800eb8e:	6811      	ldr	r1, [r2, #0]
 800eb90:	68ba      	ldr	r2, [r7, #8]
 800eb92:	6852      	ldr	r2, [r2, #4]
 800eb94:	4311      	orrs	r1, r2
 800eb96:	68ba      	ldr	r2, [r7, #8]
 800eb98:	6892      	ldr	r2, [r2, #8]
 800eb9a:	3a01      	subs	r2, #1
 800eb9c:	0152      	lsls	r2, r2, #5
 800eb9e:	4311      	orrs	r1, r2
 800eba0:	68ba      	ldr	r2, [r7, #8]
 800eba2:	68d2      	ldr	r2, [r2, #12]
 800eba4:	0252      	lsls	r2, r2, #9
 800eba6:	430a      	orrs	r2, r1
 800eba8:	431a      	orrs	r2, r3
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800ebae:	2300      	movs	r3, #0
}
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	3714      	adds	r7, #20
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebba:	4770      	bx	lr
 800ebbc:	ffc00000 	.word	0xffc00000

0800ebc0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800ebc0:	b480      	push	{r7}
 800ebc2:	b083      	sub	sp, #12
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
 800ebc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	695a      	ldr	r2, [r3, #20]
 800ebce:	4b07      	ldr	r3, [pc, #28]	; (800ebec <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800ebd0:	4013      	ands	r3, r2
 800ebd2:	683a      	ldr	r2, [r7, #0]
 800ebd4:	0052      	lsls	r2, r2, #1
 800ebd6:	431a      	orrs	r2, r3
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800ebdc:	2300      	movs	r3, #0
}
 800ebde:	4618      	mov	r0, r3
 800ebe0:	370c      	adds	r7, #12
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe8:	4770      	bx	lr
 800ebea:	bf00      	nop
 800ebec:	ffffc001 	.word	0xffffc001

0800ebf0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ebf0:	b084      	sub	sp, #16
 800ebf2:	b580      	push	{r7, lr}
 800ebf4:	b084      	sub	sp, #16
 800ebf6:	af00      	add	r7, sp, #0
 800ebf8:	6078      	str	r0, [r7, #4]
 800ebfa:	f107 001c 	add.w	r0, r7, #28
 800ebfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ec02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec04:	2b01      	cmp	r3, #1
 800ec06:	d120      	bne.n	800ec4a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	68da      	ldr	r2, [r3, #12]
 800ec18:	4b20      	ldr	r3, [pc, #128]	; (800ec9c <USB_CoreInit+0xac>)
 800ec1a:	4013      	ands	r3, r2
 800ec1c:	687a      	ldr	r2, [r7, #4]
 800ec1e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	68db      	ldr	r3, [r3, #12]
 800ec24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ec2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec2e:	2b01      	cmp	r3, #1
 800ec30:	d105      	bne.n	800ec3e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	68db      	ldr	r3, [r3, #12]
 800ec36:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ec3e:	6878      	ldr	r0, [r7, #4]
 800ec40:	f000 fdb2 	bl	800f7a8 <USB_CoreReset>
 800ec44:	4603      	mov	r3, r0
 800ec46:	73fb      	strb	r3, [r7, #15]
 800ec48:	e010      	b.n	800ec6c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	68db      	ldr	r3, [r3, #12]
 800ec4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ec56:	6878      	ldr	r0, [r7, #4]
 800ec58:	f000 fda6 	bl	800f7a8 <USB_CoreReset>
 800ec5c:	4603      	mov	r3, r0
 800ec5e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec64:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800ec6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec6e:	2b01      	cmp	r3, #1
 800ec70:	d10b      	bne.n	800ec8a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	689b      	ldr	r3, [r3, #8]
 800ec76:	f043 0206 	orr.w	r2, r3, #6
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	689b      	ldr	r3, [r3, #8]
 800ec82:	f043 0220 	orr.w	r2, r3, #32
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ec8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	3710      	adds	r7, #16
 800ec90:	46bd      	mov	sp, r7
 800ec92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ec96:	b004      	add	sp, #16
 800ec98:	4770      	bx	lr
 800ec9a:	bf00      	nop
 800ec9c:	ffbdffbf 	.word	0xffbdffbf

0800eca0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800eca0:	b480      	push	{r7}
 800eca2:	b087      	sub	sp, #28
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	60f8      	str	r0, [r7, #12]
 800eca8:	60b9      	str	r1, [r7, #8]
 800ecaa:	4613      	mov	r3, r2
 800ecac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ecae:	79fb      	ldrb	r3, [r7, #7]
 800ecb0:	2b02      	cmp	r3, #2
 800ecb2:	d165      	bne.n	800ed80 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ecb4:	68bb      	ldr	r3, [r7, #8]
 800ecb6:	4a41      	ldr	r2, [pc, #260]	; (800edbc <USB_SetTurnaroundTime+0x11c>)
 800ecb8:	4293      	cmp	r3, r2
 800ecba:	d906      	bls.n	800ecca <USB_SetTurnaroundTime+0x2a>
 800ecbc:	68bb      	ldr	r3, [r7, #8]
 800ecbe:	4a40      	ldr	r2, [pc, #256]	; (800edc0 <USB_SetTurnaroundTime+0x120>)
 800ecc0:	4293      	cmp	r3, r2
 800ecc2:	d202      	bcs.n	800ecca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ecc4:	230f      	movs	r3, #15
 800ecc6:	617b      	str	r3, [r7, #20]
 800ecc8:	e062      	b.n	800ed90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ecca:	68bb      	ldr	r3, [r7, #8]
 800eccc:	4a3c      	ldr	r2, [pc, #240]	; (800edc0 <USB_SetTurnaroundTime+0x120>)
 800ecce:	4293      	cmp	r3, r2
 800ecd0:	d306      	bcc.n	800ece0 <USB_SetTurnaroundTime+0x40>
 800ecd2:	68bb      	ldr	r3, [r7, #8]
 800ecd4:	4a3b      	ldr	r2, [pc, #236]	; (800edc4 <USB_SetTurnaroundTime+0x124>)
 800ecd6:	4293      	cmp	r3, r2
 800ecd8:	d202      	bcs.n	800ece0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ecda:	230e      	movs	r3, #14
 800ecdc:	617b      	str	r3, [r7, #20]
 800ecde:	e057      	b.n	800ed90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ece0:	68bb      	ldr	r3, [r7, #8]
 800ece2:	4a38      	ldr	r2, [pc, #224]	; (800edc4 <USB_SetTurnaroundTime+0x124>)
 800ece4:	4293      	cmp	r3, r2
 800ece6:	d306      	bcc.n	800ecf6 <USB_SetTurnaroundTime+0x56>
 800ece8:	68bb      	ldr	r3, [r7, #8]
 800ecea:	4a37      	ldr	r2, [pc, #220]	; (800edc8 <USB_SetTurnaroundTime+0x128>)
 800ecec:	4293      	cmp	r3, r2
 800ecee:	d202      	bcs.n	800ecf6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ecf0:	230d      	movs	r3, #13
 800ecf2:	617b      	str	r3, [r7, #20]
 800ecf4:	e04c      	b.n	800ed90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ecf6:	68bb      	ldr	r3, [r7, #8]
 800ecf8:	4a33      	ldr	r2, [pc, #204]	; (800edc8 <USB_SetTurnaroundTime+0x128>)
 800ecfa:	4293      	cmp	r3, r2
 800ecfc:	d306      	bcc.n	800ed0c <USB_SetTurnaroundTime+0x6c>
 800ecfe:	68bb      	ldr	r3, [r7, #8]
 800ed00:	4a32      	ldr	r2, [pc, #200]	; (800edcc <USB_SetTurnaroundTime+0x12c>)
 800ed02:	4293      	cmp	r3, r2
 800ed04:	d802      	bhi.n	800ed0c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ed06:	230c      	movs	r3, #12
 800ed08:	617b      	str	r3, [r7, #20]
 800ed0a:	e041      	b.n	800ed90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ed0c:	68bb      	ldr	r3, [r7, #8]
 800ed0e:	4a2f      	ldr	r2, [pc, #188]	; (800edcc <USB_SetTurnaroundTime+0x12c>)
 800ed10:	4293      	cmp	r3, r2
 800ed12:	d906      	bls.n	800ed22 <USB_SetTurnaroundTime+0x82>
 800ed14:	68bb      	ldr	r3, [r7, #8]
 800ed16:	4a2e      	ldr	r2, [pc, #184]	; (800edd0 <USB_SetTurnaroundTime+0x130>)
 800ed18:	4293      	cmp	r3, r2
 800ed1a:	d802      	bhi.n	800ed22 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ed1c:	230b      	movs	r3, #11
 800ed1e:	617b      	str	r3, [r7, #20]
 800ed20:	e036      	b.n	800ed90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ed22:	68bb      	ldr	r3, [r7, #8]
 800ed24:	4a2a      	ldr	r2, [pc, #168]	; (800edd0 <USB_SetTurnaroundTime+0x130>)
 800ed26:	4293      	cmp	r3, r2
 800ed28:	d906      	bls.n	800ed38 <USB_SetTurnaroundTime+0x98>
 800ed2a:	68bb      	ldr	r3, [r7, #8]
 800ed2c:	4a29      	ldr	r2, [pc, #164]	; (800edd4 <USB_SetTurnaroundTime+0x134>)
 800ed2e:	4293      	cmp	r3, r2
 800ed30:	d802      	bhi.n	800ed38 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ed32:	230a      	movs	r3, #10
 800ed34:	617b      	str	r3, [r7, #20]
 800ed36:	e02b      	b.n	800ed90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ed38:	68bb      	ldr	r3, [r7, #8]
 800ed3a:	4a26      	ldr	r2, [pc, #152]	; (800edd4 <USB_SetTurnaroundTime+0x134>)
 800ed3c:	4293      	cmp	r3, r2
 800ed3e:	d906      	bls.n	800ed4e <USB_SetTurnaroundTime+0xae>
 800ed40:	68bb      	ldr	r3, [r7, #8]
 800ed42:	4a25      	ldr	r2, [pc, #148]	; (800edd8 <USB_SetTurnaroundTime+0x138>)
 800ed44:	4293      	cmp	r3, r2
 800ed46:	d202      	bcs.n	800ed4e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ed48:	2309      	movs	r3, #9
 800ed4a:	617b      	str	r3, [r7, #20]
 800ed4c:	e020      	b.n	800ed90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ed4e:	68bb      	ldr	r3, [r7, #8]
 800ed50:	4a21      	ldr	r2, [pc, #132]	; (800edd8 <USB_SetTurnaroundTime+0x138>)
 800ed52:	4293      	cmp	r3, r2
 800ed54:	d306      	bcc.n	800ed64 <USB_SetTurnaroundTime+0xc4>
 800ed56:	68bb      	ldr	r3, [r7, #8]
 800ed58:	4a20      	ldr	r2, [pc, #128]	; (800eddc <USB_SetTurnaroundTime+0x13c>)
 800ed5a:	4293      	cmp	r3, r2
 800ed5c:	d802      	bhi.n	800ed64 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ed5e:	2308      	movs	r3, #8
 800ed60:	617b      	str	r3, [r7, #20]
 800ed62:	e015      	b.n	800ed90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ed64:	68bb      	ldr	r3, [r7, #8]
 800ed66:	4a1d      	ldr	r2, [pc, #116]	; (800eddc <USB_SetTurnaroundTime+0x13c>)
 800ed68:	4293      	cmp	r3, r2
 800ed6a:	d906      	bls.n	800ed7a <USB_SetTurnaroundTime+0xda>
 800ed6c:	68bb      	ldr	r3, [r7, #8]
 800ed6e:	4a1c      	ldr	r2, [pc, #112]	; (800ede0 <USB_SetTurnaroundTime+0x140>)
 800ed70:	4293      	cmp	r3, r2
 800ed72:	d202      	bcs.n	800ed7a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ed74:	2307      	movs	r3, #7
 800ed76:	617b      	str	r3, [r7, #20]
 800ed78:	e00a      	b.n	800ed90 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ed7a:	2306      	movs	r3, #6
 800ed7c:	617b      	str	r3, [r7, #20]
 800ed7e:	e007      	b.n	800ed90 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ed80:	79fb      	ldrb	r3, [r7, #7]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d102      	bne.n	800ed8c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ed86:	2309      	movs	r3, #9
 800ed88:	617b      	str	r3, [r7, #20]
 800ed8a:	e001      	b.n	800ed90 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ed8c:	2309      	movs	r3, #9
 800ed8e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	68db      	ldr	r3, [r3, #12]
 800ed94:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	68da      	ldr	r2, [r3, #12]
 800eda0:	697b      	ldr	r3, [r7, #20]
 800eda2:	029b      	lsls	r3, r3, #10
 800eda4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800eda8:	431a      	orrs	r2, r3
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800edae:	2300      	movs	r3, #0
}
 800edb0:	4618      	mov	r0, r3
 800edb2:	371c      	adds	r7, #28
 800edb4:	46bd      	mov	sp, r7
 800edb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edba:	4770      	bx	lr
 800edbc:	00d8acbf 	.word	0x00d8acbf
 800edc0:	00e4e1c0 	.word	0x00e4e1c0
 800edc4:	00f42400 	.word	0x00f42400
 800edc8:	01067380 	.word	0x01067380
 800edcc:	011a499f 	.word	0x011a499f
 800edd0:	01312cff 	.word	0x01312cff
 800edd4:	014ca43f 	.word	0x014ca43f
 800edd8:	016e3600 	.word	0x016e3600
 800eddc:	01a6ab1f 	.word	0x01a6ab1f
 800ede0:	01e84800 	.word	0x01e84800

0800ede4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ede4:	b480      	push	{r7}
 800ede6:	b083      	sub	sp, #12
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	689b      	ldr	r3, [r3, #8]
 800edf0:	f023 0201 	bic.w	r2, r3, #1
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800edf8:	2300      	movs	r3, #0
}
 800edfa:	4618      	mov	r0, r3
 800edfc:	370c      	adds	r7, #12
 800edfe:	46bd      	mov	sp, r7
 800ee00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee04:	4770      	bx	lr

0800ee06 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ee06:	b580      	push	{r7, lr}
 800ee08:	b084      	sub	sp, #16
 800ee0a:	af00      	add	r7, sp, #0
 800ee0c:	6078      	str	r0, [r7, #4]
 800ee0e:	460b      	mov	r3, r1
 800ee10:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ee12:	2300      	movs	r3, #0
 800ee14:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	68db      	ldr	r3, [r3, #12]
 800ee1a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ee22:	78fb      	ldrb	r3, [r7, #3]
 800ee24:	2b01      	cmp	r3, #1
 800ee26:	d115      	bne.n	800ee54 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	68db      	ldr	r3, [r3, #12]
 800ee2c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ee34:	2001      	movs	r0, #1
 800ee36:	f7f5 ff6f 	bl	8004d18 <HAL_Delay>
      ms++;
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	3301      	adds	r3, #1
 800ee3e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ee40:	6878      	ldr	r0, [r7, #4]
 800ee42:	f000 fc21 	bl	800f688 <USB_GetMode>
 800ee46:	4603      	mov	r3, r0
 800ee48:	2b01      	cmp	r3, #1
 800ee4a:	d01e      	beq.n	800ee8a <USB_SetCurrentMode+0x84>
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	2b31      	cmp	r3, #49	; 0x31
 800ee50:	d9f0      	bls.n	800ee34 <USB_SetCurrentMode+0x2e>
 800ee52:	e01a      	b.n	800ee8a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ee54:	78fb      	ldrb	r3, [r7, #3]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d115      	bne.n	800ee86 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	68db      	ldr	r3, [r3, #12]
 800ee5e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ee66:	2001      	movs	r0, #1
 800ee68:	f7f5 ff56 	bl	8004d18 <HAL_Delay>
      ms++;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	3301      	adds	r3, #1
 800ee70:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ee72:	6878      	ldr	r0, [r7, #4]
 800ee74:	f000 fc08 	bl	800f688 <USB_GetMode>
 800ee78:	4603      	mov	r3, r0
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d005      	beq.n	800ee8a <USB_SetCurrentMode+0x84>
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	2b31      	cmp	r3, #49	; 0x31
 800ee82:	d9f0      	bls.n	800ee66 <USB_SetCurrentMode+0x60>
 800ee84:	e001      	b.n	800ee8a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ee86:	2301      	movs	r3, #1
 800ee88:	e005      	b.n	800ee96 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	2b32      	cmp	r3, #50	; 0x32
 800ee8e:	d101      	bne.n	800ee94 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ee90:	2301      	movs	r3, #1
 800ee92:	e000      	b.n	800ee96 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ee94:	2300      	movs	r3, #0
}
 800ee96:	4618      	mov	r0, r3
 800ee98:	3710      	adds	r7, #16
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	bd80      	pop	{r7, pc}
	...

0800eea0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800eea0:	b084      	sub	sp, #16
 800eea2:	b580      	push	{r7, lr}
 800eea4:	b086      	sub	sp, #24
 800eea6:	af00      	add	r7, sp, #0
 800eea8:	6078      	str	r0, [r7, #4]
 800eeaa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800eeae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800eeba:	2300      	movs	r3, #0
 800eebc:	613b      	str	r3, [r7, #16]
 800eebe:	e009      	b.n	800eed4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800eec0:	687a      	ldr	r2, [r7, #4]
 800eec2:	693b      	ldr	r3, [r7, #16]
 800eec4:	3340      	adds	r3, #64	; 0x40
 800eec6:	009b      	lsls	r3, r3, #2
 800eec8:	4413      	add	r3, r2
 800eeca:	2200      	movs	r2, #0
 800eecc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800eece:	693b      	ldr	r3, [r7, #16]
 800eed0:	3301      	adds	r3, #1
 800eed2:	613b      	str	r3, [r7, #16]
 800eed4:	693b      	ldr	r3, [r7, #16]
 800eed6:	2b0e      	cmp	r3, #14
 800eed8:	d9f2      	bls.n	800eec0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800eeda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d11c      	bne.n	800ef1a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eee6:	685b      	ldr	r3, [r3, #4]
 800eee8:	68fa      	ldr	r2, [r7, #12]
 800eeea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800eeee:	f043 0302 	orr.w	r3, r3, #2
 800eef2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eef8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	601a      	str	r2, [r3, #0]
 800ef18:	e005      	b.n	800ef26 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef1e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ef2c:	461a      	mov	r2, r3
 800ef2e:	2300      	movs	r3, #0
 800ef30:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef38:	4619      	mov	r1, r3
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef40:	461a      	mov	r2, r3
 800ef42:	680b      	ldr	r3, [r1, #0]
 800ef44:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ef46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef48:	2b01      	cmp	r3, #1
 800ef4a:	d10c      	bne.n	800ef66 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ef4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d104      	bne.n	800ef5c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ef52:	2100      	movs	r1, #0
 800ef54:	6878      	ldr	r0, [r7, #4]
 800ef56:	f000 f965 	bl	800f224 <USB_SetDevSpeed>
 800ef5a:	e008      	b.n	800ef6e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ef5c:	2101      	movs	r1, #1
 800ef5e:	6878      	ldr	r0, [r7, #4]
 800ef60:	f000 f960 	bl	800f224 <USB_SetDevSpeed>
 800ef64:	e003      	b.n	800ef6e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ef66:	2103      	movs	r1, #3
 800ef68:	6878      	ldr	r0, [r7, #4]
 800ef6a:	f000 f95b 	bl	800f224 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ef6e:	2110      	movs	r1, #16
 800ef70:	6878      	ldr	r0, [r7, #4]
 800ef72:	f000 f8f3 	bl	800f15c <USB_FlushTxFifo>
 800ef76:	4603      	mov	r3, r0
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d001      	beq.n	800ef80 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800ef7c:	2301      	movs	r3, #1
 800ef7e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ef80:	6878      	ldr	r0, [r7, #4]
 800ef82:	f000 f91f 	bl	800f1c4 <USB_FlushRxFifo>
 800ef86:	4603      	mov	r3, r0
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d001      	beq.n	800ef90 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800ef8c:	2301      	movs	r3, #1
 800ef8e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef96:	461a      	mov	r2, r3
 800ef98:	2300      	movs	r3, #0
 800ef9a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800efa2:	461a      	mov	r2, r3
 800efa4:	2300      	movs	r3, #0
 800efa6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800efae:	461a      	mov	r2, r3
 800efb0:	2300      	movs	r3, #0
 800efb2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800efb4:	2300      	movs	r3, #0
 800efb6:	613b      	str	r3, [r7, #16]
 800efb8:	e043      	b.n	800f042 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800efba:	693b      	ldr	r3, [r7, #16]
 800efbc:	015a      	lsls	r2, r3, #5
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	4413      	add	r3, r2
 800efc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800efcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800efd0:	d118      	bne.n	800f004 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800efd2:	693b      	ldr	r3, [r7, #16]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d10a      	bne.n	800efee <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800efd8:	693b      	ldr	r3, [r7, #16]
 800efda:	015a      	lsls	r2, r3, #5
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	4413      	add	r3, r2
 800efe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efe4:	461a      	mov	r2, r3
 800efe6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800efea:	6013      	str	r3, [r2, #0]
 800efec:	e013      	b.n	800f016 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800efee:	693b      	ldr	r3, [r7, #16]
 800eff0:	015a      	lsls	r2, r3, #5
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	4413      	add	r3, r2
 800eff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800effa:	461a      	mov	r2, r3
 800effc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f000:	6013      	str	r3, [r2, #0]
 800f002:	e008      	b.n	800f016 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f004:	693b      	ldr	r3, [r7, #16]
 800f006:	015a      	lsls	r2, r3, #5
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	4413      	add	r3, r2
 800f00c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f010:	461a      	mov	r2, r3
 800f012:	2300      	movs	r3, #0
 800f014:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f016:	693b      	ldr	r3, [r7, #16]
 800f018:	015a      	lsls	r2, r3, #5
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	4413      	add	r3, r2
 800f01e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f022:	461a      	mov	r2, r3
 800f024:	2300      	movs	r3, #0
 800f026:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f028:	693b      	ldr	r3, [r7, #16]
 800f02a:	015a      	lsls	r2, r3, #5
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	4413      	add	r3, r2
 800f030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f034:	461a      	mov	r2, r3
 800f036:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f03a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f03c:	693b      	ldr	r3, [r7, #16]
 800f03e:	3301      	adds	r3, #1
 800f040:	613b      	str	r3, [r7, #16]
 800f042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f044:	693a      	ldr	r2, [r7, #16]
 800f046:	429a      	cmp	r2, r3
 800f048:	d3b7      	bcc.n	800efba <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f04a:	2300      	movs	r3, #0
 800f04c:	613b      	str	r3, [r7, #16]
 800f04e:	e043      	b.n	800f0d8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f050:	693b      	ldr	r3, [r7, #16]
 800f052:	015a      	lsls	r2, r3, #5
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	4413      	add	r3, r2
 800f058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f062:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f066:	d118      	bne.n	800f09a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800f068:	693b      	ldr	r3, [r7, #16]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d10a      	bne.n	800f084 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f06e:	693b      	ldr	r3, [r7, #16]
 800f070:	015a      	lsls	r2, r3, #5
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	4413      	add	r3, r2
 800f076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f07a:	461a      	mov	r2, r3
 800f07c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f080:	6013      	str	r3, [r2, #0]
 800f082:	e013      	b.n	800f0ac <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f084:	693b      	ldr	r3, [r7, #16]
 800f086:	015a      	lsls	r2, r3, #5
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	4413      	add	r3, r2
 800f08c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f090:	461a      	mov	r2, r3
 800f092:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f096:	6013      	str	r3, [r2, #0]
 800f098:	e008      	b.n	800f0ac <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f09a:	693b      	ldr	r3, [r7, #16]
 800f09c:	015a      	lsls	r2, r3, #5
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	4413      	add	r3, r2
 800f0a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0a6:	461a      	mov	r2, r3
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f0ac:	693b      	ldr	r3, [r7, #16]
 800f0ae:	015a      	lsls	r2, r3, #5
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	4413      	add	r3, r2
 800f0b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0b8:	461a      	mov	r2, r3
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f0be:	693b      	ldr	r3, [r7, #16]
 800f0c0:	015a      	lsls	r2, r3, #5
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	4413      	add	r3, r2
 800f0c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0ca:	461a      	mov	r2, r3
 800f0cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f0d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f0d2:	693b      	ldr	r3, [r7, #16]
 800f0d4:	3301      	adds	r3, #1
 800f0d6:	613b      	str	r3, [r7, #16]
 800f0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0da:	693a      	ldr	r2, [r7, #16]
 800f0dc:	429a      	cmp	r2, r3
 800f0de:	d3b7      	bcc.n	800f050 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f0e6:	691b      	ldr	r3, [r3, #16]
 800f0e8:	68fa      	ldr	r2, [r7, #12]
 800f0ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f0ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f0f2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	2200      	movs	r2, #0
 800f0f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f100:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f104:	2b00      	cmp	r3, #0
 800f106:	d105      	bne.n	800f114 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	699b      	ldr	r3, [r3, #24]
 800f10c:	f043 0210 	orr.w	r2, r3, #16
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	699a      	ldr	r2, [r3, #24]
 800f118:	4b0e      	ldr	r3, [pc, #56]	; (800f154 <USB_DevInit+0x2b4>)
 800f11a:	4313      	orrs	r3, r2
 800f11c:	687a      	ldr	r2, [r7, #4]
 800f11e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f122:	2b00      	cmp	r3, #0
 800f124:	d005      	beq.n	800f132 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	699b      	ldr	r3, [r3, #24]
 800f12a:	f043 0208 	orr.w	r2, r3, #8
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f134:	2b01      	cmp	r3, #1
 800f136:	d105      	bne.n	800f144 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	699a      	ldr	r2, [r3, #24]
 800f13c:	4b06      	ldr	r3, [pc, #24]	; (800f158 <USB_DevInit+0x2b8>)
 800f13e:	4313      	orrs	r3, r2
 800f140:	687a      	ldr	r2, [r7, #4]
 800f142:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f144:	7dfb      	ldrb	r3, [r7, #23]
}
 800f146:	4618      	mov	r0, r3
 800f148:	3718      	adds	r7, #24
 800f14a:	46bd      	mov	sp, r7
 800f14c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f150:	b004      	add	sp, #16
 800f152:	4770      	bx	lr
 800f154:	803c3800 	.word	0x803c3800
 800f158:	40000004 	.word	0x40000004

0800f15c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f15c:	b480      	push	{r7}
 800f15e:	b085      	sub	sp, #20
 800f160:	af00      	add	r7, sp, #0
 800f162:	6078      	str	r0, [r7, #4]
 800f164:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f166:	2300      	movs	r3, #0
 800f168:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	3301      	adds	r3, #1
 800f16e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	4a13      	ldr	r2, [pc, #76]	; (800f1c0 <USB_FlushTxFifo+0x64>)
 800f174:	4293      	cmp	r3, r2
 800f176:	d901      	bls.n	800f17c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800f178:	2303      	movs	r3, #3
 800f17a:	e01b      	b.n	800f1b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	691b      	ldr	r3, [r3, #16]
 800f180:	2b00      	cmp	r3, #0
 800f182:	daf2      	bge.n	800f16a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800f184:	2300      	movs	r3, #0
 800f186:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f188:	683b      	ldr	r3, [r7, #0]
 800f18a:	019b      	lsls	r3, r3, #6
 800f18c:	f043 0220 	orr.w	r2, r3, #32
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	3301      	adds	r3, #1
 800f198:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	4a08      	ldr	r2, [pc, #32]	; (800f1c0 <USB_FlushTxFifo+0x64>)
 800f19e:	4293      	cmp	r3, r2
 800f1a0:	d901      	bls.n	800f1a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800f1a2:	2303      	movs	r3, #3
 800f1a4:	e006      	b.n	800f1b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	691b      	ldr	r3, [r3, #16]
 800f1aa:	f003 0320 	and.w	r3, r3, #32
 800f1ae:	2b20      	cmp	r3, #32
 800f1b0:	d0f0      	beq.n	800f194 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800f1b2:	2300      	movs	r3, #0
}
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	3714      	adds	r7, #20
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1be:	4770      	bx	lr
 800f1c0:	00030d40 	.word	0x00030d40

0800f1c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f1c4:	b480      	push	{r7}
 800f1c6:	b085      	sub	sp, #20
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	3301      	adds	r3, #1
 800f1d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	4a11      	ldr	r2, [pc, #68]	; (800f220 <USB_FlushRxFifo+0x5c>)
 800f1da:	4293      	cmp	r3, r2
 800f1dc:	d901      	bls.n	800f1e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800f1de:	2303      	movs	r3, #3
 800f1e0:	e018      	b.n	800f214 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	691b      	ldr	r3, [r3, #16]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	daf2      	bge.n	800f1d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	2210      	movs	r2, #16
 800f1f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	3301      	adds	r3, #1
 800f1f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	4a08      	ldr	r2, [pc, #32]	; (800f220 <USB_FlushRxFifo+0x5c>)
 800f1fe:	4293      	cmp	r3, r2
 800f200:	d901      	bls.n	800f206 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800f202:	2303      	movs	r3, #3
 800f204:	e006      	b.n	800f214 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	691b      	ldr	r3, [r3, #16]
 800f20a:	f003 0310 	and.w	r3, r3, #16
 800f20e:	2b10      	cmp	r3, #16
 800f210:	d0f0      	beq.n	800f1f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800f212:	2300      	movs	r3, #0
}
 800f214:	4618      	mov	r0, r3
 800f216:	3714      	adds	r7, #20
 800f218:	46bd      	mov	sp, r7
 800f21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21e:	4770      	bx	lr
 800f220:	00030d40 	.word	0x00030d40

0800f224 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f224:	b480      	push	{r7}
 800f226:	b085      	sub	sp, #20
 800f228:	af00      	add	r7, sp, #0
 800f22a:	6078      	str	r0, [r7, #4]
 800f22c:	460b      	mov	r3, r1
 800f22e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f23a:	681a      	ldr	r2, [r3, #0]
 800f23c:	78fb      	ldrb	r3, [r7, #3]
 800f23e:	68f9      	ldr	r1, [r7, #12]
 800f240:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f244:	4313      	orrs	r3, r2
 800f246:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f248:	2300      	movs	r3, #0
}
 800f24a:	4618      	mov	r0, r3
 800f24c:	3714      	adds	r7, #20
 800f24e:	46bd      	mov	sp, r7
 800f250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f254:	4770      	bx	lr

0800f256 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800f256:	b480      	push	{r7}
 800f258:	b087      	sub	sp, #28
 800f25a:	af00      	add	r7, sp, #0
 800f25c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800f262:	693b      	ldr	r3, [r7, #16]
 800f264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f268:	689b      	ldr	r3, [r3, #8]
 800f26a:	f003 0306 	and.w	r3, r3, #6
 800f26e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d102      	bne.n	800f27c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800f276:	2300      	movs	r3, #0
 800f278:	75fb      	strb	r3, [r7, #23]
 800f27a:	e00a      	b.n	800f292 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	2b02      	cmp	r3, #2
 800f280:	d002      	beq.n	800f288 <USB_GetDevSpeed+0x32>
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	2b06      	cmp	r3, #6
 800f286:	d102      	bne.n	800f28e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800f288:	2302      	movs	r3, #2
 800f28a:	75fb      	strb	r3, [r7, #23]
 800f28c:	e001      	b.n	800f292 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800f28e:	230f      	movs	r3, #15
 800f290:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800f292:	7dfb      	ldrb	r3, [r7, #23]
}
 800f294:	4618      	mov	r0, r3
 800f296:	371c      	adds	r7, #28
 800f298:	46bd      	mov	sp, r7
 800f29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f29e:	4770      	bx	lr

0800f2a0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f2a0:	b480      	push	{r7}
 800f2a2:	b087      	sub	sp, #28
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
 800f2a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f2b6:	683b      	ldr	r3, [r7, #0]
 800f2b8:	785b      	ldrb	r3, [r3, #1]
 800f2ba:	2b01      	cmp	r3, #1
 800f2bc:	d14a      	bne.n	800f354 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f2be:	683b      	ldr	r3, [r7, #0]
 800f2c0:	781b      	ldrb	r3, [r3, #0]
 800f2c2:	015a      	lsls	r2, r3, #5
 800f2c4:	693b      	ldr	r3, [r7, #16]
 800f2c6:	4413      	add	r3, r2
 800f2c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f2d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f2d6:	f040 8086 	bne.w	800f3e6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800f2da:	683b      	ldr	r3, [r7, #0]
 800f2dc:	781b      	ldrb	r3, [r3, #0]
 800f2de:	015a      	lsls	r2, r3, #5
 800f2e0:	693b      	ldr	r3, [r7, #16]
 800f2e2:	4413      	add	r3, r2
 800f2e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	683a      	ldr	r2, [r7, #0]
 800f2ec:	7812      	ldrb	r2, [r2, #0]
 800f2ee:	0151      	lsls	r1, r2, #5
 800f2f0:	693a      	ldr	r2, [r7, #16]
 800f2f2:	440a      	add	r2, r1
 800f2f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f2f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f2fc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800f2fe:	683b      	ldr	r3, [r7, #0]
 800f300:	781b      	ldrb	r3, [r3, #0]
 800f302:	015a      	lsls	r2, r3, #5
 800f304:	693b      	ldr	r3, [r7, #16]
 800f306:	4413      	add	r3, r2
 800f308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	683a      	ldr	r2, [r7, #0]
 800f310:	7812      	ldrb	r2, [r2, #0]
 800f312:	0151      	lsls	r1, r2, #5
 800f314:	693a      	ldr	r2, [r7, #16]
 800f316:	440a      	add	r2, r1
 800f318:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f31c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f320:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	3301      	adds	r3, #1
 800f326:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	f242 7210 	movw	r2, #10000	; 0x2710
 800f32e:	4293      	cmp	r3, r2
 800f330:	d902      	bls.n	800f338 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800f332:	2301      	movs	r3, #1
 800f334:	75fb      	strb	r3, [r7, #23]
          break;
 800f336:	e056      	b.n	800f3e6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800f338:	683b      	ldr	r3, [r7, #0]
 800f33a:	781b      	ldrb	r3, [r3, #0]
 800f33c:	015a      	lsls	r2, r3, #5
 800f33e:	693b      	ldr	r3, [r7, #16]
 800f340:	4413      	add	r3, r2
 800f342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f34c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f350:	d0e7      	beq.n	800f322 <USB_EPStopXfer+0x82>
 800f352:	e048      	b.n	800f3e6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f354:	683b      	ldr	r3, [r7, #0]
 800f356:	781b      	ldrb	r3, [r3, #0]
 800f358:	015a      	lsls	r2, r3, #5
 800f35a:	693b      	ldr	r3, [r7, #16]
 800f35c:	4413      	add	r3, r2
 800f35e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f368:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f36c:	d13b      	bne.n	800f3e6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	781b      	ldrb	r3, [r3, #0]
 800f372:	015a      	lsls	r2, r3, #5
 800f374:	693b      	ldr	r3, [r7, #16]
 800f376:	4413      	add	r3, r2
 800f378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	683a      	ldr	r2, [r7, #0]
 800f380:	7812      	ldrb	r2, [r2, #0]
 800f382:	0151      	lsls	r1, r2, #5
 800f384:	693a      	ldr	r2, [r7, #16]
 800f386:	440a      	add	r2, r1
 800f388:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f38c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f390:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800f392:	683b      	ldr	r3, [r7, #0]
 800f394:	781b      	ldrb	r3, [r3, #0]
 800f396:	015a      	lsls	r2, r3, #5
 800f398:	693b      	ldr	r3, [r7, #16]
 800f39a:	4413      	add	r3, r2
 800f39c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	683a      	ldr	r2, [r7, #0]
 800f3a4:	7812      	ldrb	r2, [r2, #0]
 800f3a6:	0151      	lsls	r1, r2, #5
 800f3a8:	693a      	ldr	r2, [r7, #16]
 800f3aa:	440a      	add	r2, r1
 800f3ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f3b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f3b4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	3301      	adds	r3, #1
 800f3ba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	f242 7210 	movw	r2, #10000	; 0x2710
 800f3c2:	4293      	cmp	r3, r2
 800f3c4:	d902      	bls.n	800f3cc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800f3c6:	2301      	movs	r3, #1
 800f3c8:	75fb      	strb	r3, [r7, #23]
          break;
 800f3ca:	e00c      	b.n	800f3e6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800f3cc:	683b      	ldr	r3, [r7, #0]
 800f3ce:	781b      	ldrb	r3, [r3, #0]
 800f3d0:	015a      	lsls	r2, r3, #5
 800f3d2:	693b      	ldr	r3, [r7, #16]
 800f3d4:	4413      	add	r3, r2
 800f3d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f3e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f3e4:	d0e7      	beq.n	800f3b6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800f3e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	371c      	adds	r7, #28
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f2:	4770      	bx	lr

0800f3f4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f3f4:	b480      	push	{r7}
 800f3f6:	b089      	sub	sp, #36	; 0x24
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	60f8      	str	r0, [r7, #12]
 800f3fc:	60b9      	str	r1, [r7, #8]
 800f3fe:	4611      	mov	r1, r2
 800f400:	461a      	mov	r2, r3
 800f402:	460b      	mov	r3, r1
 800f404:	71fb      	strb	r3, [r7, #7]
 800f406:	4613      	mov	r3, r2
 800f408:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800f40e:	68bb      	ldr	r3, [r7, #8]
 800f410:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800f412:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f416:	2b00      	cmp	r3, #0
 800f418:	d123      	bne.n	800f462 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f41a:	88bb      	ldrh	r3, [r7, #4]
 800f41c:	3303      	adds	r3, #3
 800f41e:	089b      	lsrs	r3, r3, #2
 800f420:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f422:	2300      	movs	r3, #0
 800f424:	61bb      	str	r3, [r7, #24]
 800f426:	e018      	b.n	800f45a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f428:	79fb      	ldrb	r3, [r7, #7]
 800f42a:	031a      	lsls	r2, r3, #12
 800f42c:	697b      	ldr	r3, [r7, #20]
 800f42e:	4413      	add	r3, r2
 800f430:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f434:	461a      	mov	r2, r3
 800f436:	69fb      	ldr	r3, [r7, #28]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f43c:	69fb      	ldr	r3, [r7, #28]
 800f43e:	3301      	adds	r3, #1
 800f440:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f442:	69fb      	ldr	r3, [r7, #28]
 800f444:	3301      	adds	r3, #1
 800f446:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f448:	69fb      	ldr	r3, [r7, #28]
 800f44a:	3301      	adds	r3, #1
 800f44c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f44e:	69fb      	ldr	r3, [r7, #28]
 800f450:	3301      	adds	r3, #1
 800f452:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f454:	69bb      	ldr	r3, [r7, #24]
 800f456:	3301      	adds	r3, #1
 800f458:	61bb      	str	r3, [r7, #24]
 800f45a:	69ba      	ldr	r2, [r7, #24]
 800f45c:	693b      	ldr	r3, [r7, #16]
 800f45e:	429a      	cmp	r2, r3
 800f460:	d3e2      	bcc.n	800f428 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f462:	2300      	movs	r3, #0
}
 800f464:	4618      	mov	r0, r3
 800f466:	3724      	adds	r7, #36	; 0x24
 800f468:	46bd      	mov	sp, r7
 800f46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46e:	4770      	bx	lr

0800f470 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f470:	b480      	push	{r7}
 800f472:	b08b      	sub	sp, #44	; 0x2c
 800f474:	af00      	add	r7, sp, #0
 800f476:	60f8      	str	r0, [r7, #12]
 800f478:	60b9      	str	r1, [r7, #8]
 800f47a:	4613      	mov	r3, r2
 800f47c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800f482:	68bb      	ldr	r3, [r7, #8]
 800f484:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800f486:	88fb      	ldrh	r3, [r7, #6]
 800f488:	089b      	lsrs	r3, r3, #2
 800f48a:	b29b      	uxth	r3, r3
 800f48c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800f48e:	88fb      	ldrh	r3, [r7, #6]
 800f490:	f003 0303 	and.w	r3, r3, #3
 800f494:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800f496:	2300      	movs	r3, #0
 800f498:	623b      	str	r3, [r7, #32]
 800f49a:	e014      	b.n	800f4c6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f49c:	69bb      	ldr	r3, [r7, #24]
 800f49e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f4a2:	681a      	ldr	r2, [r3, #0]
 800f4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4a6:	601a      	str	r2, [r3, #0]
    pDest++;
 800f4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4aa:	3301      	adds	r3, #1
 800f4ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4b0:	3301      	adds	r3, #1
 800f4b2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4b6:	3301      	adds	r3, #1
 800f4b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4bc:	3301      	adds	r3, #1
 800f4be:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800f4c0:	6a3b      	ldr	r3, [r7, #32]
 800f4c2:	3301      	adds	r3, #1
 800f4c4:	623b      	str	r3, [r7, #32]
 800f4c6:	6a3a      	ldr	r2, [r7, #32]
 800f4c8:	697b      	ldr	r3, [r7, #20]
 800f4ca:	429a      	cmp	r2, r3
 800f4cc:	d3e6      	bcc.n	800f49c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800f4ce:	8bfb      	ldrh	r3, [r7, #30]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d01e      	beq.n	800f512 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800f4d8:	69bb      	ldr	r3, [r7, #24]
 800f4da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f4de:	461a      	mov	r2, r3
 800f4e0:	f107 0310 	add.w	r3, r7, #16
 800f4e4:	6812      	ldr	r2, [r2, #0]
 800f4e6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800f4e8:	693a      	ldr	r2, [r7, #16]
 800f4ea:	6a3b      	ldr	r3, [r7, #32]
 800f4ec:	b2db      	uxtb	r3, r3
 800f4ee:	00db      	lsls	r3, r3, #3
 800f4f0:	fa22 f303 	lsr.w	r3, r2, r3
 800f4f4:	b2da      	uxtb	r2, r3
 800f4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4f8:	701a      	strb	r2, [r3, #0]
      i++;
 800f4fa:	6a3b      	ldr	r3, [r7, #32]
 800f4fc:	3301      	adds	r3, #1
 800f4fe:	623b      	str	r3, [r7, #32]
      pDest++;
 800f500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f502:	3301      	adds	r3, #1
 800f504:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800f506:	8bfb      	ldrh	r3, [r7, #30]
 800f508:	3b01      	subs	r3, #1
 800f50a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800f50c:	8bfb      	ldrh	r3, [r7, #30]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d1ea      	bne.n	800f4e8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800f512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f514:	4618      	mov	r0, r3
 800f516:	372c      	adds	r7, #44	; 0x2c
 800f518:	46bd      	mov	sp, r7
 800f51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f51e:	4770      	bx	lr

0800f520 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f520:	b480      	push	{r7}
 800f522:	b085      	sub	sp, #20
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	68fa      	ldr	r2, [r7, #12]
 800f536:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f53a:	f023 0303 	bic.w	r3, r3, #3
 800f53e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f546:	685b      	ldr	r3, [r3, #4]
 800f548:	68fa      	ldr	r2, [r7, #12]
 800f54a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f54e:	f043 0302 	orr.w	r3, r3, #2
 800f552:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f554:	2300      	movs	r3, #0
}
 800f556:	4618      	mov	r0, r3
 800f558:	3714      	adds	r7, #20
 800f55a:	46bd      	mov	sp, r7
 800f55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f560:	4770      	bx	lr

0800f562 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800f562:	b480      	push	{r7}
 800f564:	b085      	sub	sp, #20
 800f566:	af00      	add	r7, sp, #0
 800f568:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	695b      	ldr	r3, [r3, #20]
 800f56e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	699b      	ldr	r3, [r3, #24]
 800f574:	68fa      	ldr	r2, [r7, #12]
 800f576:	4013      	ands	r3, r2
 800f578:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f57a:	68fb      	ldr	r3, [r7, #12]
}
 800f57c:	4618      	mov	r0, r3
 800f57e:	3714      	adds	r7, #20
 800f580:	46bd      	mov	sp, r7
 800f582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f586:	4770      	bx	lr

0800f588 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f588:	b480      	push	{r7}
 800f58a:	b085      	sub	sp, #20
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f59a:	699b      	ldr	r3, [r3, #24]
 800f59c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f5a4:	69db      	ldr	r3, [r3, #28]
 800f5a6:	68ba      	ldr	r2, [r7, #8]
 800f5a8:	4013      	ands	r3, r2
 800f5aa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f5ac:	68bb      	ldr	r3, [r7, #8]
 800f5ae:	0c1b      	lsrs	r3, r3, #16
}
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	3714      	adds	r7, #20
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ba:	4770      	bx	lr

0800f5bc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f5bc:	b480      	push	{r7}
 800f5be:	b085      	sub	sp, #20
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f5ce:	699b      	ldr	r3, [r3, #24]
 800f5d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f5d8:	69db      	ldr	r3, [r3, #28]
 800f5da:	68ba      	ldr	r2, [r7, #8]
 800f5dc:	4013      	ands	r3, r2
 800f5de:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f5e0:	68bb      	ldr	r3, [r7, #8]
 800f5e2:	b29b      	uxth	r3, r3
}
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	3714      	adds	r7, #20
 800f5e8:	46bd      	mov	sp, r7
 800f5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ee:	4770      	bx	lr

0800f5f0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f5f0:	b480      	push	{r7}
 800f5f2:	b085      	sub	sp, #20
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	6078      	str	r0, [r7, #4]
 800f5f8:	460b      	mov	r3, r1
 800f5fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f600:	78fb      	ldrb	r3, [r7, #3]
 800f602:	015a      	lsls	r2, r3, #5
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	4413      	add	r3, r2
 800f608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f60c:	689b      	ldr	r3, [r3, #8]
 800f60e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f616:	695b      	ldr	r3, [r3, #20]
 800f618:	68ba      	ldr	r2, [r7, #8]
 800f61a:	4013      	ands	r3, r2
 800f61c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f61e:	68bb      	ldr	r3, [r7, #8]
}
 800f620:	4618      	mov	r0, r3
 800f622:	3714      	adds	r7, #20
 800f624:	46bd      	mov	sp, r7
 800f626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62a:	4770      	bx	lr

0800f62c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f62c:	b480      	push	{r7}
 800f62e:	b087      	sub	sp, #28
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
 800f634:	460b      	mov	r3, r1
 800f636:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f63c:	697b      	ldr	r3, [r7, #20]
 800f63e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f642:	691b      	ldr	r3, [r3, #16]
 800f644:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f646:	697b      	ldr	r3, [r7, #20]
 800f648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f64c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f64e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f650:	78fb      	ldrb	r3, [r7, #3]
 800f652:	f003 030f 	and.w	r3, r3, #15
 800f656:	68fa      	ldr	r2, [r7, #12]
 800f658:	fa22 f303 	lsr.w	r3, r2, r3
 800f65c:	01db      	lsls	r3, r3, #7
 800f65e:	b2db      	uxtb	r3, r3
 800f660:	693a      	ldr	r2, [r7, #16]
 800f662:	4313      	orrs	r3, r2
 800f664:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f666:	78fb      	ldrb	r3, [r7, #3]
 800f668:	015a      	lsls	r2, r3, #5
 800f66a:	697b      	ldr	r3, [r7, #20]
 800f66c:	4413      	add	r3, r2
 800f66e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f672:	689b      	ldr	r3, [r3, #8]
 800f674:	693a      	ldr	r2, [r7, #16]
 800f676:	4013      	ands	r3, r2
 800f678:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f67a:	68bb      	ldr	r3, [r7, #8]
}
 800f67c:	4618      	mov	r0, r3
 800f67e:	371c      	adds	r7, #28
 800f680:	46bd      	mov	sp, r7
 800f682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f686:	4770      	bx	lr

0800f688 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800f688:	b480      	push	{r7}
 800f68a:	b083      	sub	sp, #12
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	695b      	ldr	r3, [r3, #20]
 800f694:	f003 0301 	and.w	r3, r3, #1
}
 800f698:	4618      	mov	r0, r3
 800f69a:	370c      	adds	r7, #12
 800f69c:	46bd      	mov	sp, r7
 800f69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a2:	4770      	bx	lr

0800f6a4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800f6a4:	b480      	push	{r7}
 800f6a6:	b085      	sub	sp, #20
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6b6:	681a      	ldr	r2, [r3, #0]
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6be:	4619      	mov	r1, r3
 800f6c0:	4b09      	ldr	r3, [pc, #36]	; (800f6e8 <USB_ActivateSetup+0x44>)
 800f6c2:	4013      	ands	r3, r2
 800f6c4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6cc:	685b      	ldr	r3, [r3, #4]
 800f6ce:	68fa      	ldr	r2, [r7, #12]
 800f6d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f6d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f6d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f6da:	2300      	movs	r3, #0
}
 800f6dc:	4618      	mov	r0, r3
 800f6de:	3714      	adds	r7, #20
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e6:	4770      	bx	lr
 800f6e8:	fffff800 	.word	0xfffff800

0800f6ec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800f6ec:	b480      	push	{r7}
 800f6ee:	b087      	sub	sp, #28
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	60f8      	str	r0, [r7, #12]
 800f6f4:	460b      	mov	r3, r1
 800f6f6:	607a      	str	r2, [r7, #4]
 800f6f8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	333c      	adds	r3, #60	; 0x3c
 800f702:	3304      	adds	r3, #4
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f708:	693b      	ldr	r3, [r7, #16]
 800f70a:	4a26      	ldr	r2, [pc, #152]	; (800f7a4 <USB_EP0_OutStart+0xb8>)
 800f70c:	4293      	cmp	r3, r2
 800f70e:	d90a      	bls.n	800f726 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f710:	697b      	ldr	r3, [r7, #20]
 800f712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f71c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f720:	d101      	bne.n	800f726 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f722:	2300      	movs	r3, #0
 800f724:	e037      	b.n	800f796 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f726:	697b      	ldr	r3, [r7, #20]
 800f728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f72c:	461a      	mov	r2, r3
 800f72e:	2300      	movs	r3, #0
 800f730:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f732:	697b      	ldr	r3, [r7, #20]
 800f734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f738:	691b      	ldr	r3, [r3, #16]
 800f73a:	697a      	ldr	r2, [r7, #20]
 800f73c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f740:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f744:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f746:	697b      	ldr	r3, [r7, #20]
 800f748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f74c:	691b      	ldr	r3, [r3, #16]
 800f74e:	697a      	ldr	r2, [r7, #20]
 800f750:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f754:	f043 0318 	orr.w	r3, r3, #24
 800f758:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f75a:	697b      	ldr	r3, [r7, #20]
 800f75c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f760:	691b      	ldr	r3, [r3, #16]
 800f762:	697a      	ldr	r2, [r7, #20]
 800f764:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f768:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800f76c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f76e:	7afb      	ldrb	r3, [r7, #11]
 800f770:	2b01      	cmp	r3, #1
 800f772:	d10f      	bne.n	800f794 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f774:	697b      	ldr	r3, [r7, #20]
 800f776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f77a:	461a      	mov	r2, r3
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f780:	697b      	ldr	r3, [r7, #20]
 800f782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	697a      	ldr	r2, [r7, #20]
 800f78a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f78e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800f792:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f794:	2300      	movs	r3, #0
}
 800f796:	4618      	mov	r0, r3
 800f798:	371c      	adds	r7, #28
 800f79a:	46bd      	mov	sp, r7
 800f79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a0:	4770      	bx	lr
 800f7a2:	bf00      	nop
 800f7a4:	4f54300a 	.word	0x4f54300a

0800f7a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f7a8:	b480      	push	{r7}
 800f7aa:	b085      	sub	sp, #20
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	3301      	adds	r3, #1
 800f7b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	4a13      	ldr	r2, [pc, #76]	; (800f80c <USB_CoreReset+0x64>)
 800f7be:	4293      	cmp	r3, r2
 800f7c0:	d901      	bls.n	800f7c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f7c2:	2303      	movs	r3, #3
 800f7c4:	e01b      	b.n	800f7fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	691b      	ldr	r3, [r3, #16]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	daf2      	bge.n	800f7b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	691b      	ldr	r3, [r3, #16]
 800f7d6:	f043 0201 	orr.w	r2, r3, #1
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	3301      	adds	r3, #1
 800f7e2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	4a09      	ldr	r2, [pc, #36]	; (800f80c <USB_CoreReset+0x64>)
 800f7e8:	4293      	cmp	r3, r2
 800f7ea:	d901      	bls.n	800f7f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f7ec:	2303      	movs	r3, #3
 800f7ee:	e006      	b.n	800f7fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	691b      	ldr	r3, [r3, #16]
 800f7f4:	f003 0301 	and.w	r3, r3, #1
 800f7f8:	2b01      	cmp	r3, #1
 800f7fa:	d0f0      	beq.n	800f7de <USB_CoreReset+0x36>

  return HAL_OK;
 800f7fc:	2300      	movs	r3, #0
}
 800f7fe:	4618      	mov	r0, r3
 800f800:	3714      	adds	r7, #20
 800f802:	46bd      	mov	sp, r7
 800f804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f808:	4770      	bx	lr
 800f80a:	bf00      	nop
 800f80c:	00030d40 	.word	0x00030d40

0800f810 <std>:
 800f810:	2300      	movs	r3, #0
 800f812:	b510      	push	{r4, lr}
 800f814:	4604      	mov	r4, r0
 800f816:	e9c0 3300 	strd	r3, r3, [r0]
 800f81a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f81e:	6083      	str	r3, [r0, #8]
 800f820:	8181      	strh	r1, [r0, #12]
 800f822:	6643      	str	r3, [r0, #100]	; 0x64
 800f824:	81c2      	strh	r2, [r0, #14]
 800f826:	6183      	str	r3, [r0, #24]
 800f828:	4619      	mov	r1, r3
 800f82a:	2208      	movs	r2, #8
 800f82c:	305c      	adds	r0, #92	; 0x5c
 800f82e:	f000 f9f7 	bl	800fc20 <memset>
 800f832:	4b0d      	ldr	r3, [pc, #52]	; (800f868 <std+0x58>)
 800f834:	6263      	str	r3, [r4, #36]	; 0x24
 800f836:	4b0d      	ldr	r3, [pc, #52]	; (800f86c <std+0x5c>)
 800f838:	62a3      	str	r3, [r4, #40]	; 0x28
 800f83a:	4b0d      	ldr	r3, [pc, #52]	; (800f870 <std+0x60>)
 800f83c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f83e:	4b0d      	ldr	r3, [pc, #52]	; (800f874 <std+0x64>)
 800f840:	6323      	str	r3, [r4, #48]	; 0x30
 800f842:	4b0d      	ldr	r3, [pc, #52]	; (800f878 <std+0x68>)
 800f844:	6224      	str	r4, [r4, #32]
 800f846:	429c      	cmp	r4, r3
 800f848:	d006      	beq.n	800f858 <std+0x48>
 800f84a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800f84e:	4294      	cmp	r4, r2
 800f850:	d002      	beq.n	800f858 <std+0x48>
 800f852:	33d0      	adds	r3, #208	; 0xd0
 800f854:	429c      	cmp	r4, r3
 800f856:	d105      	bne.n	800f864 <std+0x54>
 800f858:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f85c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f860:	f000 ba56 	b.w	800fd10 <__retarget_lock_init_recursive>
 800f864:	bd10      	pop	{r4, pc}
 800f866:	bf00      	nop
 800f868:	0800fa71 	.word	0x0800fa71
 800f86c:	0800fa93 	.word	0x0800fa93
 800f870:	0800facb 	.word	0x0800facb
 800f874:	0800faef 	.word	0x0800faef
 800f878:	200014ec 	.word	0x200014ec

0800f87c <stdio_exit_handler>:
 800f87c:	4a02      	ldr	r2, [pc, #8]	; (800f888 <stdio_exit_handler+0xc>)
 800f87e:	4903      	ldr	r1, [pc, #12]	; (800f88c <stdio_exit_handler+0x10>)
 800f880:	4803      	ldr	r0, [pc, #12]	; (800f890 <stdio_exit_handler+0x14>)
 800f882:	f000 b869 	b.w	800f958 <_fwalk_sglue>
 800f886:	bf00      	nop
 800f888:	20000048 	.word	0x20000048
 800f88c:	080105bd 	.word	0x080105bd
 800f890:	20000054 	.word	0x20000054

0800f894 <cleanup_stdio>:
 800f894:	6841      	ldr	r1, [r0, #4]
 800f896:	4b0c      	ldr	r3, [pc, #48]	; (800f8c8 <cleanup_stdio+0x34>)
 800f898:	4299      	cmp	r1, r3
 800f89a:	b510      	push	{r4, lr}
 800f89c:	4604      	mov	r4, r0
 800f89e:	d001      	beq.n	800f8a4 <cleanup_stdio+0x10>
 800f8a0:	f000 fe8c 	bl	80105bc <_fflush_r>
 800f8a4:	68a1      	ldr	r1, [r4, #8]
 800f8a6:	4b09      	ldr	r3, [pc, #36]	; (800f8cc <cleanup_stdio+0x38>)
 800f8a8:	4299      	cmp	r1, r3
 800f8aa:	d002      	beq.n	800f8b2 <cleanup_stdio+0x1e>
 800f8ac:	4620      	mov	r0, r4
 800f8ae:	f000 fe85 	bl	80105bc <_fflush_r>
 800f8b2:	68e1      	ldr	r1, [r4, #12]
 800f8b4:	4b06      	ldr	r3, [pc, #24]	; (800f8d0 <cleanup_stdio+0x3c>)
 800f8b6:	4299      	cmp	r1, r3
 800f8b8:	d004      	beq.n	800f8c4 <cleanup_stdio+0x30>
 800f8ba:	4620      	mov	r0, r4
 800f8bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f8c0:	f000 be7c 	b.w	80105bc <_fflush_r>
 800f8c4:	bd10      	pop	{r4, pc}
 800f8c6:	bf00      	nop
 800f8c8:	200014ec 	.word	0x200014ec
 800f8cc:	20001554 	.word	0x20001554
 800f8d0:	200015bc 	.word	0x200015bc

0800f8d4 <global_stdio_init.part.0>:
 800f8d4:	b510      	push	{r4, lr}
 800f8d6:	4b0b      	ldr	r3, [pc, #44]	; (800f904 <global_stdio_init.part.0+0x30>)
 800f8d8:	4c0b      	ldr	r4, [pc, #44]	; (800f908 <global_stdio_init.part.0+0x34>)
 800f8da:	4a0c      	ldr	r2, [pc, #48]	; (800f90c <global_stdio_init.part.0+0x38>)
 800f8dc:	601a      	str	r2, [r3, #0]
 800f8de:	4620      	mov	r0, r4
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	2104      	movs	r1, #4
 800f8e4:	f7ff ff94 	bl	800f810 <std>
 800f8e8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f8ec:	2201      	movs	r2, #1
 800f8ee:	2109      	movs	r1, #9
 800f8f0:	f7ff ff8e 	bl	800f810 <std>
 800f8f4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f8f8:	2202      	movs	r2, #2
 800f8fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f8fe:	2112      	movs	r1, #18
 800f900:	f7ff bf86 	b.w	800f810 <std>
 800f904:	20001624 	.word	0x20001624
 800f908:	200014ec 	.word	0x200014ec
 800f90c:	0800f87d 	.word	0x0800f87d

0800f910 <__sfp_lock_acquire>:
 800f910:	4801      	ldr	r0, [pc, #4]	; (800f918 <__sfp_lock_acquire+0x8>)
 800f912:	f000 b9fe 	b.w	800fd12 <__retarget_lock_acquire_recursive>
 800f916:	bf00      	nop
 800f918:	2000162d 	.word	0x2000162d

0800f91c <__sfp_lock_release>:
 800f91c:	4801      	ldr	r0, [pc, #4]	; (800f924 <__sfp_lock_release+0x8>)
 800f91e:	f000 b9f9 	b.w	800fd14 <__retarget_lock_release_recursive>
 800f922:	bf00      	nop
 800f924:	2000162d 	.word	0x2000162d

0800f928 <__sinit>:
 800f928:	b510      	push	{r4, lr}
 800f92a:	4604      	mov	r4, r0
 800f92c:	f7ff fff0 	bl	800f910 <__sfp_lock_acquire>
 800f930:	6a23      	ldr	r3, [r4, #32]
 800f932:	b11b      	cbz	r3, 800f93c <__sinit+0x14>
 800f934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f938:	f7ff bff0 	b.w	800f91c <__sfp_lock_release>
 800f93c:	4b04      	ldr	r3, [pc, #16]	; (800f950 <__sinit+0x28>)
 800f93e:	6223      	str	r3, [r4, #32]
 800f940:	4b04      	ldr	r3, [pc, #16]	; (800f954 <__sinit+0x2c>)
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	2b00      	cmp	r3, #0
 800f946:	d1f5      	bne.n	800f934 <__sinit+0xc>
 800f948:	f7ff ffc4 	bl	800f8d4 <global_stdio_init.part.0>
 800f94c:	e7f2      	b.n	800f934 <__sinit+0xc>
 800f94e:	bf00      	nop
 800f950:	0800f895 	.word	0x0800f895
 800f954:	20001624 	.word	0x20001624

0800f958 <_fwalk_sglue>:
 800f958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f95c:	4607      	mov	r7, r0
 800f95e:	4688      	mov	r8, r1
 800f960:	4614      	mov	r4, r2
 800f962:	2600      	movs	r6, #0
 800f964:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f968:	f1b9 0901 	subs.w	r9, r9, #1
 800f96c:	d505      	bpl.n	800f97a <_fwalk_sglue+0x22>
 800f96e:	6824      	ldr	r4, [r4, #0]
 800f970:	2c00      	cmp	r4, #0
 800f972:	d1f7      	bne.n	800f964 <_fwalk_sglue+0xc>
 800f974:	4630      	mov	r0, r6
 800f976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f97a:	89ab      	ldrh	r3, [r5, #12]
 800f97c:	2b01      	cmp	r3, #1
 800f97e:	d907      	bls.n	800f990 <_fwalk_sglue+0x38>
 800f980:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f984:	3301      	adds	r3, #1
 800f986:	d003      	beq.n	800f990 <_fwalk_sglue+0x38>
 800f988:	4629      	mov	r1, r5
 800f98a:	4638      	mov	r0, r7
 800f98c:	47c0      	blx	r8
 800f98e:	4306      	orrs	r6, r0
 800f990:	3568      	adds	r5, #104	; 0x68
 800f992:	e7e9      	b.n	800f968 <_fwalk_sglue+0x10>

0800f994 <iprintf>:
 800f994:	b40f      	push	{r0, r1, r2, r3}
 800f996:	b507      	push	{r0, r1, r2, lr}
 800f998:	4906      	ldr	r1, [pc, #24]	; (800f9b4 <iprintf+0x20>)
 800f99a:	ab04      	add	r3, sp, #16
 800f99c:	6808      	ldr	r0, [r1, #0]
 800f99e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f9a2:	6881      	ldr	r1, [r0, #8]
 800f9a4:	9301      	str	r3, [sp, #4]
 800f9a6:	f000 fad9 	bl	800ff5c <_vfiprintf_r>
 800f9aa:	b003      	add	sp, #12
 800f9ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800f9b0:	b004      	add	sp, #16
 800f9b2:	4770      	bx	lr
 800f9b4:	200000a0 	.word	0x200000a0

0800f9b8 <_puts_r>:
 800f9b8:	6a03      	ldr	r3, [r0, #32]
 800f9ba:	b570      	push	{r4, r5, r6, lr}
 800f9bc:	6884      	ldr	r4, [r0, #8]
 800f9be:	4605      	mov	r5, r0
 800f9c0:	460e      	mov	r6, r1
 800f9c2:	b90b      	cbnz	r3, 800f9c8 <_puts_r+0x10>
 800f9c4:	f7ff ffb0 	bl	800f928 <__sinit>
 800f9c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f9ca:	07db      	lsls	r3, r3, #31
 800f9cc:	d405      	bmi.n	800f9da <_puts_r+0x22>
 800f9ce:	89a3      	ldrh	r3, [r4, #12]
 800f9d0:	0598      	lsls	r0, r3, #22
 800f9d2:	d402      	bmi.n	800f9da <_puts_r+0x22>
 800f9d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f9d6:	f000 f99c 	bl	800fd12 <__retarget_lock_acquire_recursive>
 800f9da:	89a3      	ldrh	r3, [r4, #12]
 800f9dc:	0719      	lsls	r1, r3, #28
 800f9de:	d513      	bpl.n	800fa08 <_puts_r+0x50>
 800f9e0:	6923      	ldr	r3, [r4, #16]
 800f9e2:	b18b      	cbz	r3, 800fa08 <_puts_r+0x50>
 800f9e4:	3e01      	subs	r6, #1
 800f9e6:	68a3      	ldr	r3, [r4, #8]
 800f9e8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f9ec:	3b01      	subs	r3, #1
 800f9ee:	60a3      	str	r3, [r4, #8]
 800f9f0:	b9e9      	cbnz	r1, 800fa2e <_puts_r+0x76>
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	da2e      	bge.n	800fa54 <_puts_r+0x9c>
 800f9f6:	4622      	mov	r2, r4
 800f9f8:	210a      	movs	r1, #10
 800f9fa:	4628      	mov	r0, r5
 800f9fc:	f000 f87b 	bl	800faf6 <__swbuf_r>
 800fa00:	3001      	adds	r0, #1
 800fa02:	d007      	beq.n	800fa14 <_puts_r+0x5c>
 800fa04:	250a      	movs	r5, #10
 800fa06:	e007      	b.n	800fa18 <_puts_r+0x60>
 800fa08:	4621      	mov	r1, r4
 800fa0a:	4628      	mov	r0, r5
 800fa0c:	f000 f8b0 	bl	800fb70 <__swsetup_r>
 800fa10:	2800      	cmp	r0, #0
 800fa12:	d0e7      	beq.n	800f9e4 <_puts_r+0x2c>
 800fa14:	f04f 35ff 	mov.w	r5, #4294967295
 800fa18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fa1a:	07da      	lsls	r2, r3, #31
 800fa1c:	d405      	bmi.n	800fa2a <_puts_r+0x72>
 800fa1e:	89a3      	ldrh	r3, [r4, #12]
 800fa20:	059b      	lsls	r3, r3, #22
 800fa22:	d402      	bmi.n	800fa2a <_puts_r+0x72>
 800fa24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fa26:	f000 f975 	bl	800fd14 <__retarget_lock_release_recursive>
 800fa2a:	4628      	mov	r0, r5
 800fa2c:	bd70      	pop	{r4, r5, r6, pc}
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	da04      	bge.n	800fa3c <_puts_r+0x84>
 800fa32:	69a2      	ldr	r2, [r4, #24]
 800fa34:	429a      	cmp	r2, r3
 800fa36:	dc06      	bgt.n	800fa46 <_puts_r+0x8e>
 800fa38:	290a      	cmp	r1, #10
 800fa3a:	d004      	beq.n	800fa46 <_puts_r+0x8e>
 800fa3c:	6823      	ldr	r3, [r4, #0]
 800fa3e:	1c5a      	adds	r2, r3, #1
 800fa40:	6022      	str	r2, [r4, #0]
 800fa42:	7019      	strb	r1, [r3, #0]
 800fa44:	e7cf      	b.n	800f9e6 <_puts_r+0x2e>
 800fa46:	4622      	mov	r2, r4
 800fa48:	4628      	mov	r0, r5
 800fa4a:	f000 f854 	bl	800faf6 <__swbuf_r>
 800fa4e:	3001      	adds	r0, #1
 800fa50:	d1c9      	bne.n	800f9e6 <_puts_r+0x2e>
 800fa52:	e7df      	b.n	800fa14 <_puts_r+0x5c>
 800fa54:	6823      	ldr	r3, [r4, #0]
 800fa56:	250a      	movs	r5, #10
 800fa58:	1c5a      	adds	r2, r3, #1
 800fa5a:	6022      	str	r2, [r4, #0]
 800fa5c:	701d      	strb	r5, [r3, #0]
 800fa5e:	e7db      	b.n	800fa18 <_puts_r+0x60>

0800fa60 <puts>:
 800fa60:	4b02      	ldr	r3, [pc, #8]	; (800fa6c <puts+0xc>)
 800fa62:	4601      	mov	r1, r0
 800fa64:	6818      	ldr	r0, [r3, #0]
 800fa66:	f7ff bfa7 	b.w	800f9b8 <_puts_r>
 800fa6a:	bf00      	nop
 800fa6c:	200000a0 	.word	0x200000a0

0800fa70 <__sread>:
 800fa70:	b510      	push	{r4, lr}
 800fa72:	460c      	mov	r4, r1
 800fa74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa78:	f000 f8fc 	bl	800fc74 <_read_r>
 800fa7c:	2800      	cmp	r0, #0
 800fa7e:	bfab      	itete	ge
 800fa80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fa82:	89a3      	ldrhlt	r3, [r4, #12]
 800fa84:	181b      	addge	r3, r3, r0
 800fa86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fa8a:	bfac      	ite	ge
 800fa8c:	6563      	strge	r3, [r4, #84]	; 0x54
 800fa8e:	81a3      	strhlt	r3, [r4, #12]
 800fa90:	bd10      	pop	{r4, pc}

0800fa92 <__swrite>:
 800fa92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa96:	461f      	mov	r7, r3
 800fa98:	898b      	ldrh	r3, [r1, #12]
 800fa9a:	05db      	lsls	r3, r3, #23
 800fa9c:	4605      	mov	r5, r0
 800fa9e:	460c      	mov	r4, r1
 800faa0:	4616      	mov	r6, r2
 800faa2:	d505      	bpl.n	800fab0 <__swrite+0x1e>
 800faa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800faa8:	2302      	movs	r3, #2
 800faaa:	2200      	movs	r2, #0
 800faac:	f000 f8d0 	bl	800fc50 <_lseek_r>
 800fab0:	89a3      	ldrh	r3, [r4, #12]
 800fab2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fab6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800faba:	81a3      	strh	r3, [r4, #12]
 800fabc:	4632      	mov	r2, r6
 800fabe:	463b      	mov	r3, r7
 800fac0:	4628      	mov	r0, r5
 800fac2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fac6:	f000 b8e7 	b.w	800fc98 <_write_r>

0800faca <__sseek>:
 800faca:	b510      	push	{r4, lr}
 800facc:	460c      	mov	r4, r1
 800face:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fad2:	f000 f8bd 	bl	800fc50 <_lseek_r>
 800fad6:	1c43      	adds	r3, r0, #1
 800fad8:	89a3      	ldrh	r3, [r4, #12]
 800fada:	bf15      	itete	ne
 800fadc:	6560      	strne	r0, [r4, #84]	; 0x54
 800fade:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fae2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fae6:	81a3      	strheq	r3, [r4, #12]
 800fae8:	bf18      	it	ne
 800faea:	81a3      	strhne	r3, [r4, #12]
 800faec:	bd10      	pop	{r4, pc}

0800faee <__sclose>:
 800faee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800faf2:	f000 b89d 	b.w	800fc30 <_close_r>

0800faf6 <__swbuf_r>:
 800faf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800faf8:	460e      	mov	r6, r1
 800fafa:	4614      	mov	r4, r2
 800fafc:	4605      	mov	r5, r0
 800fafe:	b118      	cbz	r0, 800fb08 <__swbuf_r+0x12>
 800fb00:	6a03      	ldr	r3, [r0, #32]
 800fb02:	b90b      	cbnz	r3, 800fb08 <__swbuf_r+0x12>
 800fb04:	f7ff ff10 	bl	800f928 <__sinit>
 800fb08:	69a3      	ldr	r3, [r4, #24]
 800fb0a:	60a3      	str	r3, [r4, #8]
 800fb0c:	89a3      	ldrh	r3, [r4, #12]
 800fb0e:	071a      	lsls	r2, r3, #28
 800fb10:	d525      	bpl.n	800fb5e <__swbuf_r+0x68>
 800fb12:	6923      	ldr	r3, [r4, #16]
 800fb14:	b31b      	cbz	r3, 800fb5e <__swbuf_r+0x68>
 800fb16:	6823      	ldr	r3, [r4, #0]
 800fb18:	6922      	ldr	r2, [r4, #16]
 800fb1a:	1a98      	subs	r0, r3, r2
 800fb1c:	6963      	ldr	r3, [r4, #20]
 800fb1e:	b2f6      	uxtb	r6, r6
 800fb20:	4283      	cmp	r3, r0
 800fb22:	4637      	mov	r7, r6
 800fb24:	dc04      	bgt.n	800fb30 <__swbuf_r+0x3a>
 800fb26:	4621      	mov	r1, r4
 800fb28:	4628      	mov	r0, r5
 800fb2a:	f000 fd47 	bl	80105bc <_fflush_r>
 800fb2e:	b9e0      	cbnz	r0, 800fb6a <__swbuf_r+0x74>
 800fb30:	68a3      	ldr	r3, [r4, #8]
 800fb32:	3b01      	subs	r3, #1
 800fb34:	60a3      	str	r3, [r4, #8]
 800fb36:	6823      	ldr	r3, [r4, #0]
 800fb38:	1c5a      	adds	r2, r3, #1
 800fb3a:	6022      	str	r2, [r4, #0]
 800fb3c:	701e      	strb	r6, [r3, #0]
 800fb3e:	6962      	ldr	r2, [r4, #20]
 800fb40:	1c43      	adds	r3, r0, #1
 800fb42:	429a      	cmp	r2, r3
 800fb44:	d004      	beq.n	800fb50 <__swbuf_r+0x5a>
 800fb46:	89a3      	ldrh	r3, [r4, #12]
 800fb48:	07db      	lsls	r3, r3, #31
 800fb4a:	d506      	bpl.n	800fb5a <__swbuf_r+0x64>
 800fb4c:	2e0a      	cmp	r6, #10
 800fb4e:	d104      	bne.n	800fb5a <__swbuf_r+0x64>
 800fb50:	4621      	mov	r1, r4
 800fb52:	4628      	mov	r0, r5
 800fb54:	f000 fd32 	bl	80105bc <_fflush_r>
 800fb58:	b938      	cbnz	r0, 800fb6a <__swbuf_r+0x74>
 800fb5a:	4638      	mov	r0, r7
 800fb5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb5e:	4621      	mov	r1, r4
 800fb60:	4628      	mov	r0, r5
 800fb62:	f000 f805 	bl	800fb70 <__swsetup_r>
 800fb66:	2800      	cmp	r0, #0
 800fb68:	d0d5      	beq.n	800fb16 <__swbuf_r+0x20>
 800fb6a:	f04f 37ff 	mov.w	r7, #4294967295
 800fb6e:	e7f4      	b.n	800fb5a <__swbuf_r+0x64>

0800fb70 <__swsetup_r>:
 800fb70:	b538      	push	{r3, r4, r5, lr}
 800fb72:	4b2a      	ldr	r3, [pc, #168]	; (800fc1c <__swsetup_r+0xac>)
 800fb74:	4605      	mov	r5, r0
 800fb76:	6818      	ldr	r0, [r3, #0]
 800fb78:	460c      	mov	r4, r1
 800fb7a:	b118      	cbz	r0, 800fb84 <__swsetup_r+0x14>
 800fb7c:	6a03      	ldr	r3, [r0, #32]
 800fb7e:	b90b      	cbnz	r3, 800fb84 <__swsetup_r+0x14>
 800fb80:	f7ff fed2 	bl	800f928 <__sinit>
 800fb84:	89a3      	ldrh	r3, [r4, #12]
 800fb86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fb8a:	0718      	lsls	r0, r3, #28
 800fb8c:	d422      	bmi.n	800fbd4 <__swsetup_r+0x64>
 800fb8e:	06d9      	lsls	r1, r3, #27
 800fb90:	d407      	bmi.n	800fba2 <__swsetup_r+0x32>
 800fb92:	2309      	movs	r3, #9
 800fb94:	602b      	str	r3, [r5, #0]
 800fb96:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fb9a:	81a3      	strh	r3, [r4, #12]
 800fb9c:	f04f 30ff 	mov.w	r0, #4294967295
 800fba0:	e034      	b.n	800fc0c <__swsetup_r+0x9c>
 800fba2:	0758      	lsls	r0, r3, #29
 800fba4:	d512      	bpl.n	800fbcc <__swsetup_r+0x5c>
 800fba6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fba8:	b141      	cbz	r1, 800fbbc <__swsetup_r+0x4c>
 800fbaa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fbae:	4299      	cmp	r1, r3
 800fbb0:	d002      	beq.n	800fbb8 <__swsetup_r+0x48>
 800fbb2:	4628      	mov	r0, r5
 800fbb4:	f000 f8b0 	bl	800fd18 <_free_r>
 800fbb8:	2300      	movs	r3, #0
 800fbba:	6363      	str	r3, [r4, #52]	; 0x34
 800fbbc:	89a3      	ldrh	r3, [r4, #12]
 800fbbe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fbc2:	81a3      	strh	r3, [r4, #12]
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	6063      	str	r3, [r4, #4]
 800fbc8:	6923      	ldr	r3, [r4, #16]
 800fbca:	6023      	str	r3, [r4, #0]
 800fbcc:	89a3      	ldrh	r3, [r4, #12]
 800fbce:	f043 0308 	orr.w	r3, r3, #8
 800fbd2:	81a3      	strh	r3, [r4, #12]
 800fbd4:	6923      	ldr	r3, [r4, #16]
 800fbd6:	b94b      	cbnz	r3, 800fbec <__swsetup_r+0x7c>
 800fbd8:	89a3      	ldrh	r3, [r4, #12]
 800fbda:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fbde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fbe2:	d003      	beq.n	800fbec <__swsetup_r+0x7c>
 800fbe4:	4621      	mov	r1, r4
 800fbe6:	4628      	mov	r0, r5
 800fbe8:	f000 fd36 	bl	8010658 <__smakebuf_r>
 800fbec:	89a0      	ldrh	r0, [r4, #12]
 800fbee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fbf2:	f010 0301 	ands.w	r3, r0, #1
 800fbf6:	d00a      	beq.n	800fc0e <__swsetup_r+0x9e>
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	60a3      	str	r3, [r4, #8]
 800fbfc:	6963      	ldr	r3, [r4, #20]
 800fbfe:	425b      	negs	r3, r3
 800fc00:	61a3      	str	r3, [r4, #24]
 800fc02:	6923      	ldr	r3, [r4, #16]
 800fc04:	b943      	cbnz	r3, 800fc18 <__swsetup_r+0xa8>
 800fc06:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fc0a:	d1c4      	bne.n	800fb96 <__swsetup_r+0x26>
 800fc0c:	bd38      	pop	{r3, r4, r5, pc}
 800fc0e:	0781      	lsls	r1, r0, #30
 800fc10:	bf58      	it	pl
 800fc12:	6963      	ldrpl	r3, [r4, #20]
 800fc14:	60a3      	str	r3, [r4, #8]
 800fc16:	e7f4      	b.n	800fc02 <__swsetup_r+0x92>
 800fc18:	2000      	movs	r0, #0
 800fc1a:	e7f7      	b.n	800fc0c <__swsetup_r+0x9c>
 800fc1c:	200000a0 	.word	0x200000a0

0800fc20 <memset>:
 800fc20:	4402      	add	r2, r0
 800fc22:	4603      	mov	r3, r0
 800fc24:	4293      	cmp	r3, r2
 800fc26:	d100      	bne.n	800fc2a <memset+0xa>
 800fc28:	4770      	bx	lr
 800fc2a:	f803 1b01 	strb.w	r1, [r3], #1
 800fc2e:	e7f9      	b.n	800fc24 <memset+0x4>

0800fc30 <_close_r>:
 800fc30:	b538      	push	{r3, r4, r5, lr}
 800fc32:	4d06      	ldr	r5, [pc, #24]	; (800fc4c <_close_r+0x1c>)
 800fc34:	2300      	movs	r3, #0
 800fc36:	4604      	mov	r4, r0
 800fc38:	4608      	mov	r0, r1
 800fc3a:	602b      	str	r3, [r5, #0]
 800fc3c:	f7f3 fb87 	bl	800334e <_close>
 800fc40:	1c43      	adds	r3, r0, #1
 800fc42:	d102      	bne.n	800fc4a <_close_r+0x1a>
 800fc44:	682b      	ldr	r3, [r5, #0]
 800fc46:	b103      	cbz	r3, 800fc4a <_close_r+0x1a>
 800fc48:	6023      	str	r3, [r4, #0]
 800fc4a:	bd38      	pop	{r3, r4, r5, pc}
 800fc4c:	20001628 	.word	0x20001628

0800fc50 <_lseek_r>:
 800fc50:	b538      	push	{r3, r4, r5, lr}
 800fc52:	4d07      	ldr	r5, [pc, #28]	; (800fc70 <_lseek_r+0x20>)
 800fc54:	4604      	mov	r4, r0
 800fc56:	4608      	mov	r0, r1
 800fc58:	4611      	mov	r1, r2
 800fc5a:	2200      	movs	r2, #0
 800fc5c:	602a      	str	r2, [r5, #0]
 800fc5e:	461a      	mov	r2, r3
 800fc60:	f7f3 fb9c 	bl	800339c <_lseek>
 800fc64:	1c43      	adds	r3, r0, #1
 800fc66:	d102      	bne.n	800fc6e <_lseek_r+0x1e>
 800fc68:	682b      	ldr	r3, [r5, #0]
 800fc6a:	b103      	cbz	r3, 800fc6e <_lseek_r+0x1e>
 800fc6c:	6023      	str	r3, [r4, #0]
 800fc6e:	bd38      	pop	{r3, r4, r5, pc}
 800fc70:	20001628 	.word	0x20001628

0800fc74 <_read_r>:
 800fc74:	b538      	push	{r3, r4, r5, lr}
 800fc76:	4d07      	ldr	r5, [pc, #28]	; (800fc94 <_read_r+0x20>)
 800fc78:	4604      	mov	r4, r0
 800fc7a:	4608      	mov	r0, r1
 800fc7c:	4611      	mov	r1, r2
 800fc7e:	2200      	movs	r2, #0
 800fc80:	602a      	str	r2, [r5, #0]
 800fc82:	461a      	mov	r2, r3
 800fc84:	f7f3 fb2a 	bl	80032dc <_read>
 800fc88:	1c43      	adds	r3, r0, #1
 800fc8a:	d102      	bne.n	800fc92 <_read_r+0x1e>
 800fc8c:	682b      	ldr	r3, [r5, #0]
 800fc8e:	b103      	cbz	r3, 800fc92 <_read_r+0x1e>
 800fc90:	6023      	str	r3, [r4, #0]
 800fc92:	bd38      	pop	{r3, r4, r5, pc}
 800fc94:	20001628 	.word	0x20001628

0800fc98 <_write_r>:
 800fc98:	b538      	push	{r3, r4, r5, lr}
 800fc9a:	4d07      	ldr	r5, [pc, #28]	; (800fcb8 <_write_r+0x20>)
 800fc9c:	4604      	mov	r4, r0
 800fc9e:	4608      	mov	r0, r1
 800fca0:	4611      	mov	r1, r2
 800fca2:	2200      	movs	r2, #0
 800fca4:	602a      	str	r2, [r5, #0]
 800fca6:	461a      	mov	r2, r3
 800fca8:	f7f3 fb35 	bl	8003316 <_write>
 800fcac:	1c43      	adds	r3, r0, #1
 800fcae:	d102      	bne.n	800fcb6 <_write_r+0x1e>
 800fcb0:	682b      	ldr	r3, [r5, #0]
 800fcb2:	b103      	cbz	r3, 800fcb6 <_write_r+0x1e>
 800fcb4:	6023      	str	r3, [r4, #0]
 800fcb6:	bd38      	pop	{r3, r4, r5, pc}
 800fcb8:	20001628 	.word	0x20001628

0800fcbc <__errno>:
 800fcbc:	4b01      	ldr	r3, [pc, #4]	; (800fcc4 <__errno+0x8>)
 800fcbe:	6818      	ldr	r0, [r3, #0]
 800fcc0:	4770      	bx	lr
 800fcc2:	bf00      	nop
 800fcc4:	200000a0 	.word	0x200000a0

0800fcc8 <__libc_init_array>:
 800fcc8:	b570      	push	{r4, r5, r6, lr}
 800fcca:	4d0d      	ldr	r5, [pc, #52]	; (800fd00 <__libc_init_array+0x38>)
 800fccc:	4c0d      	ldr	r4, [pc, #52]	; (800fd04 <__libc_init_array+0x3c>)
 800fcce:	1b64      	subs	r4, r4, r5
 800fcd0:	10a4      	asrs	r4, r4, #2
 800fcd2:	2600      	movs	r6, #0
 800fcd4:	42a6      	cmp	r6, r4
 800fcd6:	d109      	bne.n	800fcec <__libc_init_array+0x24>
 800fcd8:	4d0b      	ldr	r5, [pc, #44]	; (800fd08 <__libc_init_array+0x40>)
 800fcda:	4c0c      	ldr	r4, [pc, #48]	; (800fd0c <__libc_init_array+0x44>)
 800fcdc:	f000 fd2a 	bl	8010734 <_init>
 800fce0:	1b64      	subs	r4, r4, r5
 800fce2:	10a4      	asrs	r4, r4, #2
 800fce4:	2600      	movs	r6, #0
 800fce6:	42a6      	cmp	r6, r4
 800fce8:	d105      	bne.n	800fcf6 <__libc_init_array+0x2e>
 800fcea:	bd70      	pop	{r4, r5, r6, pc}
 800fcec:	f855 3b04 	ldr.w	r3, [r5], #4
 800fcf0:	4798      	blx	r3
 800fcf2:	3601      	adds	r6, #1
 800fcf4:	e7ee      	b.n	800fcd4 <__libc_init_array+0xc>
 800fcf6:	f855 3b04 	ldr.w	r3, [r5], #4
 800fcfa:	4798      	blx	r3
 800fcfc:	3601      	adds	r6, #1
 800fcfe:	e7f2      	b.n	800fce6 <__libc_init_array+0x1e>
 800fd00:	080122d8 	.word	0x080122d8
 800fd04:	080122d8 	.word	0x080122d8
 800fd08:	080122d8 	.word	0x080122d8
 800fd0c:	080122dc 	.word	0x080122dc

0800fd10 <__retarget_lock_init_recursive>:
 800fd10:	4770      	bx	lr

0800fd12 <__retarget_lock_acquire_recursive>:
 800fd12:	4770      	bx	lr

0800fd14 <__retarget_lock_release_recursive>:
 800fd14:	4770      	bx	lr
	...

0800fd18 <_free_r>:
 800fd18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fd1a:	2900      	cmp	r1, #0
 800fd1c:	d044      	beq.n	800fda8 <_free_r+0x90>
 800fd1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd22:	9001      	str	r0, [sp, #4]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	f1a1 0404 	sub.w	r4, r1, #4
 800fd2a:	bfb8      	it	lt
 800fd2c:	18e4      	addlt	r4, r4, r3
 800fd2e:	f000 f8df 	bl	800fef0 <__malloc_lock>
 800fd32:	4a1e      	ldr	r2, [pc, #120]	; (800fdac <_free_r+0x94>)
 800fd34:	9801      	ldr	r0, [sp, #4]
 800fd36:	6813      	ldr	r3, [r2, #0]
 800fd38:	b933      	cbnz	r3, 800fd48 <_free_r+0x30>
 800fd3a:	6063      	str	r3, [r4, #4]
 800fd3c:	6014      	str	r4, [r2, #0]
 800fd3e:	b003      	add	sp, #12
 800fd40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fd44:	f000 b8da 	b.w	800fefc <__malloc_unlock>
 800fd48:	42a3      	cmp	r3, r4
 800fd4a:	d908      	bls.n	800fd5e <_free_r+0x46>
 800fd4c:	6825      	ldr	r5, [r4, #0]
 800fd4e:	1961      	adds	r1, r4, r5
 800fd50:	428b      	cmp	r3, r1
 800fd52:	bf01      	itttt	eq
 800fd54:	6819      	ldreq	r1, [r3, #0]
 800fd56:	685b      	ldreq	r3, [r3, #4]
 800fd58:	1949      	addeq	r1, r1, r5
 800fd5a:	6021      	streq	r1, [r4, #0]
 800fd5c:	e7ed      	b.n	800fd3a <_free_r+0x22>
 800fd5e:	461a      	mov	r2, r3
 800fd60:	685b      	ldr	r3, [r3, #4]
 800fd62:	b10b      	cbz	r3, 800fd68 <_free_r+0x50>
 800fd64:	42a3      	cmp	r3, r4
 800fd66:	d9fa      	bls.n	800fd5e <_free_r+0x46>
 800fd68:	6811      	ldr	r1, [r2, #0]
 800fd6a:	1855      	adds	r5, r2, r1
 800fd6c:	42a5      	cmp	r5, r4
 800fd6e:	d10b      	bne.n	800fd88 <_free_r+0x70>
 800fd70:	6824      	ldr	r4, [r4, #0]
 800fd72:	4421      	add	r1, r4
 800fd74:	1854      	adds	r4, r2, r1
 800fd76:	42a3      	cmp	r3, r4
 800fd78:	6011      	str	r1, [r2, #0]
 800fd7a:	d1e0      	bne.n	800fd3e <_free_r+0x26>
 800fd7c:	681c      	ldr	r4, [r3, #0]
 800fd7e:	685b      	ldr	r3, [r3, #4]
 800fd80:	6053      	str	r3, [r2, #4]
 800fd82:	440c      	add	r4, r1
 800fd84:	6014      	str	r4, [r2, #0]
 800fd86:	e7da      	b.n	800fd3e <_free_r+0x26>
 800fd88:	d902      	bls.n	800fd90 <_free_r+0x78>
 800fd8a:	230c      	movs	r3, #12
 800fd8c:	6003      	str	r3, [r0, #0]
 800fd8e:	e7d6      	b.n	800fd3e <_free_r+0x26>
 800fd90:	6825      	ldr	r5, [r4, #0]
 800fd92:	1961      	adds	r1, r4, r5
 800fd94:	428b      	cmp	r3, r1
 800fd96:	bf04      	itt	eq
 800fd98:	6819      	ldreq	r1, [r3, #0]
 800fd9a:	685b      	ldreq	r3, [r3, #4]
 800fd9c:	6063      	str	r3, [r4, #4]
 800fd9e:	bf04      	itt	eq
 800fda0:	1949      	addeq	r1, r1, r5
 800fda2:	6021      	streq	r1, [r4, #0]
 800fda4:	6054      	str	r4, [r2, #4]
 800fda6:	e7ca      	b.n	800fd3e <_free_r+0x26>
 800fda8:	b003      	add	sp, #12
 800fdaa:	bd30      	pop	{r4, r5, pc}
 800fdac:	20001630 	.word	0x20001630

0800fdb0 <sbrk_aligned>:
 800fdb0:	b570      	push	{r4, r5, r6, lr}
 800fdb2:	4e0e      	ldr	r6, [pc, #56]	; (800fdec <sbrk_aligned+0x3c>)
 800fdb4:	460c      	mov	r4, r1
 800fdb6:	6831      	ldr	r1, [r6, #0]
 800fdb8:	4605      	mov	r5, r0
 800fdba:	b911      	cbnz	r1, 800fdc2 <sbrk_aligned+0x12>
 800fdbc:	f000 fcaa 	bl	8010714 <_sbrk_r>
 800fdc0:	6030      	str	r0, [r6, #0]
 800fdc2:	4621      	mov	r1, r4
 800fdc4:	4628      	mov	r0, r5
 800fdc6:	f000 fca5 	bl	8010714 <_sbrk_r>
 800fdca:	1c43      	adds	r3, r0, #1
 800fdcc:	d00a      	beq.n	800fde4 <sbrk_aligned+0x34>
 800fdce:	1cc4      	adds	r4, r0, #3
 800fdd0:	f024 0403 	bic.w	r4, r4, #3
 800fdd4:	42a0      	cmp	r0, r4
 800fdd6:	d007      	beq.n	800fde8 <sbrk_aligned+0x38>
 800fdd8:	1a21      	subs	r1, r4, r0
 800fdda:	4628      	mov	r0, r5
 800fddc:	f000 fc9a 	bl	8010714 <_sbrk_r>
 800fde0:	3001      	adds	r0, #1
 800fde2:	d101      	bne.n	800fde8 <sbrk_aligned+0x38>
 800fde4:	f04f 34ff 	mov.w	r4, #4294967295
 800fde8:	4620      	mov	r0, r4
 800fdea:	bd70      	pop	{r4, r5, r6, pc}
 800fdec:	20001634 	.word	0x20001634

0800fdf0 <_malloc_r>:
 800fdf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fdf4:	1ccd      	adds	r5, r1, #3
 800fdf6:	f025 0503 	bic.w	r5, r5, #3
 800fdfa:	3508      	adds	r5, #8
 800fdfc:	2d0c      	cmp	r5, #12
 800fdfe:	bf38      	it	cc
 800fe00:	250c      	movcc	r5, #12
 800fe02:	2d00      	cmp	r5, #0
 800fe04:	4607      	mov	r7, r0
 800fe06:	db01      	blt.n	800fe0c <_malloc_r+0x1c>
 800fe08:	42a9      	cmp	r1, r5
 800fe0a:	d905      	bls.n	800fe18 <_malloc_r+0x28>
 800fe0c:	230c      	movs	r3, #12
 800fe0e:	603b      	str	r3, [r7, #0]
 800fe10:	2600      	movs	r6, #0
 800fe12:	4630      	mov	r0, r6
 800fe14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe18:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800feec <_malloc_r+0xfc>
 800fe1c:	f000 f868 	bl	800fef0 <__malloc_lock>
 800fe20:	f8d8 3000 	ldr.w	r3, [r8]
 800fe24:	461c      	mov	r4, r3
 800fe26:	bb5c      	cbnz	r4, 800fe80 <_malloc_r+0x90>
 800fe28:	4629      	mov	r1, r5
 800fe2a:	4638      	mov	r0, r7
 800fe2c:	f7ff ffc0 	bl	800fdb0 <sbrk_aligned>
 800fe30:	1c43      	adds	r3, r0, #1
 800fe32:	4604      	mov	r4, r0
 800fe34:	d155      	bne.n	800fee2 <_malloc_r+0xf2>
 800fe36:	f8d8 4000 	ldr.w	r4, [r8]
 800fe3a:	4626      	mov	r6, r4
 800fe3c:	2e00      	cmp	r6, #0
 800fe3e:	d145      	bne.n	800fecc <_malloc_r+0xdc>
 800fe40:	2c00      	cmp	r4, #0
 800fe42:	d048      	beq.n	800fed6 <_malloc_r+0xe6>
 800fe44:	6823      	ldr	r3, [r4, #0]
 800fe46:	4631      	mov	r1, r6
 800fe48:	4638      	mov	r0, r7
 800fe4a:	eb04 0903 	add.w	r9, r4, r3
 800fe4e:	f000 fc61 	bl	8010714 <_sbrk_r>
 800fe52:	4581      	cmp	r9, r0
 800fe54:	d13f      	bne.n	800fed6 <_malloc_r+0xe6>
 800fe56:	6821      	ldr	r1, [r4, #0]
 800fe58:	1a6d      	subs	r5, r5, r1
 800fe5a:	4629      	mov	r1, r5
 800fe5c:	4638      	mov	r0, r7
 800fe5e:	f7ff ffa7 	bl	800fdb0 <sbrk_aligned>
 800fe62:	3001      	adds	r0, #1
 800fe64:	d037      	beq.n	800fed6 <_malloc_r+0xe6>
 800fe66:	6823      	ldr	r3, [r4, #0]
 800fe68:	442b      	add	r3, r5
 800fe6a:	6023      	str	r3, [r4, #0]
 800fe6c:	f8d8 3000 	ldr.w	r3, [r8]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d038      	beq.n	800fee6 <_malloc_r+0xf6>
 800fe74:	685a      	ldr	r2, [r3, #4]
 800fe76:	42a2      	cmp	r2, r4
 800fe78:	d12b      	bne.n	800fed2 <_malloc_r+0xe2>
 800fe7a:	2200      	movs	r2, #0
 800fe7c:	605a      	str	r2, [r3, #4]
 800fe7e:	e00f      	b.n	800fea0 <_malloc_r+0xb0>
 800fe80:	6822      	ldr	r2, [r4, #0]
 800fe82:	1b52      	subs	r2, r2, r5
 800fe84:	d41f      	bmi.n	800fec6 <_malloc_r+0xd6>
 800fe86:	2a0b      	cmp	r2, #11
 800fe88:	d917      	bls.n	800feba <_malloc_r+0xca>
 800fe8a:	1961      	adds	r1, r4, r5
 800fe8c:	42a3      	cmp	r3, r4
 800fe8e:	6025      	str	r5, [r4, #0]
 800fe90:	bf18      	it	ne
 800fe92:	6059      	strne	r1, [r3, #4]
 800fe94:	6863      	ldr	r3, [r4, #4]
 800fe96:	bf08      	it	eq
 800fe98:	f8c8 1000 	streq.w	r1, [r8]
 800fe9c:	5162      	str	r2, [r4, r5]
 800fe9e:	604b      	str	r3, [r1, #4]
 800fea0:	4638      	mov	r0, r7
 800fea2:	f104 060b 	add.w	r6, r4, #11
 800fea6:	f000 f829 	bl	800fefc <__malloc_unlock>
 800feaa:	f026 0607 	bic.w	r6, r6, #7
 800feae:	1d23      	adds	r3, r4, #4
 800feb0:	1af2      	subs	r2, r6, r3
 800feb2:	d0ae      	beq.n	800fe12 <_malloc_r+0x22>
 800feb4:	1b9b      	subs	r3, r3, r6
 800feb6:	50a3      	str	r3, [r4, r2]
 800feb8:	e7ab      	b.n	800fe12 <_malloc_r+0x22>
 800feba:	42a3      	cmp	r3, r4
 800febc:	6862      	ldr	r2, [r4, #4]
 800febe:	d1dd      	bne.n	800fe7c <_malloc_r+0x8c>
 800fec0:	f8c8 2000 	str.w	r2, [r8]
 800fec4:	e7ec      	b.n	800fea0 <_malloc_r+0xb0>
 800fec6:	4623      	mov	r3, r4
 800fec8:	6864      	ldr	r4, [r4, #4]
 800feca:	e7ac      	b.n	800fe26 <_malloc_r+0x36>
 800fecc:	4634      	mov	r4, r6
 800fece:	6876      	ldr	r6, [r6, #4]
 800fed0:	e7b4      	b.n	800fe3c <_malloc_r+0x4c>
 800fed2:	4613      	mov	r3, r2
 800fed4:	e7cc      	b.n	800fe70 <_malloc_r+0x80>
 800fed6:	230c      	movs	r3, #12
 800fed8:	603b      	str	r3, [r7, #0]
 800feda:	4638      	mov	r0, r7
 800fedc:	f000 f80e 	bl	800fefc <__malloc_unlock>
 800fee0:	e797      	b.n	800fe12 <_malloc_r+0x22>
 800fee2:	6025      	str	r5, [r4, #0]
 800fee4:	e7dc      	b.n	800fea0 <_malloc_r+0xb0>
 800fee6:	605b      	str	r3, [r3, #4]
 800fee8:	deff      	udf	#255	; 0xff
 800feea:	bf00      	nop
 800feec:	20001630 	.word	0x20001630

0800fef0 <__malloc_lock>:
 800fef0:	4801      	ldr	r0, [pc, #4]	; (800fef8 <__malloc_lock+0x8>)
 800fef2:	f7ff bf0e 	b.w	800fd12 <__retarget_lock_acquire_recursive>
 800fef6:	bf00      	nop
 800fef8:	2000162c 	.word	0x2000162c

0800fefc <__malloc_unlock>:
 800fefc:	4801      	ldr	r0, [pc, #4]	; (800ff04 <__malloc_unlock+0x8>)
 800fefe:	f7ff bf09 	b.w	800fd14 <__retarget_lock_release_recursive>
 800ff02:	bf00      	nop
 800ff04:	2000162c 	.word	0x2000162c

0800ff08 <__sfputc_r>:
 800ff08:	6893      	ldr	r3, [r2, #8]
 800ff0a:	3b01      	subs	r3, #1
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	b410      	push	{r4}
 800ff10:	6093      	str	r3, [r2, #8]
 800ff12:	da08      	bge.n	800ff26 <__sfputc_r+0x1e>
 800ff14:	6994      	ldr	r4, [r2, #24]
 800ff16:	42a3      	cmp	r3, r4
 800ff18:	db01      	blt.n	800ff1e <__sfputc_r+0x16>
 800ff1a:	290a      	cmp	r1, #10
 800ff1c:	d103      	bne.n	800ff26 <__sfputc_r+0x1e>
 800ff1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff22:	f7ff bde8 	b.w	800faf6 <__swbuf_r>
 800ff26:	6813      	ldr	r3, [r2, #0]
 800ff28:	1c58      	adds	r0, r3, #1
 800ff2a:	6010      	str	r0, [r2, #0]
 800ff2c:	7019      	strb	r1, [r3, #0]
 800ff2e:	4608      	mov	r0, r1
 800ff30:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff34:	4770      	bx	lr

0800ff36 <__sfputs_r>:
 800ff36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff38:	4606      	mov	r6, r0
 800ff3a:	460f      	mov	r7, r1
 800ff3c:	4614      	mov	r4, r2
 800ff3e:	18d5      	adds	r5, r2, r3
 800ff40:	42ac      	cmp	r4, r5
 800ff42:	d101      	bne.n	800ff48 <__sfputs_r+0x12>
 800ff44:	2000      	movs	r0, #0
 800ff46:	e007      	b.n	800ff58 <__sfputs_r+0x22>
 800ff48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff4c:	463a      	mov	r2, r7
 800ff4e:	4630      	mov	r0, r6
 800ff50:	f7ff ffda 	bl	800ff08 <__sfputc_r>
 800ff54:	1c43      	adds	r3, r0, #1
 800ff56:	d1f3      	bne.n	800ff40 <__sfputs_r+0xa>
 800ff58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ff5c <_vfiprintf_r>:
 800ff5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff60:	460d      	mov	r5, r1
 800ff62:	b09d      	sub	sp, #116	; 0x74
 800ff64:	4614      	mov	r4, r2
 800ff66:	4698      	mov	r8, r3
 800ff68:	4606      	mov	r6, r0
 800ff6a:	b118      	cbz	r0, 800ff74 <_vfiprintf_r+0x18>
 800ff6c:	6a03      	ldr	r3, [r0, #32]
 800ff6e:	b90b      	cbnz	r3, 800ff74 <_vfiprintf_r+0x18>
 800ff70:	f7ff fcda 	bl	800f928 <__sinit>
 800ff74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ff76:	07d9      	lsls	r1, r3, #31
 800ff78:	d405      	bmi.n	800ff86 <_vfiprintf_r+0x2a>
 800ff7a:	89ab      	ldrh	r3, [r5, #12]
 800ff7c:	059a      	lsls	r2, r3, #22
 800ff7e:	d402      	bmi.n	800ff86 <_vfiprintf_r+0x2a>
 800ff80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ff82:	f7ff fec6 	bl	800fd12 <__retarget_lock_acquire_recursive>
 800ff86:	89ab      	ldrh	r3, [r5, #12]
 800ff88:	071b      	lsls	r3, r3, #28
 800ff8a:	d501      	bpl.n	800ff90 <_vfiprintf_r+0x34>
 800ff8c:	692b      	ldr	r3, [r5, #16]
 800ff8e:	b99b      	cbnz	r3, 800ffb8 <_vfiprintf_r+0x5c>
 800ff90:	4629      	mov	r1, r5
 800ff92:	4630      	mov	r0, r6
 800ff94:	f7ff fdec 	bl	800fb70 <__swsetup_r>
 800ff98:	b170      	cbz	r0, 800ffb8 <_vfiprintf_r+0x5c>
 800ff9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ff9c:	07dc      	lsls	r4, r3, #31
 800ff9e:	d504      	bpl.n	800ffaa <_vfiprintf_r+0x4e>
 800ffa0:	f04f 30ff 	mov.w	r0, #4294967295
 800ffa4:	b01d      	add	sp, #116	; 0x74
 800ffa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffaa:	89ab      	ldrh	r3, [r5, #12]
 800ffac:	0598      	lsls	r0, r3, #22
 800ffae:	d4f7      	bmi.n	800ffa0 <_vfiprintf_r+0x44>
 800ffb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ffb2:	f7ff feaf 	bl	800fd14 <__retarget_lock_release_recursive>
 800ffb6:	e7f3      	b.n	800ffa0 <_vfiprintf_r+0x44>
 800ffb8:	2300      	movs	r3, #0
 800ffba:	9309      	str	r3, [sp, #36]	; 0x24
 800ffbc:	2320      	movs	r3, #32
 800ffbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ffc2:	f8cd 800c 	str.w	r8, [sp, #12]
 800ffc6:	2330      	movs	r3, #48	; 0x30
 800ffc8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801017c <_vfiprintf_r+0x220>
 800ffcc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ffd0:	f04f 0901 	mov.w	r9, #1
 800ffd4:	4623      	mov	r3, r4
 800ffd6:	469a      	mov	sl, r3
 800ffd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ffdc:	b10a      	cbz	r2, 800ffe2 <_vfiprintf_r+0x86>
 800ffde:	2a25      	cmp	r2, #37	; 0x25
 800ffe0:	d1f9      	bne.n	800ffd6 <_vfiprintf_r+0x7a>
 800ffe2:	ebba 0b04 	subs.w	fp, sl, r4
 800ffe6:	d00b      	beq.n	8010000 <_vfiprintf_r+0xa4>
 800ffe8:	465b      	mov	r3, fp
 800ffea:	4622      	mov	r2, r4
 800ffec:	4629      	mov	r1, r5
 800ffee:	4630      	mov	r0, r6
 800fff0:	f7ff ffa1 	bl	800ff36 <__sfputs_r>
 800fff4:	3001      	adds	r0, #1
 800fff6:	f000 80a9 	beq.w	801014c <_vfiprintf_r+0x1f0>
 800fffa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fffc:	445a      	add	r2, fp
 800fffe:	9209      	str	r2, [sp, #36]	; 0x24
 8010000:	f89a 3000 	ldrb.w	r3, [sl]
 8010004:	2b00      	cmp	r3, #0
 8010006:	f000 80a1 	beq.w	801014c <_vfiprintf_r+0x1f0>
 801000a:	2300      	movs	r3, #0
 801000c:	f04f 32ff 	mov.w	r2, #4294967295
 8010010:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010014:	f10a 0a01 	add.w	sl, sl, #1
 8010018:	9304      	str	r3, [sp, #16]
 801001a:	9307      	str	r3, [sp, #28]
 801001c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010020:	931a      	str	r3, [sp, #104]	; 0x68
 8010022:	4654      	mov	r4, sl
 8010024:	2205      	movs	r2, #5
 8010026:	f814 1b01 	ldrb.w	r1, [r4], #1
 801002a:	4854      	ldr	r0, [pc, #336]	; (801017c <_vfiprintf_r+0x220>)
 801002c:	f7f0 f908 	bl	8000240 <memchr>
 8010030:	9a04      	ldr	r2, [sp, #16]
 8010032:	b9d8      	cbnz	r0, 801006c <_vfiprintf_r+0x110>
 8010034:	06d1      	lsls	r1, r2, #27
 8010036:	bf44      	itt	mi
 8010038:	2320      	movmi	r3, #32
 801003a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801003e:	0713      	lsls	r3, r2, #28
 8010040:	bf44      	itt	mi
 8010042:	232b      	movmi	r3, #43	; 0x2b
 8010044:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010048:	f89a 3000 	ldrb.w	r3, [sl]
 801004c:	2b2a      	cmp	r3, #42	; 0x2a
 801004e:	d015      	beq.n	801007c <_vfiprintf_r+0x120>
 8010050:	9a07      	ldr	r2, [sp, #28]
 8010052:	4654      	mov	r4, sl
 8010054:	2000      	movs	r0, #0
 8010056:	f04f 0c0a 	mov.w	ip, #10
 801005a:	4621      	mov	r1, r4
 801005c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010060:	3b30      	subs	r3, #48	; 0x30
 8010062:	2b09      	cmp	r3, #9
 8010064:	d94d      	bls.n	8010102 <_vfiprintf_r+0x1a6>
 8010066:	b1b0      	cbz	r0, 8010096 <_vfiprintf_r+0x13a>
 8010068:	9207      	str	r2, [sp, #28]
 801006a:	e014      	b.n	8010096 <_vfiprintf_r+0x13a>
 801006c:	eba0 0308 	sub.w	r3, r0, r8
 8010070:	fa09 f303 	lsl.w	r3, r9, r3
 8010074:	4313      	orrs	r3, r2
 8010076:	9304      	str	r3, [sp, #16]
 8010078:	46a2      	mov	sl, r4
 801007a:	e7d2      	b.n	8010022 <_vfiprintf_r+0xc6>
 801007c:	9b03      	ldr	r3, [sp, #12]
 801007e:	1d19      	adds	r1, r3, #4
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	9103      	str	r1, [sp, #12]
 8010084:	2b00      	cmp	r3, #0
 8010086:	bfbb      	ittet	lt
 8010088:	425b      	neglt	r3, r3
 801008a:	f042 0202 	orrlt.w	r2, r2, #2
 801008e:	9307      	strge	r3, [sp, #28]
 8010090:	9307      	strlt	r3, [sp, #28]
 8010092:	bfb8      	it	lt
 8010094:	9204      	strlt	r2, [sp, #16]
 8010096:	7823      	ldrb	r3, [r4, #0]
 8010098:	2b2e      	cmp	r3, #46	; 0x2e
 801009a:	d10c      	bne.n	80100b6 <_vfiprintf_r+0x15a>
 801009c:	7863      	ldrb	r3, [r4, #1]
 801009e:	2b2a      	cmp	r3, #42	; 0x2a
 80100a0:	d134      	bne.n	801010c <_vfiprintf_r+0x1b0>
 80100a2:	9b03      	ldr	r3, [sp, #12]
 80100a4:	1d1a      	adds	r2, r3, #4
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	9203      	str	r2, [sp, #12]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	bfb8      	it	lt
 80100ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80100b2:	3402      	adds	r4, #2
 80100b4:	9305      	str	r3, [sp, #20]
 80100b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801018c <_vfiprintf_r+0x230>
 80100ba:	7821      	ldrb	r1, [r4, #0]
 80100bc:	2203      	movs	r2, #3
 80100be:	4650      	mov	r0, sl
 80100c0:	f7f0 f8be 	bl	8000240 <memchr>
 80100c4:	b138      	cbz	r0, 80100d6 <_vfiprintf_r+0x17a>
 80100c6:	9b04      	ldr	r3, [sp, #16]
 80100c8:	eba0 000a 	sub.w	r0, r0, sl
 80100cc:	2240      	movs	r2, #64	; 0x40
 80100ce:	4082      	lsls	r2, r0
 80100d0:	4313      	orrs	r3, r2
 80100d2:	3401      	adds	r4, #1
 80100d4:	9304      	str	r3, [sp, #16]
 80100d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100da:	4829      	ldr	r0, [pc, #164]	; (8010180 <_vfiprintf_r+0x224>)
 80100dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80100e0:	2206      	movs	r2, #6
 80100e2:	f7f0 f8ad 	bl	8000240 <memchr>
 80100e6:	2800      	cmp	r0, #0
 80100e8:	d03f      	beq.n	801016a <_vfiprintf_r+0x20e>
 80100ea:	4b26      	ldr	r3, [pc, #152]	; (8010184 <_vfiprintf_r+0x228>)
 80100ec:	bb1b      	cbnz	r3, 8010136 <_vfiprintf_r+0x1da>
 80100ee:	9b03      	ldr	r3, [sp, #12]
 80100f0:	3307      	adds	r3, #7
 80100f2:	f023 0307 	bic.w	r3, r3, #7
 80100f6:	3308      	adds	r3, #8
 80100f8:	9303      	str	r3, [sp, #12]
 80100fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100fc:	443b      	add	r3, r7
 80100fe:	9309      	str	r3, [sp, #36]	; 0x24
 8010100:	e768      	b.n	800ffd4 <_vfiprintf_r+0x78>
 8010102:	fb0c 3202 	mla	r2, ip, r2, r3
 8010106:	460c      	mov	r4, r1
 8010108:	2001      	movs	r0, #1
 801010a:	e7a6      	b.n	801005a <_vfiprintf_r+0xfe>
 801010c:	2300      	movs	r3, #0
 801010e:	3401      	adds	r4, #1
 8010110:	9305      	str	r3, [sp, #20]
 8010112:	4619      	mov	r1, r3
 8010114:	f04f 0c0a 	mov.w	ip, #10
 8010118:	4620      	mov	r0, r4
 801011a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801011e:	3a30      	subs	r2, #48	; 0x30
 8010120:	2a09      	cmp	r2, #9
 8010122:	d903      	bls.n	801012c <_vfiprintf_r+0x1d0>
 8010124:	2b00      	cmp	r3, #0
 8010126:	d0c6      	beq.n	80100b6 <_vfiprintf_r+0x15a>
 8010128:	9105      	str	r1, [sp, #20]
 801012a:	e7c4      	b.n	80100b6 <_vfiprintf_r+0x15a>
 801012c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010130:	4604      	mov	r4, r0
 8010132:	2301      	movs	r3, #1
 8010134:	e7f0      	b.n	8010118 <_vfiprintf_r+0x1bc>
 8010136:	ab03      	add	r3, sp, #12
 8010138:	9300      	str	r3, [sp, #0]
 801013a:	462a      	mov	r2, r5
 801013c:	4b12      	ldr	r3, [pc, #72]	; (8010188 <_vfiprintf_r+0x22c>)
 801013e:	a904      	add	r1, sp, #16
 8010140:	4630      	mov	r0, r6
 8010142:	f3af 8000 	nop.w
 8010146:	4607      	mov	r7, r0
 8010148:	1c78      	adds	r0, r7, #1
 801014a:	d1d6      	bne.n	80100fa <_vfiprintf_r+0x19e>
 801014c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801014e:	07d9      	lsls	r1, r3, #31
 8010150:	d405      	bmi.n	801015e <_vfiprintf_r+0x202>
 8010152:	89ab      	ldrh	r3, [r5, #12]
 8010154:	059a      	lsls	r2, r3, #22
 8010156:	d402      	bmi.n	801015e <_vfiprintf_r+0x202>
 8010158:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801015a:	f7ff fddb 	bl	800fd14 <__retarget_lock_release_recursive>
 801015e:	89ab      	ldrh	r3, [r5, #12]
 8010160:	065b      	lsls	r3, r3, #25
 8010162:	f53f af1d 	bmi.w	800ffa0 <_vfiprintf_r+0x44>
 8010166:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010168:	e71c      	b.n	800ffa4 <_vfiprintf_r+0x48>
 801016a:	ab03      	add	r3, sp, #12
 801016c:	9300      	str	r3, [sp, #0]
 801016e:	462a      	mov	r2, r5
 8010170:	4b05      	ldr	r3, [pc, #20]	; (8010188 <_vfiprintf_r+0x22c>)
 8010172:	a904      	add	r1, sp, #16
 8010174:	4630      	mov	r0, r6
 8010176:	f000 f879 	bl	801026c <_printf_i>
 801017a:	e7e4      	b.n	8010146 <_vfiprintf_r+0x1ea>
 801017c:	0801229c 	.word	0x0801229c
 8010180:	080122a6 	.word	0x080122a6
 8010184:	00000000 	.word	0x00000000
 8010188:	0800ff37 	.word	0x0800ff37
 801018c:	080122a2 	.word	0x080122a2

08010190 <_printf_common>:
 8010190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010194:	4616      	mov	r6, r2
 8010196:	4699      	mov	r9, r3
 8010198:	688a      	ldr	r2, [r1, #8]
 801019a:	690b      	ldr	r3, [r1, #16]
 801019c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80101a0:	4293      	cmp	r3, r2
 80101a2:	bfb8      	it	lt
 80101a4:	4613      	movlt	r3, r2
 80101a6:	6033      	str	r3, [r6, #0]
 80101a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80101ac:	4607      	mov	r7, r0
 80101ae:	460c      	mov	r4, r1
 80101b0:	b10a      	cbz	r2, 80101b6 <_printf_common+0x26>
 80101b2:	3301      	adds	r3, #1
 80101b4:	6033      	str	r3, [r6, #0]
 80101b6:	6823      	ldr	r3, [r4, #0]
 80101b8:	0699      	lsls	r1, r3, #26
 80101ba:	bf42      	ittt	mi
 80101bc:	6833      	ldrmi	r3, [r6, #0]
 80101be:	3302      	addmi	r3, #2
 80101c0:	6033      	strmi	r3, [r6, #0]
 80101c2:	6825      	ldr	r5, [r4, #0]
 80101c4:	f015 0506 	ands.w	r5, r5, #6
 80101c8:	d106      	bne.n	80101d8 <_printf_common+0x48>
 80101ca:	f104 0a19 	add.w	sl, r4, #25
 80101ce:	68e3      	ldr	r3, [r4, #12]
 80101d0:	6832      	ldr	r2, [r6, #0]
 80101d2:	1a9b      	subs	r3, r3, r2
 80101d4:	42ab      	cmp	r3, r5
 80101d6:	dc26      	bgt.n	8010226 <_printf_common+0x96>
 80101d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80101dc:	1e13      	subs	r3, r2, #0
 80101de:	6822      	ldr	r2, [r4, #0]
 80101e0:	bf18      	it	ne
 80101e2:	2301      	movne	r3, #1
 80101e4:	0692      	lsls	r2, r2, #26
 80101e6:	d42b      	bmi.n	8010240 <_printf_common+0xb0>
 80101e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80101ec:	4649      	mov	r1, r9
 80101ee:	4638      	mov	r0, r7
 80101f0:	47c0      	blx	r8
 80101f2:	3001      	adds	r0, #1
 80101f4:	d01e      	beq.n	8010234 <_printf_common+0xa4>
 80101f6:	6823      	ldr	r3, [r4, #0]
 80101f8:	6922      	ldr	r2, [r4, #16]
 80101fa:	f003 0306 	and.w	r3, r3, #6
 80101fe:	2b04      	cmp	r3, #4
 8010200:	bf02      	ittt	eq
 8010202:	68e5      	ldreq	r5, [r4, #12]
 8010204:	6833      	ldreq	r3, [r6, #0]
 8010206:	1aed      	subeq	r5, r5, r3
 8010208:	68a3      	ldr	r3, [r4, #8]
 801020a:	bf0c      	ite	eq
 801020c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010210:	2500      	movne	r5, #0
 8010212:	4293      	cmp	r3, r2
 8010214:	bfc4      	itt	gt
 8010216:	1a9b      	subgt	r3, r3, r2
 8010218:	18ed      	addgt	r5, r5, r3
 801021a:	2600      	movs	r6, #0
 801021c:	341a      	adds	r4, #26
 801021e:	42b5      	cmp	r5, r6
 8010220:	d11a      	bne.n	8010258 <_printf_common+0xc8>
 8010222:	2000      	movs	r0, #0
 8010224:	e008      	b.n	8010238 <_printf_common+0xa8>
 8010226:	2301      	movs	r3, #1
 8010228:	4652      	mov	r2, sl
 801022a:	4649      	mov	r1, r9
 801022c:	4638      	mov	r0, r7
 801022e:	47c0      	blx	r8
 8010230:	3001      	adds	r0, #1
 8010232:	d103      	bne.n	801023c <_printf_common+0xac>
 8010234:	f04f 30ff 	mov.w	r0, #4294967295
 8010238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801023c:	3501      	adds	r5, #1
 801023e:	e7c6      	b.n	80101ce <_printf_common+0x3e>
 8010240:	18e1      	adds	r1, r4, r3
 8010242:	1c5a      	adds	r2, r3, #1
 8010244:	2030      	movs	r0, #48	; 0x30
 8010246:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801024a:	4422      	add	r2, r4
 801024c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010250:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010254:	3302      	adds	r3, #2
 8010256:	e7c7      	b.n	80101e8 <_printf_common+0x58>
 8010258:	2301      	movs	r3, #1
 801025a:	4622      	mov	r2, r4
 801025c:	4649      	mov	r1, r9
 801025e:	4638      	mov	r0, r7
 8010260:	47c0      	blx	r8
 8010262:	3001      	adds	r0, #1
 8010264:	d0e6      	beq.n	8010234 <_printf_common+0xa4>
 8010266:	3601      	adds	r6, #1
 8010268:	e7d9      	b.n	801021e <_printf_common+0x8e>
	...

0801026c <_printf_i>:
 801026c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010270:	7e0f      	ldrb	r7, [r1, #24]
 8010272:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010274:	2f78      	cmp	r7, #120	; 0x78
 8010276:	4691      	mov	r9, r2
 8010278:	4680      	mov	r8, r0
 801027a:	460c      	mov	r4, r1
 801027c:	469a      	mov	sl, r3
 801027e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010282:	d807      	bhi.n	8010294 <_printf_i+0x28>
 8010284:	2f62      	cmp	r7, #98	; 0x62
 8010286:	d80a      	bhi.n	801029e <_printf_i+0x32>
 8010288:	2f00      	cmp	r7, #0
 801028a:	f000 80d4 	beq.w	8010436 <_printf_i+0x1ca>
 801028e:	2f58      	cmp	r7, #88	; 0x58
 8010290:	f000 80c0 	beq.w	8010414 <_printf_i+0x1a8>
 8010294:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010298:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801029c:	e03a      	b.n	8010314 <_printf_i+0xa8>
 801029e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80102a2:	2b15      	cmp	r3, #21
 80102a4:	d8f6      	bhi.n	8010294 <_printf_i+0x28>
 80102a6:	a101      	add	r1, pc, #4	; (adr r1, 80102ac <_printf_i+0x40>)
 80102a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80102ac:	08010305 	.word	0x08010305
 80102b0:	08010319 	.word	0x08010319
 80102b4:	08010295 	.word	0x08010295
 80102b8:	08010295 	.word	0x08010295
 80102bc:	08010295 	.word	0x08010295
 80102c0:	08010295 	.word	0x08010295
 80102c4:	08010319 	.word	0x08010319
 80102c8:	08010295 	.word	0x08010295
 80102cc:	08010295 	.word	0x08010295
 80102d0:	08010295 	.word	0x08010295
 80102d4:	08010295 	.word	0x08010295
 80102d8:	0801041d 	.word	0x0801041d
 80102dc:	08010345 	.word	0x08010345
 80102e0:	080103d7 	.word	0x080103d7
 80102e4:	08010295 	.word	0x08010295
 80102e8:	08010295 	.word	0x08010295
 80102ec:	0801043f 	.word	0x0801043f
 80102f0:	08010295 	.word	0x08010295
 80102f4:	08010345 	.word	0x08010345
 80102f8:	08010295 	.word	0x08010295
 80102fc:	08010295 	.word	0x08010295
 8010300:	080103df 	.word	0x080103df
 8010304:	682b      	ldr	r3, [r5, #0]
 8010306:	1d1a      	adds	r2, r3, #4
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	602a      	str	r2, [r5, #0]
 801030c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010310:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010314:	2301      	movs	r3, #1
 8010316:	e09f      	b.n	8010458 <_printf_i+0x1ec>
 8010318:	6820      	ldr	r0, [r4, #0]
 801031a:	682b      	ldr	r3, [r5, #0]
 801031c:	0607      	lsls	r7, r0, #24
 801031e:	f103 0104 	add.w	r1, r3, #4
 8010322:	6029      	str	r1, [r5, #0]
 8010324:	d501      	bpl.n	801032a <_printf_i+0xbe>
 8010326:	681e      	ldr	r6, [r3, #0]
 8010328:	e003      	b.n	8010332 <_printf_i+0xc6>
 801032a:	0646      	lsls	r6, r0, #25
 801032c:	d5fb      	bpl.n	8010326 <_printf_i+0xba>
 801032e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8010332:	2e00      	cmp	r6, #0
 8010334:	da03      	bge.n	801033e <_printf_i+0xd2>
 8010336:	232d      	movs	r3, #45	; 0x2d
 8010338:	4276      	negs	r6, r6
 801033a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801033e:	485a      	ldr	r0, [pc, #360]	; (80104a8 <_printf_i+0x23c>)
 8010340:	230a      	movs	r3, #10
 8010342:	e012      	b.n	801036a <_printf_i+0xfe>
 8010344:	682b      	ldr	r3, [r5, #0]
 8010346:	6820      	ldr	r0, [r4, #0]
 8010348:	1d19      	adds	r1, r3, #4
 801034a:	6029      	str	r1, [r5, #0]
 801034c:	0605      	lsls	r5, r0, #24
 801034e:	d501      	bpl.n	8010354 <_printf_i+0xe8>
 8010350:	681e      	ldr	r6, [r3, #0]
 8010352:	e002      	b.n	801035a <_printf_i+0xee>
 8010354:	0641      	lsls	r1, r0, #25
 8010356:	d5fb      	bpl.n	8010350 <_printf_i+0xe4>
 8010358:	881e      	ldrh	r6, [r3, #0]
 801035a:	4853      	ldr	r0, [pc, #332]	; (80104a8 <_printf_i+0x23c>)
 801035c:	2f6f      	cmp	r7, #111	; 0x6f
 801035e:	bf0c      	ite	eq
 8010360:	2308      	moveq	r3, #8
 8010362:	230a      	movne	r3, #10
 8010364:	2100      	movs	r1, #0
 8010366:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801036a:	6865      	ldr	r5, [r4, #4]
 801036c:	60a5      	str	r5, [r4, #8]
 801036e:	2d00      	cmp	r5, #0
 8010370:	bfa2      	ittt	ge
 8010372:	6821      	ldrge	r1, [r4, #0]
 8010374:	f021 0104 	bicge.w	r1, r1, #4
 8010378:	6021      	strge	r1, [r4, #0]
 801037a:	b90e      	cbnz	r6, 8010380 <_printf_i+0x114>
 801037c:	2d00      	cmp	r5, #0
 801037e:	d04b      	beq.n	8010418 <_printf_i+0x1ac>
 8010380:	4615      	mov	r5, r2
 8010382:	fbb6 f1f3 	udiv	r1, r6, r3
 8010386:	fb03 6711 	mls	r7, r3, r1, r6
 801038a:	5dc7      	ldrb	r7, [r0, r7]
 801038c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010390:	4637      	mov	r7, r6
 8010392:	42bb      	cmp	r3, r7
 8010394:	460e      	mov	r6, r1
 8010396:	d9f4      	bls.n	8010382 <_printf_i+0x116>
 8010398:	2b08      	cmp	r3, #8
 801039a:	d10b      	bne.n	80103b4 <_printf_i+0x148>
 801039c:	6823      	ldr	r3, [r4, #0]
 801039e:	07de      	lsls	r6, r3, #31
 80103a0:	d508      	bpl.n	80103b4 <_printf_i+0x148>
 80103a2:	6923      	ldr	r3, [r4, #16]
 80103a4:	6861      	ldr	r1, [r4, #4]
 80103a6:	4299      	cmp	r1, r3
 80103a8:	bfde      	ittt	le
 80103aa:	2330      	movle	r3, #48	; 0x30
 80103ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80103b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80103b4:	1b52      	subs	r2, r2, r5
 80103b6:	6122      	str	r2, [r4, #16]
 80103b8:	f8cd a000 	str.w	sl, [sp]
 80103bc:	464b      	mov	r3, r9
 80103be:	aa03      	add	r2, sp, #12
 80103c0:	4621      	mov	r1, r4
 80103c2:	4640      	mov	r0, r8
 80103c4:	f7ff fee4 	bl	8010190 <_printf_common>
 80103c8:	3001      	adds	r0, #1
 80103ca:	d14a      	bne.n	8010462 <_printf_i+0x1f6>
 80103cc:	f04f 30ff 	mov.w	r0, #4294967295
 80103d0:	b004      	add	sp, #16
 80103d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103d6:	6823      	ldr	r3, [r4, #0]
 80103d8:	f043 0320 	orr.w	r3, r3, #32
 80103dc:	6023      	str	r3, [r4, #0]
 80103de:	4833      	ldr	r0, [pc, #204]	; (80104ac <_printf_i+0x240>)
 80103e0:	2778      	movs	r7, #120	; 0x78
 80103e2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80103e6:	6823      	ldr	r3, [r4, #0]
 80103e8:	6829      	ldr	r1, [r5, #0]
 80103ea:	061f      	lsls	r7, r3, #24
 80103ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80103f0:	d402      	bmi.n	80103f8 <_printf_i+0x18c>
 80103f2:	065f      	lsls	r7, r3, #25
 80103f4:	bf48      	it	mi
 80103f6:	b2b6      	uxthmi	r6, r6
 80103f8:	07df      	lsls	r7, r3, #31
 80103fa:	bf48      	it	mi
 80103fc:	f043 0320 	orrmi.w	r3, r3, #32
 8010400:	6029      	str	r1, [r5, #0]
 8010402:	bf48      	it	mi
 8010404:	6023      	strmi	r3, [r4, #0]
 8010406:	b91e      	cbnz	r6, 8010410 <_printf_i+0x1a4>
 8010408:	6823      	ldr	r3, [r4, #0]
 801040a:	f023 0320 	bic.w	r3, r3, #32
 801040e:	6023      	str	r3, [r4, #0]
 8010410:	2310      	movs	r3, #16
 8010412:	e7a7      	b.n	8010364 <_printf_i+0xf8>
 8010414:	4824      	ldr	r0, [pc, #144]	; (80104a8 <_printf_i+0x23c>)
 8010416:	e7e4      	b.n	80103e2 <_printf_i+0x176>
 8010418:	4615      	mov	r5, r2
 801041a:	e7bd      	b.n	8010398 <_printf_i+0x12c>
 801041c:	682b      	ldr	r3, [r5, #0]
 801041e:	6826      	ldr	r6, [r4, #0]
 8010420:	6961      	ldr	r1, [r4, #20]
 8010422:	1d18      	adds	r0, r3, #4
 8010424:	6028      	str	r0, [r5, #0]
 8010426:	0635      	lsls	r5, r6, #24
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	d501      	bpl.n	8010430 <_printf_i+0x1c4>
 801042c:	6019      	str	r1, [r3, #0]
 801042e:	e002      	b.n	8010436 <_printf_i+0x1ca>
 8010430:	0670      	lsls	r0, r6, #25
 8010432:	d5fb      	bpl.n	801042c <_printf_i+0x1c0>
 8010434:	8019      	strh	r1, [r3, #0]
 8010436:	2300      	movs	r3, #0
 8010438:	6123      	str	r3, [r4, #16]
 801043a:	4615      	mov	r5, r2
 801043c:	e7bc      	b.n	80103b8 <_printf_i+0x14c>
 801043e:	682b      	ldr	r3, [r5, #0]
 8010440:	1d1a      	adds	r2, r3, #4
 8010442:	602a      	str	r2, [r5, #0]
 8010444:	681d      	ldr	r5, [r3, #0]
 8010446:	6862      	ldr	r2, [r4, #4]
 8010448:	2100      	movs	r1, #0
 801044a:	4628      	mov	r0, r5
 801044c:	f7ef fef8 	bl	8000240 <memchr>
 8010450:	b108      	cbz	r0, 8010456 <_printf_i+0x1ea>
 8010452:	1b40      	subs	r0, r0, r5
 8010454:	6060      	str	r0, [r4, #4]
 8010456:	6863      	ldr	r3, [r4, #4]
 8010458:	6123      	str	r3, [r4, #16]
 801045a:	2300      	movs	r3, #0
 801045c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010460:	e7aa      	b.n	80103b8 <_printf_i+0x14c>
 8010462:	6923      	ldr	r3, [r4, #16]
 8010464:	462a      	mov	r2, r5
 8010466:	4649      	mov	r1, r9
 8010468:	4640      	mov	r0, r8
 801046a:	47d0      	blx	sl
 801046c:	3001      	adds	r0, #1
 801046e:	d0ad      	beq.n	80103cc <_printf_i+0x160>
 8010470:	6823      	ldr	r3, [r4, #0]
 8010472:	079b      	lsls	r3, r3, #30
 8010474:	d413      	bmi.n	801049e <_printf_i+0x232>
 8010476:	68e0      	ldr	r0, [r4, #12]
 8010478:	9b03      	ldr	r3, [sp, #12]
 801047a:	4298      	cmp	r0, r3
 801047c:	bfb8      	it	lt
 801047e:	4618      	movlt	r0, r3
 8010480:	e7a6      	b.n	80103d0 <_printf_i+0x164>
 8010482:	2301      	movs	r3, #1
 8010484:	4632      	mov	r2, r6
 8010486:	4649      	mov	r1, r9
 8010488:	4640      	mov	r0, r8
 801048a:	47d0      	blx	sl
 801048c:	3001      	adds	r0, #1
 801048e:	d09d      	beq.n	80103cc <_printf_i+0x160>
 8010490:	3501      	adds	r5, #1
 8010492:	68e3      	ldr	r3, [r4, #12]
 8010494:	9903      	ldr	r1, [sp, #12]
 8010496:	1a5b      	subs	r3, r3, r1
 8010498:	42ab      	cmp	r3, r5
 801049a:	dcf2      	bgt.n	8010482 <_printf_i+0x216>
 801049c:	e7eb      	b.n	8010476 <_printf_i+0x20a>
 801049e:	2500      	movs	r5, #0
 80104a0:	f104 0619 	add.w	r6, r4, #25
 80104a4:	e7f5      	b.n	8010492 <_printf_i+0x226>
 80104a6:	bf00      	nop
 80104a8:	080122ad 	.word	0x080122ad
 80104ac:	080122be 	.word	0x080122be

080104b0 <__sflush_r>:
 80104b0:	898a      	ldrh	r2, [r1, #12]
 80104b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104b6:	4605      	mov	r5, r0
 80104b8:	0710      	lsls	r0, r2, #28
 80104ba:	460c      	mov	r4, r1
 80104bc:	d458      	bmi.n	8010570 <__sflush_r+0xc0>
 80104be:	684b      	ldr	r3, [r1, #4]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	dc05      	bgt.n	80104d0 <__sflush_r+0x20>
 80104c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	dc02      	bgt.n	80104d0 <__sflush_r+0x20>
 80104ca:	2000      	movs	r0, #0
 80104cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80104d2:	2e00      	cmp	r6, #0
 80104d4:	d0f9      	beq.n	80104ca <__sflush_r+0x1a>
 80104d6:	2300      	movs	r3, #0
 80104d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80104dc:	682f      	ldr	r7, [r5, #0]
 80104de:	6a21      	ldr	r1, [r4, #32]
 80104e0:	602b      	str	r3, [r5, #0]
 80104e2:	d032      	beq.n	801054a <__sflush_r+0x9a>
 80104e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80104e6:	89a3      	ldrh	r3, [r4, #12]
 80104e8:	075a      	lsls	r2, r3, #29
 80104ea:	d505      	bpl.n	80104f8 <__sflush_r+0x48>
 80104ec:	6863      	ldr	r3, [r4, #4]
 80104ee:	1ac0      	subs	r0, r0, r3
 80104f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80104f2:	b10b      	cbz	r3, 80104f8 <__sflush_r+0x48>
 80104f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80104f6:	1ac0      	subs	r0, r0, r3
 80104f8:	2300      	movs	r3, #0
 80104fa:	4602      	mov	r2, r0
 80104fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80104fe:	6a21      	ldr	r1, [r4, #32]
 8010500:	4628      	mov	r0, r5
 8010502:	47b0      	blx	r6
 8010504:	1c43      	adds	r3, r0, #1
 8010506:	89a3      	ldrh	r3, [r4, #12]
 8010508:	d106      	bne.n	8010518 <__sflush_r+0x68>
 801050a:	6829      	ldr	r1, [r5, #0]
 801050c:	291d      	cmp	r1, #29
 801050e:	d82b      	bhi.n	8010568 <__sflush_r+0xb8>
 8010510:	4a29      	ldr	r2, [pc, #164]	; (80105b8 <__sflush_r+0x108>)
 8010512:	410a      	asrs	r2, r1
 8010514:	07d6      	lsls	r6, r2, #31
 8010516:	d427      	bmi.n	8010568 <__sflush_r+0xb8>
 8010518:	2200      	movs	r2, #0
 801051a:	6062      	str	r2, [r4, #4]
 801051c:	04d9      	lsls	r1, r3, #19
 801051e:	6922      	ldr	r2, [r4, #16]
 8010520:	6022      	str	r2, [r4, #0]
 8010522:	d504      	bpl.n	801052e <__sflush_r+0x7e>
 8010524:	1c42      	adds	r2, r0, #1
 8010526:	d101      	bne.n	801052c <__sflush_r+0x7c>
 8010528:	682b      	ldr	r3, [r5, #0]
 801052a:	b903      	cbnz	r3, 801052e <__sflush_r+0x7e>
 801052c:	6560      	str	r0, [r4, #84]	; 0x54
 801052e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010530:	602f      	str	r7, [r5, #0]
 8010532:	2900      	cmp	r1, #0
 8010534:	d0c9      	beq.n	80104ca <__sflush_r+0x1a>
 8010536:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801053a:	4299      	cmp	r1, r3
 801053c:	d002      	beq.n	8010544 <__sflush_r+0x94>
 801053e:	4628      	mov	r0, r5
 8010540:	f7ff fbea 	bl	800fd18 <_free_r>
 8010544:	2000      	movs	r0, #0
 8010546:	6360      	str	r0, [r4, #52]	; 0x34
 8010548:	e7c0      	b.n	80104cc <__sflush_r+0x1c>
 801054a:	2301      	movs	r3, #1
 801054c:	4628      	mov	r0, r5
 801054e:	47b0      	blx	r6
 8010550:	1c41      	adds	r1, r0, #1
 8010552:	d1c8      	bne.n	80104e6 <__sflush_r+0x36>
 8010554:	682b      	ldr	r3, [r5, #0]
 8010556:	2b00      	cmp	r3, #0
 8010558:	d0c5      	beq.n	80104e6 <__sflush_r+0x36>
 801055a:	2b1d      	cmp	r3, #29
 801055c:	d001      	beq.n	8010562 <__sflush_r+0xb2>
 801055e:	2b16      	cmp	r3, #22
 8010560:	d101      	bne.n	8010566 <__sflush_r+0xb6>
 8010562:	602f      	str	r7, [r5, #0]
 8010564:	e7b1      	b.n	80104ca <__sflush_r+0x1a>
 8010566:	89a3      	ldrh	r3, [r4, #12]
 8010568:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801056c:	81a3      	strh	r3, [r4, #12]
 801056e:	e7ad      	b.n	80104cc <__sflush_r+0x1c>
 8010570:	690f      	ldr	r7, [r1, #16]
 8010572:	2f00      	cmp	r7, #0
 8010574:	d0a9      	beq.n	80104ca <__sflush_r+0x1a>
 8010576:	0793      	lsls	r3, r2, #30
 8010578:	680e      	ldr	r6, [r1, #0]
 801057a:	bf08      	it	eq
 801057c:	694b      	ldreq	r3, [r1, #20]
 801057e:	600f      	str	r7, [r1, #0]
 8010580:	bf18      	it	ne
 8010582:	2300      	movne	r3, #0
 8010584:	eba6 0807 	sub.w	r8, r6, r7
 8010588:	608b      	str	r3, [r1, #8]
 801058a:	f1b8 0f00 	cmp.w	r8, #0
 801058e:	dd9c      	ble.n	80104ca <__sflush_r+0x1a>
 8010590:	6a21      	ldr	r1, [r4, #32]
 8010592:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010594:	4643      	mov	r3, r8
 8010596:	463a      	mov	r2, r7
 8010598:	4628      	mov	r0, r5
 801059a:	47b0      	blx	r6
 801059c:	2800      	cmp	r0, #0
 801059e:	dc06      	bgt.n	80105ae <__sflush_r+0xfe>
 80105a0:	89a3      	ldrh	r3, [r4, #12]
 80105a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80105a6:	81a3      	strh	r3, [r4, #12]
 80105a8:	f04f 30ff 	mov.w	r0, #4294967295
 80105ac:	e78e      	b.n	80104cc <__sflush_r+0x1c>
 80105ae:	4407      	add	r7, r0
 80105b0:	eba8 0800 	sub.w	r8, r8, r0
 80105b4:	e7e9      	b.n	801058a <__sflush_r+0xda>
 80105b6:	bf00      	nop
 80105b8:	dfbffffe 	.word	0xdfbffffe

080105bc <_fflush_r>:
 80105bc:	b538      	push	{r3, r4, r5, lr}
 80105be:	690b      	ldr	r3, [r1, #16]
 80105c0:	4605      	mov	r5, r0
 80105c2:	460c      	mov	r4, r1
 80105c4:	b913      	cbnz	r3, 80105cc <_fflush_r+0x10>
 80105c6:	2500      	movs	r5, #0
 80105c8:	4628      	mov	r0, r5
 80105ca:	bd38      	pop	{r3, r4, r5, pc}
 80105cc:	b118      	cbz	r0, 80105d6 <_fflush_r+0x1a>
 80105ce:	6a03      	ldr	r3, [r0, #32]
 80105d0:	b90b      	cbnz	r3, 80105d6 <_fflush_r+0x1a>
 80105d2:	f7ff f9a9 	bl	800f928 <__sinit>
 80105d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d0f3      	beq.n	80105c6 <_fflush_r+0xa>
 80105de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80105e0:	07d0      	lsls	r0, r2, #31
 80105e2:	d404      	bmi.n	80105ee <_fflush_r+0x32>
 80105e4:	0599      	lsls	r1, r3, #22
 80105e6:	d402      	bmi.n	80105ee <_fflush_r+0x32>
 80105e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80105ea:	f7ff fb92 	bl	800fd12 <__retarget_lock_acquire_recursive>
 80105ee:	4628      	mov	r0, r5
 80105f0:	4621      	mov	r1, r4
 80105f2:	f7ff ff5d 	bl	80104b0 <__sflush_r>
 80105f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80105f8:	07da      	lsls	r2, r3, #31
 80105fa:	4605      	mov	r5, r0
 80105fc:	d4e4      	bmi.n	80105c8 <_fflush_r+0xc>
 80105fe:	89a3      	ldrh	r3, [r4, #12]
 8010600:	059b      	lsls	r3, r3, #22
 8010602:	d4e1      	bmi.n	80105c8 <_fflush_r+0xc>
 8010604:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010606:	f7ff fb85 	bl	800fd14 <__retarget_lock_release_recursive>
 801060a:	e7dd      	b.n	80105c8 <_fflush_r+0xc>

0801060c <__swhatbuf_r>:
 801060c:	b570      	push	{r4, r5, r6, lr}
 801060e:	460c      	mov	r4, r1
 8010610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010614:	2900      	cmp	r1, #0
 8010616:	b096      	sub	sp, #88	; 0x58
 8010618:	4615      	mov	r5, r2
 801061a:	461e      	mov	r6, r3
 801061c:	da0d      	bge.n	801063a <__swhatbuf_r+0x2e>
 801061e:	89a3      	ldrh	r3, [r4, #12]
 8010620:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010624:	f04f 0100 	mov.w	r1, #0
 8010628:	bf0c      	ite	eq
 801062a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801062e:	2340      	movne	r3, #64	; 0x40
 8010630:	2000      	movs	r0, #0
 8010632:	6031      	str	r1, [r6, #0]
 8010634:	602b      	str	r3, [r5, #0]
 8010636:	b016      	add	sp, #88	; 0x58
 8010638:	bd70      	pop	{r4, r5, r6, pc}
 801063a:	466a      	mov	r2, sp
 801063c:	f000 f848 	bl	80106d0 <_fstat_r>
 8010640:	2800      	cmp	r0, #0
 8010642:	dbec      	blt.n	801061e <__swhatbuf_r+0x12>
 8010644:	9901      	ldr	r1, [sp, #4]
 8010646:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801064a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801064e:	4259      	negs	r1, r3
 8010650:	4159      	adcs	r1, r3
 8010652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010656:	e7eb      	b.n	8010630 <__swhatbuf_r+0x24>

08010658 <__smakebuf_r>:
 8010658:	898b      	ldrh	r3, [r1, #12]
 801065a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801065c:	079d      	lsls	r5, r3, #30
 801065e:	4606      	mov	r6, r0
 8010660:	460c      	mov	r4, r1
 8010662:	d507      	bpl.n	8010674 <__smakebuf_r+0x1c>
 8010664:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010668:	6023      	str	r3, [r4, #0]
 801066a:	6123      	str	r3, [r4, #16]
 801066c:	2301      	movs	r3, #1
 801066e:	6163      	str	r3, [r4, #20]
 8010670:	b002      	add	sp, #8
 8010672:	bd70      	pop	{r4, r5, r6, pc}
 8010674:	ab01      	add	r3, sp, #4
 8010676:	466a      	mov	r2, sp
 8010678:	f7ff ffc8 	bl	801060c <__swhatbuf_r>
 801067c:	9900      	ldr	r1, [sp, #0]
 801067e:	4605      	mov	r5, r0
 8010680:	4630      	mov	r0, r6
 8010682:	f7ff fbb5 	bl	800fdf0 <_malloc_r>
 8010686:	b948      	cbnz	r0, 801069c <__smakebuf_r+0x44>
 8010688:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801068c:	059a      	lsls	r2, r3, #22
 801068e:	d4ef      	bmi.n	8010670 <__smakebuf_r+0x18>
 8010690:	f023 0303 	bic.w	r3, r3, #3
 8010694:	f043 0302 	orr.w	r3, r3, #2
 8010698:	81a3      	strh	r3, [r4, #12]
 801069a:	e7e3      	b.n	8010664 <__smakebuf_r+0xc>
 801069c:	89a3      	ldrh	r3, [r4, #12]
 801069e:	6020      	str	r0, [r4, #0]
 80106a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80106a4:	81a3      	strh	r3, [r4, #12]
 80106a6:	9b00      	ldr	r3, [sp, #0]
 80106a8:	6163      	str	r3, [r4, #20]
 80106aa:	9b01      	ldr	r3, [sp, #4]
 80106ac:	6120      	str	r0, [r4, #16]
 80106ae:	b15b      	cbz	r3, 80106c8 <__smakebuf_r+0x70>
 80106b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80106b4:	4630      	mov	r0, r6
 80106b6:	f000 f81d 	bl	80106f4 <_isatty_r>
 80106ba:	b128      	cbz	r0, 80106c8 <__smakebuf_r+0x70>
 80106bc:	89a3      	ldrh	r3, [r4, #12]
 80106be:	f023 0303 	bic.w	r3, r3, #3
 80106c2:	f043 0301 	orr.w	r3, r3, #1
 80106c6:	81a3      	strh	r3, [r4, #12]
 80106c8:	89a3      	ldrh	r3, [r4, #12]
 80106ca:	431d      	orrs	r5, r3
 80106cc:	81a5      	strh	r5, [r4, #12]
 80106ce:	e7cf      	b.n	8010670 <__smakebuf_r+0x18>

080106d0 <_fstat_r>:
 80106d0:	b538      	push	{r3, r4, r5, lr}
 80106d2:	4d07      	ldr	r5, [pc, #28]	; (80106f0 <_fstat_r+0x20>)
 80106d4:	2300      	movs	r3, #0
 80106d6:	4604      	mov	r4, r0
 80106d8:	4608      	mov	r0, r1
 80106da:	4611      	mov	r1, r2
 80106dc:	602b      	str	r3, [r5, #0]
 80106de:	f7f2 fe42 	bl	8003366 <_fstat>
 80106e2:	1c43      	adds	r3, r0, #1
 80106e4:	d102      	bne.n	80106ec <_fstat_r+0x1c>
 80106e6:	682b      	ldr	r3, [r5, #0]
 80106e8:	b103      	cbz	r3, 80106ec <_fstat_r+0x1c>
 80106ea:	6023      	str	r3, [r4, #0]
 80106ec:	bd38      	pop	{r3, r4, r5, pc}
 80106ee:	bf00      	nop
 80106f0:	20001628 	.word	0x20001628

080106f4 <_isatty_r>:
 80106f4:	b538      	push	{r3, r4, r5, lr}
 80106f6:	4d06      	ldr	r5, [pc, #24]	; (8010710 <_isatty_r+0x1c>)
 80106f8:	2300      	movs	r3, #0
 80106fa:	4604      	mov	r4, r0
 80106fc:	4608      	mov	r0, r1
 80106fe:	602b      	str	r3, [r5, #0]
 8010700:	f7f2 fe41 	bl	8003386 <_isatty>
 8010704:	1c43      	adds	r3, r0, #1
 8010706:	d102      	bne.n	801070e <_isatty_r+0x1a>
 8010708:	682b      	ldr	r3, [r5, #0]
 801070a:	b103      	cbz	r3, 801070e <_isatty_r+0x1a>
 801070c:	6023      	str	r3, [r4, #0]
 801070e:	bd38      	pop	{r3, r4, r5, pc}
 8010710:	20001628 	.word	0x20001628

08010714 <_sbrk_r>:
 8010714:	b538      	push	{r3, r4, r5, lr}
 8010716:	4d06      	ldr	r5, [pc, #24]	; (8010730 <_sbrk_r+0x1c>)
 8010718:	2300      	movs	r3, #0
 801071a:	4604      	mov	r4, r0
 801071c:	4608      	mov	r0, r1
 801071e:	602b      	str	r3, [r5, #0]
 8010720:	f7f2 fe4a 	bl	80033b8 <_sbrk>
 8010724:	1c43      	adds	r3, r0, #1
 8010726:	d102      	bne.n	801072e <_sbrk_r+0x1a>
 8010728:	682b      	ldr	r3, [r5, #0]
 801072a:	b103      	cbz	r3, 801072e <_sbrk_r+0x1a>
 801072c:	6023      	str	r3, [r4, #0]
 801072e:	bd38      	pop	{r3, r4, r5, pc}
 8010730:	20001628 	.word	0x20001628

08010734 <_init>:
 8010734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010736:	bf00      	nop
 8010738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801073a:	bc08      	pop	{r3}
 801073c:	469e      	mov	lr, r3
 801073e:	4770      	bx	lr

08010740 <_fini>:
 8010740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010742:	bf00      	nop
 8010744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010746:	bc08      	pop	{r3}
 8010748:	469e      	mov	lr, r3
 801074a:	4770      	bx	lr
